;; # Welcome to [Clerk](https://clerk.vision/)!

^{:nextjournal.clerk/toc true}
(ns {{top/ns}}.{{main/ns}}
    (:require [mentat.clerk-utils.show :refer [show-sci]]
              [nextjournal.clerk :as clerk]))

;; Hello! This project was generated by the [`mathbox/clerk`
;; template](https://mathbox.mentat.org/#project-template). The template comes with
;; everything you need you everything you need to

;; - Interactively develop Clerk notebooks
;; - Publish them to [GitHub Pages](https://pages.github.com/) or [Clerk's Garden](https://github.clerk.garden/)
;; - Use a [custom ClojureScript build](https://clerk-utils.mentat.org/#custom-clojurescript-builds) in both modes

;; Some good next steps:

;; - Visit this project's README.md for guides on how to proceed.
;; - Read the [`MathBox.cljs` documentation notebook](https://mathbox.mentat.org)
;; - Visit https://mathbox.org and the [MathBox examples index](https://mathbox.mentat.org/dev/mathbox/examples/index.html)
;; - Read the [Book of Clerk](https://book.clerk.vision/)
;; - Visit the [Awesome-Clerk](https://github.com/mentat-collective/awesome-clerk) list for ideas
;; - Delete anything in this notebook you feel like you don't need.

;; ## Clerk Environment Basics
;;
;; Here's a basic use of Clerk. This is a function:

(defn hello [s]
  (str "Hello, " s "!"))

;; If we call this function, Clerk will render the form and its output:

(hello "Clerk")

;; - The form `(hello "Clerk")` executes in the JVM.
;; - The resulting string "Hello, Clerk!" is serialized over a WebSocket to the
;;   browser, where Clerk's ClojureScript side renders it using a
;;   pre-registered "viewer".
;; - These viewers are written in code evaluated using the [Small Clojure
;;   Interpreter](https://github.com/babashka/sci), or "SCI".

;; Clerk comes with [many viewers](https://book.clerk.vision/#viewers), and
;; gives us the ability to [write _new_
;; viewers](https://book.clerk.vision/#writing-viewers) using a default SCI
;; environment that Clerk makes available to us.

;; ## MathBox Quickstart

;; First, we'll use `clerk/eval-cljs` to install some nice aliases into this
;; notebook's namespace:

(clerk/eval-cljs
 '(do (require '[reagent.core :as reagent])
      (require '[mathbox.core :as mathbox])
      (require '[mathbox.primitives :as mb])))

;; > Note that you can also use fully-qualified names of any namespace installed
;; > into SCI via the `myusername.sci-extensions` namespace.

;; The following snippets implement the example from the ["Your First
;; Scene"](https://mathbox.mentat.org/#your-first-scene) section of
;; the [`MathBox.cljs` docs
;; notebook](https://mathbox.mentat.org/#your-first-scene).
;;
;; First, some preliminary components:

(show-sci
 (defn Data []
   [mb/Interval
    {:expr (fn [emit x _i t]
             (emit x (Math/sin (+ x t))))
     :width 64
     :channels 2}])

 (defn Curve []
   [:<>
    [Data]
    [mb/Line {:width 5
              :color "#3090FF"}]])

 (defn Vector []
   [:<>
    [mb/Interval
     {:expr (fn [emit x _i t]
              (emit x 0)
              (emit x (- (Math/sin (+ x t)))))
      :width 64
      :channels 2
      :items 2}]
    [mb/Vector
     {:end true
      :width 5
      :color "#50A000"}]]))


;; And then the final animating scene:

^{::clerk/width :wide}
(show-sci
 [mathbox/MathBox
  {:container {:style {:height "400px" :width "100%"}}
   :focus 3}
  [mb/Camera {:position [0 0 3]
              :proxy true}]
  [mb/Cartesian
   {:range [[-2 2] [-1 1]]
    :scale [2 1]}

   [mb/Axis {:axis 1 :width 3 :color "black"}]
   [mb/Axis {:axis 2 :width 3 :color "black"}]
   [mb/Grid {:width 2 :divideX 20 :divideY 10}]
   [Curve]
   [mb/Point {:size 8 :color "#3090FF"}]

   [Vector]

   [mb/Scale {:divide 10}]
   [mb/Ticks {:width 5 :size 15 :color "black"}]
   [mb/Format {:digits 2 :weight "bold"}]
   [mb/Label {:color "red"
              :zIndex 1}]]
  [mb/Play
   {:target "cartesian"
    :pace 5
    :to 2
    :loop true
    :script
    [{:props {:range [[-2 2] [-1 1]]}}
     {:props {:range [[-4 4] [-2 2]]}}
     {:props {:range [[-2 2] [-1 1]]}}]}]])

;; One potential wrinkle to note when using `MathBox.cljs` in Clerk is that you
;; have to define any function you'd like to use over on the ClojureScript side.
;; You won't be able to use this function (defined on the JVM) with MathBox:

(defn square [x]
  (* x x))

;; But _this_ version will work, since it's wrapped in
;; `mentat.clerk-utils.show/show-sci`, and is therefore evaluated on the browser
;; side:

(show-sci
 (defn square [x]
   (* x x)))

;; ## ClojureScript vs SCI
;;
;; Animations are often quite performance-intensive; you might find that a
;; component written inside of the SCI environment is not fast enough.
;;
;; In this case you can use Clerk to render a `cljc` file, which can be
;; processed
;;
;; - evaluated by Clerk on the JVM side, and
;; - compiled by `shadow-cljs` on the ClojureScript side
;;
;; Visit `notebooks/{{top/file}}/performance.cljc` by making an edit to the file
;; or evaluating `(clerk/show! "notebooks/{{top/file}}/performance.cljc")` at
;; the REPL to see an example of a high-performance MathBox visualization using
;; custom ClojureScript.
