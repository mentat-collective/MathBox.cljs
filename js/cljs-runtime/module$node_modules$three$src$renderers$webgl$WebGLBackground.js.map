{
"version":3,
"file":"module$node_modules$three$src$renderers$webgl$WebGLBackground.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/three/src/renderers/webgl/WebGLBackground.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three$src$renderers$webgl$WebGLBackground\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebGLBackground = WebGLBackground;\n\nvar _constants = require(\"../../constants.js\");\n\nvar _BoxGeometry = require(\"../../geometries/BoxGeometry.js\");\n\nvar _PlaneGeometry = require(\"../../geometries/PlaneGeometry.js\");\n\nvar _ShaderMaterial = require(\"../../materials/ShaderMaterial.js\");\n\nvar _Color = require(\"../../math/Color.js\");\n\nvar _Mesh = require(\"../../objects/Mesh.js\");\n\nvar _ShaderLib = require(\"../shaders/ShaderLib.js\");\n\nvar _UniformsUtils = require(\"../shaders/UniformsUtils.js\");\n\nconst _rgb = {\n  r: 0,\n  b: 0,\n  g: 0\n};\n\nfunction WebGLBackground(renderer, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha) {\n  const clearColor = new _Color.Color(0x000000);\n  let clearAlpha = alpha === true ? 0 : 1;\n  let planeMesh;\n  let boxMesh;\n  let currentBackground = null;\n  let currentBackgroundVersion = 0;\n  let currentTonemapping = null;\n\n  function render(renderList, scene) {\n    let forceClear = false;\n    let background = scene.isScene === true ? scene.background : null;\n\n    if (background && background.isTexture) {\n      const usePMREM = scene.backgroundBlurriness > 0; // use PMREM if the user wants to blur the background\n\n      background = (usePMREM ? cubeuvmaps : cubemaps).get(background);\n    } // Ignore background in AR\n    // TODO: Reconsider this.\n\n\n    const xr = renderer.xr;\n    const session = xr.getSession && xr.getSession();\n\n    if (session && session.environmentBlendMode === 'additive') {\n      background = null;\n    }\n\n    if (background === null) {\n      setClear(clearColor, clearAlpha);\n    } else if (background && background.isColor) {\n      setClear(background, 1);\n      forceClear = true;\n    }\n\n    if (renderer.autoClear || forceClear) {\n      renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n    }\n\n    if (background && (background.isCubeTexture || background.mapping === _constants.CubeUVReflectionMapping)) {\n      if (boxMesh === undefined) {\n        boxMesh = new _Mesh.Mesh(new _BoxGeometry.BoxGeometry(1, 1, 1), new _ShaderMaterial.ShaderMaterial({\n          name: 'BackgroundCubeMaterial',\n          uniforms: (0, _UniformsUtils.cloneUniforms)(_ShaderLib.ShaderLib.backgroundCube.uniforms),\n          vertexShader: _ShaderLib.ShaderLib.backgroundCube.vertexShader,\n          fragmentShader: _ShaderLib.ShaderLib.backgroundCube.fragmentShader,\n          side: _constants.BackSide,\n          depthTest: false,\n          depthWrite: false,\n          fog: false\n        }));\n        boxMesh.geometry.deleteAttribute('normal');\n        boxMesh.geometry.deleteAttribute('uv');\n\n        boxMesh.onBeforeRender = function (renderer, scene, camera) {\n          this.matrixWorld.copyPosition(camera.matrixWorld);\n        }; // add \"envMap\" material property so the renderer can evaluate it like for built-in materials\n\n\n        Object.defineProperty(boxMesh.material, 'envMap', {\n          get: function () {\n            return this.uniforms.envMap.value;\n          }\n        });\n        objects.update(boxMesh);\n      }\n\n      boxMesh.material.uniforms.envMap.value = background;\n      boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;\n      boxMesh.material.uniforms.backgroundBlurriness.value = scene.backgroundBlurriness;\n      boxMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;\n      boxMesh.material.toneMapped = background.encoding === _constants.sRGBEncoding ? false : true;\n\n      if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n        boxMesh.material.needsUpdate = true;\n        currentBackground = background;\n        currentBackgroundVersion = background.version;\n        currentTonemapping = renderer.toneMapping;\n      }\n\n      boxMesh.layers.enableAll(); // push to the pre-sorted opaque render list\n\n      renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);\n    } else if (background && background.isTexture) {\n      if (planeMesh === undefined) {\n        planeMesh = new _Mesh.Mesh(new _PlaneGeometry.PlaneGeometry(2, 2), new _ShaderMaterial.ShaderMaterial({\n          name: 'BackgroundMaterial',\n          uniforms: (0, _UniformsUtils.cloneUniforms)(_ShaderLib.ShaderLib.background.uniforms),\n          vertexShader: _ShaderLib.ShaderLib.background.vertexShader,\n          fragmentShader: _ShaderLib.ShaderLib.background.fragmentShader,\n          side: _constants.FrontSide,\n          depthTest: false,\n          depthWrite: false,\n          fog: false\n        }));\n        planeMesh.geometry.deleteAttribute('normal'); // add \"map\" material property so the renderer can evaluate it like for built-in materials\n\n        Object.defineProperty(planeMesh.material, 'map', {\n          get: function () {\n            return this.uniforms.t2D.value;\n          }\n        });\n        objects.update(planeMesh);\n      }\n\n      planeMesh.material.uniforms.t2D.value = background;\n      planeMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;\n      planeMesh.material.toneMapped = background.encoding === _constants.sRGBEncoding ? false : true;\n\n      if (background.matrixAutoUpdate === true) {\n        background.updateMatrix();\n      }\n\n      planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);\n\n      if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n        planeMesh.material.needsUpdate = true;\n        currentBackground = background;\n        currentBackgroundVersion = background.version;\n        currentTonemapping = renderer.toneMapping;\n      }\n\n      planeMesh.layers.enableAll(); // push to the pre-sorted opaque render list\n\n      renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);\n    }\n  }\n\n  function setClear(color, alpha) {\n    color.getRGB(_rgb, (0, _UniformsUtils.getUnlitUniformColorSpace)(renderer));\n    state.buffers.color.setClear(_rgb.r, _rgb.g, _rgb.b, alpha, premultipliedAlpha);\n  }\n\n  return {\n    getClearColor: function () {\n      return clearColor;\n    },\n    setClearColor: function (color, alpha = 1) {\n      clearColor.set(color);\n      clearAlpha = alpha;\n      setClear(clearColor, clearAlpha);\n    },\n    getClearAlpha: function () {\n      return clearAlpha;\n    },\n    setClearAlpha: function (alpha) {\n      clearAlpha = alpha;\n      setClear(clearColor, clearAlpha);\n    },\n    render: render\n  };\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","WebGLBackground","renderer","cubemaps","cubeuvmaps","state","objects","alpha","premultipliedAlpha","setClear","color","getRGB","_rgb","_UniformsUtils","getUnlitUniformColorSpace","buffers","r","g","b","clearColor","_Color","Color","clearAlpha","planeMesh","boxMesh","currentBackground","currentBackgroundVersion","currentTonemapping","getClearColor","setClearColor","set","getClearAlpha","setClearAlpha","render","renderList","scene","forceClear","background","isScene","isTexture","get","backgroundBlurriness","xr","session","getSession","environmentBlendMode","isColor","autoClear","clear","autoClearColor","autoClearDepth","autoClearStencil","isCubeTexture","mapping","_constants","CubeUVReflectionMapping","undefined","_Mesh","Mesh","_BoxGeometry","BoxGeometry","_ShaderMaterial","ShaderMaterial","name","uniforms","cloneUniforms","_ShaderLib","ShaderLib","backgroundCube","vertexShader","fragmentShader","side","BackSide","depthTest","depthWrite","fog","geometry","deleteAttribute","onBeforeRender","boxMesh.onBeforeRender","camera","matrixWorld","copyPosition","material","envMap","update","flipEnvMap","isRenderTargetTexture","backgroundIntensity","toneMapped","encoding","sRGBEncoding","version","toneMapping","needsUpdate","layers","enableAll","unshift","_PlaneGeometry","PlaneGeometry","FrontSide","t2D","matrixAutoUpdate","updateMatrix","uvTransform","copy","matrix"]
}
