import "./cljs_env.js";
shadow$provide.module$node_modules$$use_gesture$core$dist$maths_0c237923_cjs_dev=function(global,require,module,exports){function rubberband(distance,dimension,constant){return 0===dimension||Infinity===Math.abs(dimension)?Math.pow(distance,5*constant):distance*dimension*constant/(dimension+constant*distance)}function rubberbandIfOutOfBounds(position,min,max,constant=.15){return 0===constant?Math.max(min,Math.min(position,max)):position<min?-rubberband(min-position,max-min,constant)+min:position>
max?+rubberband(position-max,max-min,constant)+max:position}exports.V={toVector(v,fallback){void 0===v&&(v=fallback);return Array.isArray(v)?v:[v,v]},add(v1,v2){return[v1[0]+v2[0],v1[1]+v2[1]]},sub(v1,v2){return[v1[0]-v2[0],v1[1]-v2[1]]},addTo(v1,v2){v1[0]+=v2[0];v1[1]+=v2[1]},subTo(v1,v2){v1[0]-=v2[0];v1[1]-=v2[1]}};exports.computeRubberband=function(bounds,[Vx,Vy],[Rx,Ry]){const [[X0,X1],[Y0,Y1]]=bounds;return[rubberbandIfOutOfBounds(Vx,X0,X1,Rx),rubberbandIfOutOfBounds(Vy,Y0,Y1,Ry)]};exports.rubberbandIfOutOfBounds=
rubberbandIfOutOfBounds}
//# sourceMappingURL=module$node_modules$$use_gesture$core$dist$maths_0c237923_cjs_dev.js.map
