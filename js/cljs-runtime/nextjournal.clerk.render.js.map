{"version":3,"sources":["nextjournal/clerk/render.cljs"],"mappings":"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","names":["reagent.core/set-default-compiler!","reagent.core/create-compiler","nextjournal.clerk.render/nbsp","goog.string/unescapeEntities","nextjournal.clerk.render/reagent-atom?","x","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","reagent.ratom/IReactiveAtom","nextjournal.clerk.render/toc-items","items","cljs.core.reduce","p__64362","map__64363","cljs.core/--destructure-map","cljs.core.get","acc","item","content","children","attrs","title","nextjournal.markdown.transform/->text","cljs.core.conj","cljs.core/vec","G__64364","nextjournal.clerk.render/dark-mode-toggle","!state","map__64365","cljs.core/deref","dark-mode?","spring","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core/not","nextjournal.ui.components.motion/svg","nextjournal.ui.components.motion/path","nextjournal.ui.components.motion/circle","nextjournal.ui.components.motion/g","nextjournal.clerk.render/localstorage-set!","key","val","js/window","nextjournal.clerk.render/localstorage-get","cljs.reader.read_string","nextjournal.clerk.render/local-storage-dark-mode-key","nextjournal.clerk.render/set-dark-mode!","class-list","js/document.querySelector","nextjournal.clerk.render/setup-dark-mode!","map__64369","cljs.core/add-watch","p__64370","map__64371","_","old","cljs.core.not_EQ_","js/nextjournal","js/nextjournal.clerk","js/nextjournal.clerk.render","js/nextjournal.clerk.render.!eval-counter","nextjournal.clerk.render/!eval-counter","reagent.core.atom","p__64372","map__64373","nextjournal.clerk.render/render-notebook","_doc","xs","bundle?","css-class","toc","toc-visibility","with-let64374","reagent.ratom/with-let-values","temp__5808__auto__","reagent.ratom/*ratom-context*","c__53026__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init64375","res64376","local-storage-key","navbar-width","temp__5806__auto__","stored-open?","root-ref-fn","el","heading","js/location","e64377","G__64378","cljs.core/not-empty","js/decodeURI","js/Error","js/console.warn","js/requestAnimationFrame","map__64379","md-toc","mobile?","open?","doc-inset","cljs.core._EQ_","and__5043__auto__","nextjournal.clerk.render.navbar/toggle-button","nextjournal.ui.components.icon/menu","nextjournal.clerk.render.navbar/panel","nextjournal.clerk.render.navbar/navbar","nextjournal.ui.components.motion/div","nextjournal.clerk.render.navbar/spring","or__5045__auto__","cljs.core.doall","cljs.core.map_indexed","idx","map__64380","viewer-name","nextjournal.clerk.viewer/->viewer","viewer-css-class","nextjournal.clerk.viewer/css-class","inner-viewer-name","G__64381","nextjournal.clerk.viewer/->value","cljs.core.concat","G__64382","cljs.core/PersistentVector","cljs.core/name","G__64383","cljs.core/Keyword","nextjournal.clerk.viewer/width","G__64384","nextjournal.clerk.render/inspect-presented","nextjournal.clerk.render/opts->query","opts","p1__64385#","cljs.core.map","cljs.core.update","cljs.core.partial","clojure.string/join","clojure.string.join","nextjournal.clerk.render/render-unreadable-edn","edn","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","nextjournal.clerk.render/error-badge","seq64395","self__5755__auto__","cljs.core/seq","cljs.core.into","nextjournal.clerk.render/error-view","error","!stack-expanded","nextjournal.clerk.render.hooks/use-state","temp__5804__auto__","data","nextjournal.clerk.render/inspect","stack","e64396","clojure.string/split-lines","cljs.core.drop","cljs.core.mapv","clojure.string/trim","cljs.core/count","G__64397","obj64400","js/undefined","nextjournal.clerk.render/ErrorBoundary","js/module$node_modules$react$index.Component","props","self__","obj64399","hash","handle-error","this","map__64401","cljs.core.apply","cljs.core/hash-map","map__64402","obj64405","obj64407","map__64403","obj64408","obj64414","reagent.core.as_element","obj64415","state","obj64416","obj64417","obj64418","nextjournal.clerk.render/default-loading-view","nextjournal.clerk.render/read-string","s","js/nextjournal.clerk.sci_env.read-string","p__64421","map__64422","nextjournal.clerk.render/fetch!","blob-id","js/fetch","p1__64419#","p1__64420#","e64423","e","js/console.error","nextjournal.clerk.render/->expanded-at","auto-expand?","presented","G__64424","nextjournal.clerk.viewer/assign-content-lengths","nextjournal.clerk.viewer/assign-expanded-at","p__64430","p__64431","map__64432","map__64433","nextjournal.clerk.render/render-result","result","fetch-opts","auto-expand-results?","!desc","nextjournal.clerk.render.hooks/use-state-with-deps","!expanded-at","cljs.core/map?","fetch-fn","nextjournal.clerk.render.hooks.use_callback","more","nextjournal.clerk.viewer/merge-presentations","p1__64428#","cljs.core.merge","on-key-down","event","cljs.core/dissoc","on-key-up","ref-fn","p1__64429#","js/document","js/document.addEventListener","js/document.removeEventListener","nextjournal.view.context/provide","nextjournal.clerk.render/toggle-expanded","path","map__64445","hover-path","prompt-multi-expand?","hover-path-count","hover-path-expanded?","expanded-at","p__64446","vec__64447","cljs.core.nth","expanded?","cljs.core/coll?","cljs.core/vector?","cljs.core.assoc","cljs.core/update","nextjournal.clerk.render/expandable?","nextjournal.clerk.render/inspect-children","G__64450","G__64451","cljs.core.fnil","cljs.core/conj","nextjournal.clerk.render/expand-style","nextjournal.clerk.render/triangle","nextjournal.clerk.render/triangle-spacer","nextjournal.clerk.render/expand-button","opening-paren","map__64452","multi-expand?","p__64453","map__64454","nextjournal.clerk.render/render-coll","viewer","map__64455","closing-paren","cljs.core.comp","cljs.core.interpose","G__64456","cljs.core/list?","p__64457","map__64458","nextjournal.clerk.render/render-elision","total","offset","unbounded?","nextjournal.view.context/consume","cljs.core/fn?","p__64459","map__64460","nextjournal.clerk.render/render-map","map__64461","G__64462","p__64464","map__64465","nextjournal.clerk.render/render-string","p1__64463#","p__64467","map__64468","nextjournal.clerk.render/render-quoted-string","map__64469","p1__64466#","cljs.core/some","clojure.string/includes?","cljs.core/first","cljs.core/rest","nextjournal.clerk.render/render-number","num","js/Number.isNaN","nextjournal.clerk.render/sort!","!sort","i","k","map__64470","sort-key","sort-order","cljs.core/reset!","p__64484","p__64485","map__64486","map__64487","nextjournal.clerk.render/sort-data","sort-index","head","rows","G__64489","p1__64473#","cljs.core.sort_by","G__64493","cljs.core/val","clojure.string/lower-case","p1__64476#","p2__64477#","p1__64479#","p2__64478#","cljs.core/compare","nextjournal.clerk.render/x-icon","nextjournal.clerk.render/check-icon","p__64494","vec__64495","nextjournal.clerk.render/render-table-error","nextjournal.clerk.render/render-table-with-sticky-header","seq64498","!table-ref","nextjournal.clerk.render.hooks.use_ref","!table-clone-ref","nextjournal.clerk.render.hooks.use_layout_effect","sticky","js/module$node_modules$vh_sticky_table_header$build$commonjs$index.StickyTableHeader","p__64499","map__64500","nextjournal.clerk.render/throwable-view","via","trace","p__64501","map__64502","_ex","type","message","_trace","p__64503","vec__64504","call","_x","file","line","nextjournal.clerk.render/render-throwable","ex","G__64509","nextjournal.clerk.render/render-tagged-value","p__64513","map__64514","tag","value","nextjournal.clerk.render.render_tagged_value","space?","js/nextjournal.clerk.render.!doc","nextjournal.clerk.render/!doc","reagent.ratom.atom","js/nextjournal.clerk.render.!error","nextjournal.clerk.render/!error","js/nextjournal.clerk.render.!viewers","nextjournal.clerk.render/!viewers","nextjournal.clerk.viewer/!viewers","nextjournal.clerk.render/set-viewers!","scope","viewers","nextjournal.clerk.render/valid-react-element?","js/module$node_modules$react$index.isValidElement","G__64537","with-let64539","init64540","res64541","map__64544","cljs.core/peek","nextjournal.clerk.render/in-process-fetch","js/Promise","nextjournal.clerk.viewer.present","with-let64547","init64548","res64549","nextjournal.clerk.render/root","js/nextjournal.clerk.render.*sync*","nextjournal.clerk.render/*sync*","nextjournal.clerk.render/atom-changed","var-name","_atom","_old-state","new-state","js/ws_send","cljs.core.pr_str","cljs.core/List","nextjournal.clerk.render/intern-atom!","sci.ctx-store/get-ctx","sci.core.intern","sci.core.create_ns","cljs.core.symbol","cljs.core/namespace","G__64556","js/nextjournal.clerk.render.!synced-atom-vars","nextjournal.clerk.render/!synced-atom-vars","cljs.core.atom","nextjournal.clerk.render/sci-ns-unmap!","ns-sym","var-sym","ns-unmap","sci.core/eval-string*","js/nextjournal.clerk.render.*reset-sync-atoms?*","nextjournal.clerk.render/*reset-sync-atoms?*","nextjournal.clerk.render/set-reset-sync-atoms!","new-val","nextjournal.clerk.render/intern-atoms!","atom-var-name->state","vars-in-use","cljs.core/keys","vars-interned","seq__64558","chunk__64559","count__64560","i__64561","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/next","var-name-to-unmap","clojure.set.difference","seq__64562","chunk__64563","count__64564","i__64565","vec__64576","vec__64583","temp__5802__auto__","existing-var","sci.core/resolve","*sync*-orig-val__64579","*sync*-temp-val__64580","*sync*-orig-val__64586","*sync*-temp-val__64587","nextjournal.clerk.render/remount?","doc-or-patch","p1__64588#","cljs.core/tree-seq","nextjournal.clerk.render/re-eval-viewer-fns","doc","p1__64591#","re-eval","nextjournal.clerk.viewer/->viewer-fn","p1__64592#","clojure.walk/postwalk","G__64593","nextjournal.clerk.viewer/viewer-fn?","p__64594","map__64596","nextjournal.clerk.render/set-state!","cljs.core/contains?","cljs.core/inc","nextjournal.clerk.render/apply-patch","patch","editscript.core/patch","editscript.core/edits->script","p__64599","map__64600","nextjournal.clerk.render/patch-state!","p1__64598#","js/setTimeout","js/nextjournal.clerk.render.!pending-clerk-eval-replies","nextjournal.clerk.render/!pending-clerk-eval-replies","nextjournal.clerk.render/clerk-eval","form","eval-id","cljs.core.gensym","promise","resolve","reject","goog/global","p__64603","map__64604","nextjournal.clerk.render/process-eval-reply!","reply","map__64605","p__64609","map__64610","nextjournal.clerk.render/dispatch","msg","dispatch-fn","js/nextjournal.clerk.render.react-root","nextjournal.clerk.render/react-root","js/document.getElementById","js/module$node_modules$react_dom$client.createRoot","nextjournal.clerk.render/mount","p__64614","map__64615","nextjournal.clerk.render/render-katex","tex-string","inline?","nextjournal.viewer.katex.to_html_string","nextjournal.clerk.render/html-render","markup","nextjournal.clerk.render/html-viewer","nextjournal.clerk.render/html","nextjournal.clerk.viewer/with-viewer","nextjournal.clerk.render/render-reagent","G__64620","nextjournal.clerk.render/reagent-viewer","nextjournal.clerk.render/render-promise","p","nextjournal.clerk.render.hooks.use_effect","p1__64622#","p1__64623#","map__64624","pending","p__64625","map__64626","nextjournal.clerk.render/with-d3-require","package","loading-view","f","nextjournal.clerk.render.hooks/use-d3-require","nextjournal.clerk.render/render-vega-lite","nextjournal.clerk.render.hooks/use-error-handler","vega-embed","p1__64627#","js/module$node_modules$react$index.useCallback","cljs.core/clj->js","cljs.core.dissoc","callback","nextjournal.clerk.render/render-plotly","plotly","p1__64628#","nextjournal.clerk.render/render-mathjax","nextjournal.viewer.mathjax/viewer","nextjournal.clerk.render/render-code","nextjournal.clerk.render.code/render-code","nextjournal.clerk.render/expand-icon","nextjournal.clerk.render/render-folded-code","code-string","!hidden?","p__64633","map__64634","nextjournal.clerk.render/url-for","src","nextjournal.clerk.render/consume-view-context"],"sourcesContent":["(ns nextjournal.clerk.render\n  (:require [\"react\" :as react]\n            [\"react-dom/client\" :as react-client]\n            [\"vh-sticky-table-header\" :as sticky-table-header]\n            [applied-science.js-interop :as j]\n            [cljs.reader]\n            [clojure.set :as set]\n            [clojure.string :as str]\n            [clojure.walk :as w]\n            [editscript.core :as editscript]\n            [goog.object]\n            [goog.string :as gstring]\n            [nextjournal.clerk.render.code :as code]\n            [nextjournal.clerk.render.hooks :as hooks]\n            [nextjournal.clerk.render.navbar :as navbar]\n            [nextjournal.clerk.viewer :as viewer]\n            [nextjournal.markdown.transform :as md.transform]\n            [nextjournal.ui.components.icon :as icon]\n            [nextjournal.ui.components.motion :as motion]\n            [nextjournal.view.context :as view-context]\n            [nextjournal.viewer.katex :as katex]\n            [nextjournal.viewer.mathjax :as mathjax]\n            [reagent.core :as r]\n            [reagent.ratom :as ratom]\n            [sci.core :as sci]\n            [sci.ctx-store]\n            [shadow.cljs.modern :refer [defclass]]))\n\n(r/set-default-compiler! (r/create-compiler {:function-components true}))\n\n(declare inspect inspect-presented reagent-viewer html html-viewer)\n\n(def nbsp (gstring/unescapeEntities \"&nbsp;\"))\n\n(defn reagent-atom? [x]\n  (satisfies? ratom/IReactiveAtom x))\n\n(defn toc-items [items]\n  (reduce\n   (fn [acc {:as item :keys [content children attrs]}]\n     (if content\n       (let [title (md.transform/->text item)]\n         (->> {:title title\n               :path (str \"#\" (:id attrs))\n               :items (toc-items children)}\n              (conj acc)\n              vec))\n       (toc-items (:children item))))\n   []\n   items))\n\n(defn dark-mode-toggle [!state]\n  (let [{:keys [dark-mode?]} @!state\n        spring {:type :spring :stiffness 200 :damping 10}]\n    [:div.relative.dark-mode-toggle\n     [:button.text-slate-400.hover:text-slate-600.dark:hover:text-white.cursor-pointer\n      {:on-click #(swap! !state assoc :dark-mode? (not dark-mode?))}\n      (if dark-mode?\n        [:> motion/svg\n         {:xmlns \"http://www.w3.org/2000/svg\"\n          :class \"w-5 h-5 md:w-4 md:h-4\"\n          :viewBox \"0 0 50 50\"\n          :key \"moon\"}\n         [:> motion/path\n          {:d \"M 43.81 29.354 C 43.688 28.958 43.413 28.626 43.046 28.432 C 42.679 28.238 42.251 28.198 41.854 28.321 C 36.161 29.886 30.067 28.272 25.894 24.096 C 21.722 19.92 20.113 13.824 21.683 8.133 C 21.848 7.582 21.697 6.985 21.29 6.578 C 20.884 6.172 20.287 6.022 19.736 6.187 C 10.659 8.728 4.691 17.389 5.55 26.776 C 6.408 36.163 13.847 43.598 23.235 44.451 C 32.622 45.304 41.28 39.332 43.816 30.253 C 43.902 29.96 43.9 29.647 43.81 29.354 Z\"\n           :fill \"currentColor\"\n           :initial \"initial\"\n           :animate \"animate\"\n           :variants {:initial {:scale 0.6 :rotate 90}\n                      :animate {:scale 1 :rotate 0 :transition spring}}}]]\n        [:> motion/svg\n         {:key \"sun\"\n          :class \"w-5 h-5 md:w-4 md:h-4\"\n          :viewBox \"0 0 24 24\"\n          :fill \"none\"\n          :xmlns \"http://www.w3.org/2000/svg\"}\n         [:> motion/circle\n          {:cx \"11.9998\"\n           :cy \"11.9998\"\n           :r \"5.75375\"\n           :fill \"currentColor\"\n           :initial \"initial\"\n           :animate \"animate\"\n           :variants {:initial {:scale 1.5}\n                      :animate {:scale 1 :transition spring}}}]\n         [:> motion/g\n          {:initial \"initial\"\n           :animate \"animate\"\n           :variants {:initial {:rotate 45}\n                      :animate {:rotate 0 :transition spring}}}\n          [:circle {:cx \"3.08982\" :cy \"6.85502\" :r \"1.71143\" :transform \"rotate(-60 3.08982 6.85502)\" :fill \"currentColor\"}]\n          [:circle {:cx \"3.0903\" :cy \"17.1436\" :r \"1.71143\" :transform \"rotate(-120 3.0903 17.1436)\" :fill \"currentColor\"}]\n          [:circle {:cx \"12\" :cy \"22.2881\" :r \"1.71143\" :fill \"currentColor\"}]\n          [:circle {:cx \"20.9101\" :cy \"17.1436\" :r \"1.71143\" :transform \"rotate(-60 20.9101 17.1436)\" :fill \"currentColor\"}]\n          [:circle {:cx \"20.9101\" :cy \"6.8555\" :r \"1.71143\" :transform \"rotate(-120 20.9101 6.8555)\" :fill \"currentColor\"}]\n          [:circle {:cx \"12\" :cy \"1.71143\" :r \"1.71143\" :fill \"currentColor\"}]]])]]))\n\n\n(defn localstorage-set! [key val]\n  (when (exists? js/window)\n    (.setItem (.-localStorage js/window) key val)))\n\n(defn localstorage-get [key]\n  (when (exists? js/window)\n    (cljs.reader/read-string (.getItem (.-localStorage js/window) key))))\n\n\n(def local-storage-dark-mode-key \"clerk-darkmode\")\n\n(defn set-dark-mode! [dark-mode?]\n  (let [class-list (.-classList (js/document.querySelector \"html\"))]\n    (if dark-mode?\n      (.add class-list \"dark\")\n      (.remove class-list \"dark\")))\n  (localstorage-set! local-storage-dark-mode-key dark-mode?))\n\n(defn setup-dark-mode! [!state]\n  (let [{:keys [dark-mode?]} @!state]\n    (add-watch !state ::dark-mode\n               (fn [_ _ old {:keys [dark-mode?]}]\n                 (when (not= (:dark-mode? old) dark-mode?)\n                   (set-dark-mode! dark-mode?))))\n    (when dark-mode?\n      (set-dark-mode! dark-mode?))))\n\n(defonce !eval-counter (r/atom 0))\n\n(defn render-notebook [{:as _doc xs :blocks :keys [bundle? css-class toc toc-visibility]}]\n  (r/with-let [local-storage-key \"clerk-navbar\"\n               navbar-width 220\n               !state (r/atom {:toc (toc-items (:children toc))\n                               :md-toc toc\n                               :dark-mode? (localstorage-get local-storage-dark-mode-key)\n                               :theme {:slide-over \"bg-slate-100 dark:bg-gray-800 font-sans border-r dark:border-slate-900\"}\n                               :width navbar-width\n                               :mobile-width 300\n                               :local-storage-key local-storage-key\n                               :set-hash? (not bundle?)\n                               :scroll-el (js/document.querySelector \"html\")\n                               :open? (if-some [stored-open? (localstorage-get local-storage-key)]\n                                        stored-open?\n                                        (not= :collapsed toc-visibility))})\n               root-ref-fn (fn [el]\n                             (when el\n                               (setup-dark-mode! !state)\n                               (when-some [heading (when (and (exists? js/location) (not bundle?))\n                                                     (try (some-> js/location .-hash not-empty js/decodeURI js/document.querySelector)\n                                                          (catch js/Error _\n                                                            (js/console.warn (str \"Clerk render-notebook, invalid selector: \"\n                                                                                  (.-hash js/location))))))]\n                                 (js/requestAnimationFrame #(.scrollIntoViewIfNeeded heading)))))]\n    (let [{:keys [md-toc mobile? open?]} @!state\n          doc-inset (cond\n                      mobile? 0\n                      open? navbar-width\n                      :else 0)]\n      (when-not (= md-toc toc)\n        (swap! !state assoc :toc (toc-items (:children toc)) :md-toc toc :open? (not= :collapsed toc-visibility)))\n      [:div.flex\n       {:ref root-ref-fn}\n       [:div.fixed.top-2.left-2.md:left-auto.md:right-2.z-10\n        [dark-mode-toggle !state]]\n       (when (and toc toc-visibility)\n         [:<>\n          [navbar/toggle-button !state\n           [:<>\n            [icon/menu {:size 20}]\n            [:span.uppercase.tracking-wider.ml-1.font-bold\n             {:class \"text-[12px]\"} \"ToC\"]]\n           {:class \"z-10 fixed right-2 top-2 md:right-auto md:left-3 md:top-[7px] text-slate-400 font-sans text-xs hover:underline cursor-pointer flex items-center bg-white dark:bg-gray-900 py-1 px-3 md:p-0 rounded-full md:rounded-none border md:border-0 border-slate-200 dark:border-gray-500 shadow md:shadow-none dark:text-slate-400 dark:hover:text-white\"}]\n          [navbar/panel !state [navbar/navbar !state]]])\n       [:div.flex-auto.w-screen.scroll-container\n        [:> motion/div\n         {:key \"viewer-notebook\"\n          :initial (when toc-visibility {:margin-left doc-inset})\n          :animate (when toc-visibility {:margin-left doc-inset})\n          :transition navbar/spring\n          :class (or css-class \"flex flex-col items-center viewer-notebook flex-auto\")}\n         (doall\n          (map-indexed (fn [idx x]\n                         (let [{viewer-name :name} (viewer/->viewer x)\n                               viewer-css-class (viewer/css-class x)\n                               inner-viewer-name (some-> x viewer/->value viewer/->viewer :name)]\n                           ^{:key (str idx \"-\" @!eval-counter)}\n                           [:div {:class (concat\n                                          [(when (:nextjournal/open-graph-image-capture (viewer/->value x)) \"open-graph-image-capture\")]\n                                          (if viewer-css-class\n                                            (cond-> viewer-css-class\n                                              (string? viewer-css-class) vector)\n                                            [\"viewer\"\n                                             (when viewer-name (str \"viewer-\" (name viewer-name)))\n                                             (when inner-viewer-name (str \"viewer-\" (name inner-viewer-name)))\n                                             (case (or (viewer/width x) (case viewer-name (:code :code-folded) :wide :prose))\n                                               :wide \"w-full max-w-wide\"\n                                               :full \"w-full\"\n                                               \"w-full max-w-prose px-8\")]))}\n                            [inspect-presented x]]))\n                       xs))]]])))\n\n(defn opts->query [opts]\n  (->> opts\n       (map #(update % 0 name))\n       (map (partial str/join \"=\"))\n       (str/join \"&\")))\n\n\n#_(opts->query {:s 12 :num 42})\n\n\n\n(defn render-unreadable-edn [edn]\n  [:span.inspected-value.whitespace-nowrap.cmt-default edn])\n\n(defn error-badge [& content]\n  [:div.bg-red-50.rounded-sm.text-xs.text-red-400.px-2.py-1.items-center.sans-serif.inline-flex\n   [:svg.h-4.w-4.text-red-400 {:xmlns \"http://www.w3.org/2000/svg\" :viewBox \"0 0 20 20\" :fill \"currentColor\" :aria-hidden \"true\"}\n    [:path {:fill-rule \"evenodd\" :d \"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" :clip-rule \"evenodd\"}]]\n   (into [:div.ml-2.font-bold] content)])\n\n(defn error-view [error]\n  (let [!stack-expanded (hooks/use-state false)]\n    [:div.bg-red-100.dark:bg-gray-800.px-6.py-4.rounded-md.text-xs.dark:border-2.dark:border-red-300.not-prose\n     [:p.font-mono.text-red-600.dark:text-red-300.font-bold (or (:message error) (.-message error))]\n     (when-let [data (or (:data error) (.-data error))]\n       [:div.mt-2.overflow-auto [inspect data]])\n     (when-let [stack (try\n                        (->> (or (:stack error) (.-stack error))\n                             str/split-lines\n                             (drop 1)\n                             (mapv str/trim))\n                        (catch js/Error _ nil))]\n       [:pre.text-red-600.dark:text-red-300.w-full.overflow-auto.mt-2 {:class \"text-[11px] max-h-[155px]\"}\n        [:span.underline.cursor-pointer {:on-click #(swap! !stack-expanded not)}\n         (if @!stack-expanded \"Hide\" \"Show\")\n         \" Stacktrace (\" (count stack) \" lines)\\n\"]\n        (when @!stack-expanded\n          (str/join \"\\n\" stack))])]))\n\n\n(defclass ErrorBoundary\n  (extends react/Component)\n  (field handle-error)\n  (field hash)\n  (constructor [this ^js props]\n               (super props)\n               (set! (.-state this) #js {:error nil :hash (j/get props :hash)})\n               (set! hash (j/get props :hash))\n               (set! handle-error (fn [error]\n                                    (set! (.-state this) #js {:error error}))))\n\n  Object\n  (render [this ^js props]\n          (j/let [^js {{:keys [error]} :state\n                       {:keys [children]} :props} this]\n            (if error\n              (r/as-element [error-view error])\n              children))))\n\n(j/!set ErrorBoundary\n        :getDerivedStateFromError (fn [error] #js {:error error})\n        :getDerivedStateFromProps (fn [props state]\n                                    (when (not= (j/get props :hash)\n                                                (j/get state :hash))\n                                      #js {:hash (j/get props :hash) :error nil})))\n\n\n(def default-loading-view \"Loading...\")\n\n;; TODO: drop this\n(defn read-string [s]\n  (js/nextjournal.clerk.sci_env.read-string s))\n\n\n(defn fetch! [{:keys [blob-id]} opts]\n  #_(js/console.log :fetch! blob-id opts)\n  (-> (js/fetch (str \"_blob/\" blob-id (when (seq opts)\n                                        (str \"?\" (opts->query opts)))))\n      (.then #(.text %))\n      (.then #(try (read-string %)\n                   (catch js/Error e\n                     (js/console.error #js {:message \"sci read error\" :blob-id blob-id :code-string % :error e })\n                     (render-unreadable-edn %))))))\n\n(defn ->expanded-at [auto-expand? presented]\n  (cond-> presented\n    auto-expand? (-> viewer/assign-content-lengths)\n    true (-> viewer/assign-expanded-at (get :nextjournal/expanded-at {}))))\n\n(defn render-result [{:as result :nextjournal/keys [fetch-opts hash presented]} {:as opts :keys [auto-expand-results?]}]\n  (let [!desc (hooks/use-state-with-deps presented [hash])\n        !expanded-at (hooks/use-state (when (map? @!desc)\n                                        (->expanded-at auto-expand-results? @!desc)))\n        fetch-fn (hooks/use-callback (when fetch-opts\n                                       (fn [opts]\n                                         (.then (fetch! fetch-opts opts)\n                                                (fn [more]\n                                                  (swap! !desc viewer/merge-presentations more opts)\n                                                  (swap! !expanded-at #(merge (->expanded-at auto-expand-results? @!desc) %))))))\n                                     [hash])\n        on-key-down (hooks/use-callback (fn [event]\n                                          (if (.-altKey event)\n                                            (swap! !expanded-at assoc :prompt-multi-expand? true)\n                                            (swap! !expanded-at dissoc :prompt-multi-expand?))))\n        on-key-up (hooks/use-callback #(swap! !expanded-at dissoc :prompt-multi-expand?))\n        ref-fn (hooks/use-callback #(if %\n                                      (when (exists? js/document)\n                                        (js/document.addEventListener \"keydown\" on-key-down)\n                                        (js/document.addEventListener \"keyup\" on-key-up))\n                                      (when (exists? js/document)\n                                        (js/document.removeEventListener \"keydown\" on-key-down)\n                                        (js/document.removeEventListener \"up\" on-key-up))))]\n    (when @!desc\n      [view-context/provide {:fetch-fn fetch-fn}\n       [:> ErrorBoundary {:hash hash}\n        [:div.relative\n         [:div.overflow-y-hidden\n          {:ref ref-fn}\n          [inspect-presented {:!expanded-at !expanded-at} @!desc]]]]])))\n\n(defn toggle-expanded [!expanded-at path event]\n  (.preventDefault event)\n  (.stopPropagation event)\n  (let [{:keys [hover-path prompt-multi-expand?]} @!expanded-at\n        hover-path-count (count hover-path)\n        hover-path-expanded? (get @!expanded-at path)]\n    (if (and hover-path prompt-multi-expand? (= (count path) hover-path-count))\n      (swap! !expanded-at (fn [expanded-at]\n                            (reduce\n                             (fn [acc [path expanded?]]\n                               (if (and (coll? path) (vector? path) (= (count path) hover-path-count))\n                                 (assoc acc path (not hover-path-expanded?))\n                                 (assoc acc path expanded?)))\n                             {}\n                             expanded-at)))\n      (swap! !expanded-at update path not))))\n\n\n(defn expandable? [xs]\n  (< 1 (count xs)))\n\n\n(defn inspect-children [opts]\n  ;; TODO: move update function onto viewer\n  (map-indexed (fn [idx x]\n                 (inspect-presented (update opts :path (fnil conj []) idx) x))))\n\n(def expand-style\n  [\"cursor-pointer\"\n   \"bg-indigo-50\"\n   \"hover:bg-indigo-100\"\n   \"border-b\"\n   \"border-gray-400\"\n   \"hover:border-gray-500\"\n   \"dark:bg-gray-900\"\n   \"dark:hover:bg-slate-700\"\n   \"dark:border-slate-600\"\n   \"dark:hover:border-slate-500\"])\n\n(defn triangle [expanded?]\n  [:svg {:viewBox \"0 0 100 100\"\n         :class (str \"w-[7px] h-[7px] fill-current inline-block transition-all mr-[1px] -mt-[2px] \"\n                     (if expanded? \"rotate-180\" \"rotate-90\"))}\n   [:polygon {:points \"5.9,88.2 50,11.8 94.1,88.2 \"}]])\n\n(def triangle-spacer [:span {:class \"inline-block w-[8px]\"}])\n\n(defn expand-button [!expanded-at opening-paren path]\n  (let [expanded? (get @!expanded-at path)\n        {:keys [hover-path prompt-multi-expand?]} @!expanded-at\n        multi-expand? (and hover-path prompt-multi-expand? (= (count path) (count hover-path)))]\n    [:span.group.hover:bg-indigo-100.rounded-sm.hover:shadow.cursor-pointer\n     {:class (when multi-expand? \"bg-indigo-100 shadow \")\n      :on-click (partial toggle-expanded !expanded-at path)\n      :on-mouse-enter #(swap! !expanded-at assoc :hover-path path)\n      :on-mouse-leave #(swap! !expanded-at dissoc :hover-path)}\n     [:span.text-slate-400.group-hover:text-indigo-700\n      {:class (when multi-expand? \"text-indigo-700 \")}\n      [triangle expanded?]]\n     [:span.group-hover:text-indigo-700 opening-paren]]))\n\n(defn render-coll [xs {:as opts :keys [path viewer !expanded-at] :or {path []}}]\n  (let [expanded? (get @!expanded-at path)\n        {:keys [opening-paren closing-paren]} viewer]\n    [:span.inspected-value.whitespace-nowrap\n     {:class (when expanded? \"inline-flex\")}\n     [:span\n      (if (< 1 (count xs))\n        [expand-button !expanded-at opening-paren path]\n        [:span opening-paren])\n      (into [:<>]\n            (comp (inspect-children opts)\n                  (interpose (if expanded? [:<> [:br] triangle-spacer nbsp (when (= 2 (count opening-paren)) nbsp)] \" \")))\n            xs)\n      [:span\n       (cond->> closing-paren (list? closing-paren) (into [:<>]))]]]))\n\n(defn render-elision [{:as fetch-opts :keys [total offset unbounded?]} _]\n  [view-context/consume :fetch-fn\n   (fn [fetch-fn]\n     [:span.sans-serif.relative.whitespace-nowrap\n      {:style {:border-radius 2 :padding (when (fn? fetch-fn) \"1px 3px\") :font-size 11 :top -1}\n       :class (if (fn? fetch-fn)\n                \"cursor-pointer bg-indigo-200 hover:bg-indigo-300 dark:bg-gray-700 dark:hover:bg-slate-600 text-gray-900 dark:text-white\"\n                \"text-gray-400 dark:text-slate-300\")\n       :on-click #(when (fn? fetch-fn)\n                    (fetch-fn fetch-opts))} (- total offset) (when unbounded? \"+\") (if (fn? fetch-fn) \" more\u2026\" \" more elided\")])])\n\n(defn render-map [xs {:as opts :keys [path viewer !expanded-at] :or {path []}}]\n  (let [expanded? (get @!expanded-at path)\n        {:keys [closing-paren]} viewer]\n    [:span.inspected-value.whitespace-nowrap\n     {:class (when expanded? \"inline-flex\")}\n     [:span\n      (if (expandable? xs)\n        [expand-button !expanded-at \"{\" path]\n        [:span \"{\"])\n      (into [:<>]\n            (comp (inspect-children opts)\n                  (interpose (if expanded? [:<> [:br] triangle-spacer nbsp #_(repeat (inc (count path)) nbsp)] \" \")))\n            xs)\n      (cond->> closing-paren (list? closing-paren) (into [:<>]))]]))\n\n\n(defn render-string [s {:as opts :keys [path !expanded-at] :or {path []}}]\n  (let [expanded? (get @!expanded-at path)]\n    (into [:span.whitespace-pre]\n          (map #(if (string? %)\n                  (if expanded?\n                    (into [:<>] (interpose [:<> [:br]] (str/split-lines %)))\n                    (into [:<>] (interpose [:span.text-slate-400 \"\u21a9\ufe0e\"] (str/split-lines %))))\n                  (inspect-presented opts %)))\n          (if (string? s) [s] s))))\n\n(defn render-quoted-string [s {:as opts :keys [path viewer !expanded-at] :or {path []}}]\n  (let [{:keys [opening-paren closing-paren]} viewer]\n    [:span.inspected-value.inline-flex\n     [:span.cmt-string\n      (if (some #(and (string? %) (str/includes? % \"\\n\")) (if (string? s) [s] s))\n        [expand-button !expanded-at opening-paren path]\n        [:span opening-paren])]\n     [:div\n      [:span.cmt-string (viewer/->value (render-string s opts)) (first closing-paren)]\n      (when (list? closing-paren) (into [:<>] (rest closing-paren)))]]))\n\n(defn render-number [num]\n  [:span.cmt-number.inspected-value\n   (if (js/Number.isNaN num) \"NaN\" (str num))])\n\n(defn sort! [!sort i k]\n  (let [{:keys [sort-key sort-order]} @!sort]\n    (reset! !sort {:sort-index i\n                   :sort-key k\n                   :sort-order (if (= sort-key k) (if (= sort-order :asc) :desc :asc) :asc)})))\n\n(defn sort-data [{:keys [sort-index sort-order]} {:as data :keys [head rows]}]\n  (cond-> data\n    head (assoc :rows (->> rows\n                           (sort-by #(cond-> (get % sort-index)\n                                       (string? val) str/lower-case)\n                                    (if (= sort-order :asc) #(compare %1 %2) #(compare %2 %1)))\n                           vec))))\n\n(def x-icon\n  [:svg.h-4.w-4 {:xmlns \"http://www.w3.org/2000/svg\" :viewBox \"0 0 20 20\" :fill \"currentColor\"}\n   [:path {:fill-rule \"evenodd\" :d \"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" :clip-rule \"evenodd\"}]])\n\n(def check-icon\n  [:svg.h-4.w-4 {:xmlns \"http://www.w3.org/2000/svg\" :viewBox \"0 0 20 20\" :fill \"currentColor\"}\n   [:path {:fill-rule \"evenodd\" :d \"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" :clip-rule \"evenodd\"}]])\n\n(defn render-table-error [[data]]\n  ;; currently boxing the value in a vector to retain the type info\n  ;; TODO: find a better way to do this\n  [:div.bg-red-100.dark:bg-gray-800.px-6.py-4.rounded-md.text-xs.dark:border-2.dark:border-red-400.not-prose\n   [:h4.mt-0.uppercase.text-xs.dark:text-red-400.tracking-wide \"Table Error\"]\n   [:p.mt-4.font-medium \"Clerk\u2019s table viewer does not recognize the format of your data:\"]\n   [:div.mt-2.flex\n    [:div.text-red-500.mr-2 x-icon]\n    [inspect-presented data]]\n   [:p.mt-4.font-medium \"Currently, the following formats are supported:\"]\n   [:div.mt-2.flex.items-center\n    [:div.text-green-500.mr-2 check-icon]\n    [inspect {:column-1 [1 2]\n              :column-2 [3 4]}]]\n   [:div.mt-2.flex.items-center\n    [:div.text-green-500.mr-2 check-icon]\n    [inspect [{:column-1 1 :column-2 3} {:column-1 2 :column-2 4}]]]\n   [:div.mt-2.flex.items-center\n    [:div.text-green-500.mr-2 check-icon]\n    [inspect [[1 3] [2 4]]]]\n   [:div.mt-2.flex.items-center\n    [:div.text-green-500.mr-2 check-icon]\n    [inspect {:head [:column-1 :column-2]\n              :rows [[1 3] [2 4]]}]]])\n\n(defn render-table-with-sticky-header [& children]\n  (let [!table-ref (hooks/use-ref nil)\n        !table-clone-ref (hooks/use-ref nil)]\n    (hooks/use-layout-effect (fn []\n                               (when (and @!table-ref (.querySelector @!table-ref \"thead\") @!table-clone-ref)\n                                 (let [sticky (sticky-table-header/StickyTableHeader. @!table-ref @!table-clone-ref #js{:max 0})]\n                                   (fn [] (.destroy sticky))))))\n    [:div\n     [:div.overflow-x-auto.overflow-y-hidden.w-full\n      (into [:table.text-xs.sans-serif.text-gray-900.dark:text-white.not-prose {:ref !table-ref}] children)]\n     [:div.overflow-x-auto.overflow-y-hidden.w-full.shadow\n      [:table.text-xs.sans-serif.text-gray-900.dark:text-white.not-prose {:ref !table-clone-ref :style {:margin 0}}]]]))\n\n(defn throwable-view [{:keys [via trace]}]\n  [:div.bg-white.max-w-6xl.mx-auto.text-xs.monospace.not-prose\n   (into\n    [:div]\n    (map\n     (fn [{:as _ex :keys [type message data _trace]}]\n       [:div.p-4.bg-red-100.border-b.border-b-gray-300\n        (when type\n          [:div.font-bold \"Unhandled \" type])\n        [:div.font-bold.mt-1 message]\n        (when data\n          [:div.mt-1 [inspect data]])])\n     via))\n   [:div.py-6.overflow-x-auto\n    [:table.w-full\n     (into [:tbody]\n           (map (fn [[call _x file line]]\n                  [:tr.hover:bg-red-100.leading-tight\n                   [:td.text-right.px-6 file \":\"]\n                   [:td.text-right.pr-6 line]\n                   [:td.py-1.pr-6 call]]))\n           trace)]]])\n\n(defn render-throwable [ex]\n  (if (or (:stack ex) (instance? js/Error ex))\n    [error-view ex]\n    [throwable-view ex]))\n\n(defn render-tagged-value\n  ([tag value] (render-tagged-value {:space? true} tag value))\n  ([{:keys [space?]} tag value]\n   [:span.inspected-value.whitespace-nowrap\n    [:span.cmt-meta tag] (when space? nbsp) value]))\n\n(defonce !doc (ratom/atom nil))\n(defonce !error (ratom/atom nil))\n(defonce !viewers viewer/!viewers)\n\n(defn set-viewers! [scope viewers]\n  #_(js/console.log :set-viewers! {:scope scope :viewers viewers})\n  (swap! !viewers assoc scope (vec viewers))\n  'set-viewers!)\n\n(declare default-viewers)\n\n(defn valid-react-element? [x] (react/isValidElement x))\n\n(defn inspect-presented\n  ([x]\n   (r/with-let [!expanded-at (r/atom (:nextjournal/expanded-at x))]\n     [inspect-presented {:!expanded-at !expanded-at} x]))\n  ([opts x]\n   (if (valid-react-element? x)\n     x\n     (let [{:nextjournal/keys [value viewer]} x]\n       #_(prn :inspect-presented value :valid-element? (react/isValidElement value) :viewer viewer)\n       ;; each view function must be called in its own 'functional component' so that it gets its own hook state.\n       ^{:key (str (:hash viewer) \"@\" (peek (:path opts)))}\n       [(:render-fn viewer) value (merge opts (:nextjournal/opts x) {:viewer viewer})]))))\n\n(defn in-process-fetch [value opts]\n  (.resolve js/Promise (viewer/present value opts)))\n\n(defn inspect [value]\n  (r/with-let [!state (r/atom nil)]\n    (when (not= (:value @!state ::not-found) value)\n      (swap! !state assoc :value value :desc (viewer/present value)))\n    [view-context/provide {:fetch-fn (fn [fetch-opts]\n                                       (.then (in-process-fetch value fetch-opts)\n                                              (fn [more]\n                                                (swap! !state update :desc viewer/merge-presentations more fetch-opts))))}\n     [inspect-presented (:desc @!state)]]))\n\n(defn root []\n  [:<>\n   [inspect-presented @!doc]\n   (when @!error\n     [:div.fixed.top-0.left-0.w-full.h-full\n      [inspect-presented @!error]])])\n\n(declare mount)\n\n(defonce ^:private ^:dynamic *sync* true)\n\n(defn atom-changed [var-name _atom _old-state new-state]\n  (when *sync*\n    ;; TODO: for now sending whole state but could also diff\n    (js/ws_send (pr-str {:type :swap! :var-name var-name :args [(list 'fn ['_] (list 'quote new-state))]}))))\n\n(defn intern-atom! [var-name state]\n  (assert (sci.ctx-store/get-ctx) \"sci-ctx must be set\")\n  (sci/intern (sci.ctx-store/get-ctx)\n              (sci/create-ns (symbol (namespace var-name)))\n              (symbol (name var-name))\n              (doto (r/atom state)\n                (add-watch var-name atom-changed))))\n\n\n(defonce ^:private !synced-atom-vars\n  (atom #{}))\n\n(defn sci-ns-unmap! [ns-sym var-sym]\n  (let [ns-unmap (sci/eval-string* (sci.ctx-store/get-ctx) \"ns-unmap\")]\n    (ns-unmap ns-sym var-sym)))\n\n(defonce ^:dynamic *reset-sync-atoms?* true)\n(defn set-reset-sync-atoms! [new-val] (set! *reset-sync-atoms?* new-val))\n\n(defn intern-atoms! [atom-var-name->state]\n  (let [vars-in-use (into #{} (keys atom-var-name->state))\n        vars-interned @!synced-atom-vars]\n    (doseq [var-name-to-unmap (set/difference vars-interned vars-in-use)]\n      (sci-ns-unmap! (symbol (namespace var-name-to-unmap)) (symbol (name var-name-to-unmap))))\n    (doseq [[var-name value] atom-var-name->state]\n      (if-let [existing-var (sci/resolve (sci.ctx-store/get-ctx) var-name)]\n        (when *reset-sync-atoms?*\n          (binding [*sync* false]\n            (reset! @existing-var value)))\n        (intern-atom! var-name value)))\n    (reset! !synced-atom-vars vars-in-use)))\n\n(defn remount? [doc-or-patch]\n  (true? (some #(= % :nextjournal.clerk/remount) (tree-seq coll? seq doc-or-patch))))\n\n(defn re-eval-viewer-fns [doc]\n  (let [re-eval #(viewer/->viewer-fn (:form %))]\n    (w/postwalk #(cond-> % (viewer/viewer-fn? %) re-eval) doc)))\n\n(defn ^:export set-state! [{:as state :keys [doc error]}]\n  (when (contains? state :doc)\n    (reset! !doc doc))\n  (when (remount? doc)\n    (swap! !eval-counter inc))\n  (reset! !error error)\n  (when-let [title (and (exists? js/document) (-> doc viewer/->value :title))]\n    (set! (.-title js/document) title)))\n\n(defn apply-patch [x patch]\n  (editscript/patch x (editscript/edits->script patch)))\n\n(defn patch-state! [{:keys [patch]}]\n  (reset! !error nil)\n  (if (remount? patch)\n    (do (swap! !doc #(re-eval-viewer-fns (apply-patch % patch)))\n        ;; TODO: figure out why it doesn't work without `js/setTimeout`\n        (js/setTimeout #(swap! !eval-counter inc) 10))\n    (swap! !doc apply-patch patch)))\n\n(defonce !pending-clerk-eval-replies\n  (atom {}))\n\n(defn clerk-eval [form]\n  (let [eval-id (gensym)\n        promise (js/Promise. (fn [resolve reject]\n                               (swap! !pending-clerk-eval-replies assoc eval-id {:resolve resolve :reject reject})))]\n    (.ws_send ^js goog/global (pr-str {:type :eval :form form :eval-id eval-id}))\n    promise))\n\n(defn process-eval-reply! [{:keys [eval-id reply error]}]\n  (if-let [{:keys [resolve reject]} (get @!pending-clerk-eval-replies eval-id)]\n    (do (swap! !pending-clerk-eval-replies dissoc eval-id)\n        (cond reply (resolve reply)\n              error (reject error)))\n    (js/console.warn :process-eval-reply!/not-found :eval-id eval-id :keys (keys @!pending-clerk-eval-replies))))\n\n\n(defn ^:export dispatch [{:as msg :keys [type]}]\n  (let [dispatch-fn (get {:patch-state! patch-state!\n                          :set-state! set-state!\n                          :eval-reply process-eval-reply!}\n                         type\n                         (fn [_]\n                           (js/console.warn (str \"no on-message dispatch for type `\" type \"`\"))))]\n    #_(js/console.log :<= type := msg)\n    (dispatch-fn msg)))\n\n(defonce react-root\n  (when-let [el (and (exists? js/document) (js/document.getElementById \"clerk\"))]\n    (react-client/createRoot el)))\n\n(defn ^:export ^:dev/after-load mount []\n  (when react-root\n    (.render react-root (r/as-element [root]))))\n\n(defn render-katex [tex-string {:keys [inline?]}]\n  [:span {:dangerouslySetInnerHTML {:__html (katex/to-html-string tex-string (j/obj :displayMode (not inline?)))}}])\n\n(defn html-render [markup]\n  (r/as-element\n   (if (string? markup)\n     [:span {:dangerouslySetInnerHTML {:__html markup}}]\n     markup)))\n\n(def html-viewer\n  {:render-fn html-render})\n\n(def html\n  (partial viewer/with-viewer html-viewer))\n\n(defn render-reagent [x]\n  (r/as-element (cond-> x (fn? x) vector)))\n\n;; TODO: remove\n(def reagent-viewer render-reagent)\n\n(defn render-promise [p opts]\n  (let [!state (hooks/use-state {:pending true})]\n    (hooks/use-effect (fn []\n                        (-> p\n                            (.then #(reset! !state {:value %}))\n                            (.catch #(reset! !state {:error %})))))\n    (let [{:keys [pending value error]} @!state]\n      (if pending\n        default-loading-view\n        [inspect (or pending value error)]))))\n\n\n(defn with-d3-require [{:keys [package loading-view]\n                        :or {loading-view default-loading-view}} f]\n  (if-let [package (hooks/use-d3-require package)]\n    (f package)\n    loading-view))\n\n(defn render-vega-lite [value]\n  (let [handle-error (hooks/use-error-handler)\n        vega-embed (hooks/use-d3-require \"vega-embed@6.11.1\")\n        opts (get value :embed/opts {})\n        ref-fn (react/useCallback #(when %\n                                     (-> (.embed vega-embed\n                                                 %\n                                                 (clj->js (dissoc value :embed/opts :embed/callback))\n                                                 (clj->js opts))\n                                         (.then (fn [result] (if-let [callback (:embed/callback value)]\n                                                               (callback result)\n                                                               result)))\n                                         (.catch handle-error)))\n                                  #js[value vega-embed])]\n    (when value\n      (if vega-embed\n        [:div.overflow-x-auto\n         [:div.vega-lite {:ref ref-fn}]]\n        default-loading-view))))\n\n(defn render-plotly [value]\n  (let [plotly (hooks/use-d3-require \"plotly.js-dist@2.15.1\")\n        ref-fn (react/useCallback #(when %\n                                     (.newPlot plotly % (clj->js value)))\n                                  #js[value plotly])]\n    (when value\n      (if plotly\n        [:div.overflow-x-auto\n         [:div.plotly {:ref ref-fn}]]\n        default-loading-view))))\n\n(def render-mathjax mathjax/viewer)\n\n(def render-code code/render-code)\n\n(def expand-icon\n  [:svg {:xmlns \"http://www.w3.org/2000/svg\" :viewBox \"0 0 20 20\" :fill \"currentColor\" :width 12 :height 12}\n   [:path {:fill-rule \"evenodd\" :d \"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" :clip-rule \"evenodd\"}]])\n\n(defn render-folded-code [code-string]\n  (let [!hidden? (hooks/use-state true)]\n    (if @!hidden?\n      [:div.relative.pl-12.font-sans.text-slate-400.cursor-pointer.flex.overflow-y-hidden.group\n       [:span.hover:text-slate-500\n        {:class \"text-[10px]\"\n         :on-click #(swap! !hidden? not)}\n        \"show code\"]\n       #_#_#_[:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.hover:text-slate-500\n              {:class \"text-[10px]\"}\n              \"hide result\"]\n       [:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.delay-75.hover:text-slate-500\n        {:class \"text-[10px]\"}\n        \"cached in memory\"]\n       [:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.delay-150.hover:text-slate-500\n        {:class \"text-[10px]\"}\n        \"evaluated in 0.2s\"]]\n      [:<>\n       [:div.relative.pl-12.font-sans.text-slate-400.cursor-pointer.flex.overflow-y-hidden.group.mb-1\n        [:span.hover:text-slate-500\n         {:class \"text-[10px]\"\n          :on-click #(swap! !hidden? not)}\n         \"hide code\"]\n        #_#_#_[:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.hover:text-slate-500\n               {:class \"text-[10px]\"}\n               \"hide result\"]\n        [:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.delay-75.hover:text-slate-500\n         {:class \"text-[10px]\"}\n         \"cached in memory\"]\n        [:span.ml-4.opacity-0.translate-y-full.group-hover:opacity-100.group-hover:translate-y-0.transition-all.delay-150.hover:text-slate-500\n         {:class \"text-[10px]\"}\n         \"evaluated in 0.2s\"]]\n       [:div.viewer-code.mb-2.relative {:style {:margin-top 0}}\n        [render-code code-string]]])))\n\n\n(defn url-for [{:as src :keys [blob-id]}]\n  (if (string? src)\n    src\n    (str \"/_blob/\" blob-id (when-let [opts (seq (dissoc src :blob-id))]\n                             (str \"?\" (opts->query opts))))))\n\n(def consume-view-context view-context/consume)\n"]}