{"version":3,"sources":["nextjournal/markdown/parser.cljc"],"mappings":"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","names":["nextjournal.markdown.parser/get-in*","applied-science.js-interop/get-in","nextjournal.markdown.parser/update*","applied-science.js-interop/update!","nextjournal.markdown.parser/re-idx-seq","re","text","rex","js/RegExp","cljs.core.take_while","cljs.core/some?","cljs.core.repeatedly","temp__5808__auto__","m","cljs.core/vec","nextjournal.markdown.parser/inc-last","path","cljs.core.update","cljs.core/count","cljs.core/inc","p__54455","map__54456","cljs.core/--destructure-map","cljs.core.get","nextjournal.markdown.parser/hlevel","_token","hn","G__54457","cljs.core/re-matches","cljs.core/second","js/parseInt","nextjournal.markdown.parser/split-by-emoji","s","vec__54458","cljs.core.nth","match","start","end","cljs.core/first","nextjournal.markdown.parser.emoji/regex","cljs.core.subs","clojure.string/trim","nextjournal.markdown.parser/text->id+emoji","vec__54461","emoji","text'","G__54465","cljs.core.apply","cljs.core/str","cljs.core.map","cljs.core.comp","clojure.string/lower-case","c","G__54467","cljs.core.assoc","nextjournal.markdown.parser/parse-fence-info","info-str","e54472","tokens","clojure.string/replace","clojure.string.split","cljs.core.reduce","p__54473","map__54478","info-map","language","token","vec__54479","_","k","v","clojure.string/starts-with?","and__5043__auto__","cljs.core.keyword","cljs.core/not","nextjournal.markdown.parser/text-node","nextjournal.markdown.parser/tag-node","nextjournal.markdown.parser/formula","nextjournal.markdown.parser/block-formula","nextjournal.markdown.parser/sidenote-ref","ref","nextjournal.markdown.parser/node","type","content","attrs","top-level","G__54498","cljs.core/seq","cljs.core.merge","p__54501","map__54502","nextjournal.markdown.parser/empty-text-node?","t","cljs.core._EQ_","cljs.core/empty?","p__54503","map__54504","nextjournal.markdown.parser/push-node","doc","node","e54505","G__54506","cljs.core.update_in","cljs.core/pop","cljs.core/conj","js/Error","e","cljs.core.ex_info","nextjournal.markdown.parser/push-nodes","cljs.core.partial","cljs.core/reduce","var_args","G__54508","nextjournal.markdown.parser/open-node","nextjournal.markdown.parser.open_node","cljs.core/into","nextjournal.markdown.parser/ppop","nextjournal.markdown.parser/close-node","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","nextjournal.markdown.parser/update-current","p__54519","map__54520","seq54515","G__54516","cljs.core/next","G__54517","self__5754__auto__","fn","args","cljs.core/update-in","p__54523","map__54524","nextjournal.markdown.parser/assign-node-id+emoji","id->index","text->id+emoji-fn","map__54525","id","cljs.core/ifn?","G__54526","cljs.core.get_in","id-count","G__54527","cljs.core.fnil","or__5045__auto__","G__54530","cljs.core/assoc-in","G__54531","p__54534","map__54535","nextjournal.markdown.parser/into-toc","toc","toc-item","heading-level","l","toc-path","type-path","cljs.core.conj","x__5130__auto__","y__5131__auto__","p__54543","map__54544","nextjournal.markdown.parser/add-to-toc","h","G__54546","cljs.core/pos-int?","p__54547","map__54548","nextjournal.markdown.parser/set-title-when-missing","title","heading","G__54549","nextjournal.markdown.transform/->text","p__54557","map__54560","nextjournal.markdown.parser/add-title+toc","rf","xf","cljs.core.filter","js/nextjournal","js/nextjournal.markdown","js/nextjournal.markdown.parser","js/nextjournal.markdown.parser.apply-token","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","fexpr__54574","cljs.core/MultiFn","cljs.core.symbol","nextjournal.markdown.parser/apply-token","_doc","cljs.core.prn","p__54577","map__54578","doc-level","map__54579","doc'","G__54580","p__54581","map__54582","hidden","p__54583","map__54584","map__54585","has-todos","p__54588","map__54589","p__54592","map__54593","map__54594","todo","p__54595","map__54596","nextjournal.markdown.parser.update_current","cljs.core/dissoc","p__54604","map__54605","p__54607","map__54608","i","G__54614","G__54615","G__54621","G__54622","G__54628","G__54629","nextjournal.markdown.parser/text-tokenizers","p__54653","map__54654","nextjournal.markdown.parser/normalize-tokenizer","tokenizer","doc-handler","handler","regex","tokenizer-fn","G__54658","p__54660","map__54661","p__54676","p__54677","map__54678","map__54679","nextjournal.markdown.parser/tokenize-text-node","tkz","cljs.core/fn?","idx-seq","map__54682","text-hnode","nodes","remaining-text","p__54683","p__54684","map__54685","vec__54686","acc","cljs.core/subs","G__54691","cljs.core/reverse","G__54695","p__54707","p__54708","map__54709","map__54710","text-tokenizers","p__54715","map__54716","G__54718","G__54719","cljs.core.dissoc","cljs.core.mapcat","p__54720","map__54721","p__54723","map__54724","ts","nextjournal.markdown.parser/apply-tokens","p__54728","map__54729","p__54736","map__54737","p__54744","map__54745","children","G__54746","G__54747","p__54753","map__54754","nextjournal.markdown.parser/pairs->kmap","pairs","cljs.core.into","cljs.core.juxt","cljs.core/keyword","mapify-attrs-xf","x","nextjournal.markdown.parser/empty-doc","G__54757","nextjournal.markdown.parser/parse","nextjournal.markdown.parser.parse","cljs.core/map","p__54769","p__54770","map__54771","vec__54772","nextjournal.markdown.parser/section-at","pos","map__54776","section-level","in-section?","p__54777","map__54778","cljs.core/cons","cljs.core.drop"],"sourcesContent":[";; # \ud83e\udde9 Parsing\n;;\n;; Deals with transforming a sequence of tokens obtained by [markdown-it] into a nested AST composed of nested _nodes_.\n;;\n;; A _node_ is a clojure map and has no closed specification at the moment. We do follow a few conventions for its keys:\n;;\n;; - `:type` a keyword (:heading, :paragraph, :text, :code etc.) present on all nodes.\n;;\n;; When a node contains other child nodes, then it will have a\n;;\n;; - `:content` a collection of nodes representing nested content\n;;\n;; when a node is a textual leaf (as in a `:text` or `:formula` nodes) it carries a\n;; - `:text` key with a string value\n;;\n;; Other keys might include e.g.\n;;\n;; - `:info` specific of fenced code blocks\n;; - `:heading-level` specific of `:heading` nodes\n;; - `:attrs` attributes as passed by markdown-it tokens (e.g `{:style \"some style info\"}`)\n(ns nextjournal.markdown.parser\n  (:require [clojure.string :as str]\n            [nextjournal.markdown.transform :as md.transform]\n            [nextjournal.markdown.parser.emoji :as emoji]\n            #?@(:cljs [[applied-science.js-interop :as j]\n                       [cljs.reader :as reader]])))\n\n;; clj common accessors\n(def get-in* #?(:clj get-in :cljs j/get-in))\n(def update* #?(:clj update :cljs j/update!))\n\n#?(:clj (defn re-groups* [m] (let [g (re-groups m)] (cond-> g (not (vector? g)) vector))))\n(defn re-idx-seq\n  \"Takes a regex and a string, returns a seq of triplets comprised of match groups followed by indices delimiting each match.\"\n  [re text]\n  #?(:clj (let [m (re-matcher re text)]\n            (take-while some? (repeatedly #(when (.find m) [(re-groups* m) (.start m) (.end m)]))))\n     :cljs (let [rex (js/RegExp. (.-source re) \"g\")]\n             (take-while some? (repeatedly #(when-some [m (.exec rex text)] [(vec m) (.-index m) (.-lastIndex rex)]))))))\n\n\n(comment (re-idx-seq #\"\\{\\{([^{]+)\\}\\}\" \"foo {{hello}} bar\"))\n(comment (re-idx-seq #\"\\{\\{[^{]+\\}\\}\" \"foo {{hello}} bar\"))\n;; region node operations\n;; helpers\n(defn inc-last [path] (update path (dec (count path)) inc))\n(defn hlevel [{:as _token hn :tag}] (when (string? hn) (some-> (re-matches #\"h([\\d])\" hn) second #?(:clj Integer/parseInt :cljs js/parseInt))))\n\n(defn split-by-emoji [s]\n  (let [[match start end] (first (re-idx-seq emoji/regex s))]\n    (if match\n      [(subs s start end) (str/trim (subs s end))]\n      [nil s])))\n\n#_(split-by-emoji \" Stop\")\n#_(split-by-emoji \"\ud83e\udd1a\ud83c\udffd Stop\")\n#_(split-by-emoji \"\ud83e\udd1a\ud83c\udffd\ud83e\udd1a Stop\")\n#_(split-by-emoji \"\ud83e\udd1a\ud83c\udffdStop\")\n#_(split-by-emoji \"\ud83e\udd1a\ud83c\udffd   Stop\")\n#_(split-by-emoji \"\ud83d\ude00 Stop\")\n#_(split-by-emoji \"\u269b\ufe0f Stop\")\n#_(split-by-emoji \"\u269b Stop\")\n#_(split-by-emoji \"\u2b07 Stop\")\n#_(split-by-emoji \"Should not \ud83d\ude41\ufe0f Split\")\n\n(defn text->id+emoji [text]\n  (when (string? text)\n    (let [[emoji text'] (split-by-emoji (str/trim text))]\n      (cond-> {:id (apply str (map (comp str/lower-case (fn [c] (case c (\\space \\_) \\- c))) text'))}\n        emoji (assoc :emoji emoji)))))\n\n#_(text->id+emoji \"Hello There\")\n#_(text->id+emoji \"Hello_There\")\n#_(text->id+emoji \"\ud83d\udc69\u200d\ud83d\udd2c Quantum Physics\")\n\n;; `parse-fence-info` ingests nextjournal, GFM, Pandoc and RMarkdown fenced code block info (any text following the leading 3 backticks) and returns a map\n;;\n;; _nextjournal_ / _GFM_\n;;\n;;    ```python id=2e3541da-0735-4b7f-a12f-4fb1bfcb6138\n;;    python code\n;;    ```\n;;\n;; _Pandoc_\n;;\n;;    ```{#pandoc-id .languge .extra-class key=Val}\n;;    code in language\n;;    ```\n;;\n;; _Rmd_\n;;\n;;    ```{r cars, echo=FALSE}\n;;    R code\n;;    ```\n;;\n;; See also:\n;; - https://github.github.com/gfm/#info-string\n;; - https://pandoc.org/MANUAL.html#fenced-code-blocks\n;; - https://rstudio.com/wp-content/uploads/2016/03/rmarkdown-cheatsheet-2.0.pdf\"\n\n(defn parse-fence-info [info-str]\n  (try\n    (when (string? info-str)\n      (let [tokens (-> info-str\n                       str/trim\n                       (str/replace #\"[\\{\\}\\,]\" \"\")         ;; remove Pandoc/Rmarkdown brackets and commas\n                       (str/replace \".\" \"\")                 ;; remove dots\n                       (str/split #\" \"))]                   ;; split by spaces\n        (reduce\n         (fn [{:as info-map :keys [language]} token]\n           (let [[_ k v] (re-matches #\"^([^=]+)=([^=]+)$\" token)]\n             (cond\n               (str/starts-with? token \"#\") (assoc info-map :id (str/replace token #\"^#\" \"\")) ;; pandoc #id\n               (and k v) (assoc info-map (keyword k) v)\n               (not language) (assoc info-map :language token) ;; language is the first simple token which is not a pandoc's id\n               :else (assoc info-map (keyword token) true))))\n         {}\n         tokens)))\n    (catch #?(:clj Throwable :cljs :default) _ {})))\n\n(comment\n  (parse-fence-info \"python runtime-id=5f77e475-6178-47a3-8437-45c9c34d57ff\")\n  (parse-fence-info \"{#some-id .lang foo=nex}\")\n  (parse-fence-info \"#id clojure\")\n  (parse-fence-info \"clojure #id\")\n  (parse-fence-info \"clojure\")\n  (parse-fence-info \"{r cars, echo=FALSE}\"))\n\n;; leaf nodes\n(defn text-node [text] {:type :text :text text})\n(defn tag-node [text] {:type :hashtag :text text})\n(defn formula [text] {:type :formula :text text})\n(defn block-formula [text] {:type :block-formula :text text})\n(defn sidenote-ref [ref] {:type :sidenote-ref :content [(text-node (str (inc ref)))]})\n\n;; node constructors\n(defn node\n  [type content attrs top-level]\n  (cond-> {:type type :content content}\n    (seq attrs) (assoc :attrs attrs)\n    (seq top-level) (merge top-level)))\n\n(defn empty-text-node? [{text :text t :type}] (and (= :text t) (empty? text)))\n\n(defn push-node [{:as doc ::keys [path]} node]\n  (try\n    (cond-> doc\n      ;; \u2b07 mdit produces empty text tokens at mark boundaries, see edge cases below\n      (not (empty-text-node? node))\n      (-> #_doc\n       (update ::path inc-last)\n       (update-in (pop path) conj node)))\n    (catch #?(:clj Exception :cljs js/Error) e\n      (throw (ex-info (str \"nextjournal.markdown cannot add node: \" node \" at path: \" path)\n                      {:doc doc :node node} e)))))\n\n(def push-nodes (partial reduce push-node))\n\n(defn open-node\n  ([doc type] (open-node doc type {}))\n  ([doc type attrs] (open-node doc type attrs {}))\n  ([doc type attrs top-level]\n   (-> doc\n       (push-node (node type [] attrs top-level))\n       (update ::path into [:content -1]))))\n;; after closing a node, document ::path will point at it\n(def ppop (comp pop pop))\n(defn close-node [doc] (update doc ::path ppop))\n(defn update-current [{:as doc path ::path} fn & args] (apply update-in doc path fn args))\n\n(defn assign-node-id+emoji [{:as doc ::keys [id->index path] :keys [text->id+emoji-fn]}]\n  (let [{:keys [id emoji]} (when (ifn? text->id+emoji-fn) (-> doc (get-in path) text->id+emoji-fn))\n        id-count (when id (get id->index id))]\n    (cond-> doc\n      id\n      (update-in [::id->index id] (fnil inc 0))\n      (or id emoji)\n      (update-in path (fn [node]\n                        (cond-> node\n                          id (assoc-in [:attrs :id] (cond-> id id-count (str \"-\" (inc id-count))))\n                          emoji (assoc :emoji emoji)))))))\n\n(comment                                                    ;; path after call\n  (-> empty-doc                                             ;; [:content -1]\n      (open-node :heading)                                  ;; [:content 0 :content -1]\n      (push-node {:node/type :text :text \"foo\"})            ;; [:content 0 :content 0]\n      (push-node {:node/type :text :text \"foo\"})            ;; [:content 0 :content 1]\n      close-node                                            ;; [:content 1]\n\n      (open-node :paragraph)                                ;; [:content 1 :content]\n      (push-node {:node/type :text :text \"hello\"})\n      close-node\n      (open-node :bullet-list)\n      ;;\n      ))\n;; endregion\n\n;; region TOC builder:\n;; toc nodes are heading nodes but with `:type` `:toc` and an extra branching along\n;; the key `:children` representing the sub-sections of the node\n(defn into-toc [toc {:as toc-item :keys [heading-level]}]\n  (loop [toc toc l heading-level toc-path [:children]]\n    ;; `toc-path` is `[:children i\u2081 :children i\u2082 ... :children]`\n    (let [type-path (assoc toc-path (dec (count toc-path)) :type)]\n      (cond\n        ;; insert intermediate default empty :content collections for the final update-in (which defaults to maps otherwise)\n        (not (get-in toc toc-path))\n        (recur (assoc-in toc toc-path []) l toc-path)\n\n        ;; fill in toc types for non-contiguous jumps like h1 -> h3\n        (not (get-in toc type-path))\n        (recur (assoc-in toc type-path :toc) l toc-path)\n\n        (= 1 l)\n        (update-in toc toc-path (fnil conj []) toc-item)\n\n        :else\n        (recur toc\n               (dec l)\n               (conj toc-path\n                     (max 0 (dec (count (get-in toc toc-path)))) ;; select last child at level if it exists\n                     :children))))))\n\n(defn add-to-toc [doc {:as h :keys [heading-level]}]\n  (cond-> doc (pos-int? heading-level) (update :toc into-toc (assoc h :type :toc))))\n\n(defn set-title-when-missing [{:as doc :keys [title]} heading]\n  (cond-> doc (nil? title) (assoc :title (md.transform/->text heading))))\n\n(defn add-title+toc\n  \"Computes and adds a :title and a :toc to the document-like structure `doc` which might have not been constructed by means of `parse`.\"\n  [{:as doc :keys [content]}]\n  (let [rf (fn [doc heading] (-> doc (add-to-toc heading) (set-title-when-missing heading)))\n        xf (filter (comp #{:heading} :type))]\n    (reduce (xf rf) (assoc doc :toc {:type :toc}) content)))\n\n(comment\n (-> {:type :toc}\n     ;;(into-toc {:heading-level 3 :title \"Foo\"})\n     ;;(into-toc {:heading-level 2 :title \"Section 1\"})\n     (into-toc {:heading-level 1 :title \"Title\" :type :toc})\n     (into-toc {:heading-level 4 :title \"Section 2\" :type :toc})\n     ;;(into-toc {:heading-level 4 :title \"Section 2.1\"})\n     ;;(into-toc {:heading-level 2 :title \"Section 3\"})\n     )\n\n (-> \"# Top _Title_\n\npar\n\n### Three\n\n## Two\n\npar\n- and a nested\n- ### Heading not included\n\nfoo\n\n## Two Again\n\npar\n\n# One Again\n\n[[TOC]]\n\n#### Four\n\nend\"\n     nextjournal.markdown/parse\n     :toc\n     ))\n;; endregion\n\n;; region token handlers\n(declare apply-tokens)\n(defmulti apply-token (fn [_doc token] (:type token)))\n(defmethod apply-token :default [doc token]\n  (prn :apply-token/unknown-type {:token token})\n  doc)\n\n;; blocks\n(defmethod apply-token \"heading_open\" [doc token] (open-node doc :heading {} {:heading-level (hlevel token)}))\n(defmethod apply-token \"heading_close\" [doc {doc-level :level}]\n  (let [{:as doc ::keys [path]} (close-node doc)\n        doc' (assign-node-id+emoji doc)\n        heading (-> doc' (get-in path) (assoc :path path))]\n    (cond-> doc'\n      (zero? doc-level)\n      (-> (add-to-toc heading)\n          (set-title-when-missing heading)))))\n\n;; for building the TOC we just care about headings at document top level (not e.g. nested under lists) \u2b06\n\n(defmethod apply-token \"paragraph_open\" [doc {:as _token :keys [hidden]}] (open-node doc (if hidden :plain :paragraph)))\n(defmethod apply-token \"paragraph_close\" [doc _token] (close-node doc))\n\n(defmethod apply-token \"bullet_list_open\" [doc {{:as attrs :keys [has-todos]} :attrs}] (open-node doc (if has-todos :todo-list :bullet-list) attrs))\n(defmethod apply-token \"bullet_list_close\" [doc _token] (close-node doc))\n\n(defmethod apply-token \"ordered_list_open\" [doc {:keys [attrs]}] (open-node doc :numbered-list attrs))\n(defmethod apply-token \"ordered_list_close\" [doc _token] (close-node doc))\n\n(defmethod apply-token \"list_item_open\" [doc {{:as attrs :keys [todo]} :attrs}] (open-node doc (if todo :todo-item :list-item) attrs))\n(defmethod apply-token \"list_item_close\" [doc _token] (close-node doc))\n\n(defmethod apply-token \"math_block\" [doc {text :content}] (push-node doc (block-formula text)))\n(defmethod apply-token \"math_block_end\" [doc _token] doc)\n\n(defmethod apply-token \"hr\" [doc _token] (push-node doc {:type :ruler}))\n\n(defmethod apply-token \"blockquote_open\" [doc _token] (open-node doc :blockquote))\n(defmethod apply-token \"blockquote_close\" [doc _token] (close-node doc))\n\n(defmethod apply-token \"tocOpen\" [doc _token] (open-node doc :toc))\n(defmethod apply-token \"tocBody\" [doc _token] doc) ;; ignore body\n(defmethod apply-token \"tocClose\" [doc _token] (-> doc close-node (update-current dissoc :content)))\n\n(defmethod apply-token \"code_block\" [doc {:as _token c :content}]\n  (-> doc\n      (open-node :code)\n      (push-node (text-node c))\n      close-node))\n(defmethod apply-token \"fence\" [doc {:as _token i :info c :content}]\n  (-> doc\n      (open-node :code {} (assoc (parse-fence-info i) :info i))\n      (push-node (text-node c))\n      close-node))\n\n;; footnotes\n(defmethod apply-token \"sidenote_ref\" [doc token] (push-node doc (sidenote-ref (get-in* token [:meta :id]))))\n(defmethod apply-token \"sidenote_anchor\" [doc token] doc)\n(defmethod apply-token \"sidenote_open\" [doc token] (-> doc (assoc :sidenotes? true) (open-node :sidenote {:ref (get-in* token [:meta :id])})))\n(defmethod apply-token \"sidenote_close\" [doc token] (close-node doc))\n(defmethod apply-token \"sidenote_block_open\" [doc token] (-> doc (assoc :sidenotes? true) (open-node :sidenote {:ref (get-in* token [:meta :id])})))\n(defmethod apply-token \"sidenote_block_close\" [doc token] (close-node doc))\n\n;; tables\n;; table data tokens might have {:style \"text-align:right|left\"} attrs, maybe better nested node > :attrs > :style ?\n(defmethod apply-token \"table_open\" [doc _token] (open-node doc :table))\n(defmethod apply-token \"table_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"thead_open\" [doc _token] (open-node doc :table-head))\n(defmethod apply-token \"thead_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"tr_open\" [doc _token] (open-node doc :table-row))\n(defmethod apply-token \"tr_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"th_open\" [doc token] (open-node doc :table-header (:attrs token)))\n(defmethod apply-token \"th_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"tbody_open\" [doc _token] (open-node doc :table-body))\n(defmethod apply-token \"tbody_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"td_open\" [doc token] (open-node doc :table-data (:attrs token)))\n(defmethod apply-token \"td_close\" [doc _token] (close-node doc))\n\n(comment\n  (->\n\"\n| Syntax |  JVM                     | JavaScript                      |\n|--------|:------------------------:|--------------------------------:|\n|   foo  |  Loca _lDate_ ahoiii     | goog.date.Date                  |\n|   bar  |  java.time.LocalTime     | some [kinky](link/to/something) |\n|   bag  |  java.time.LocalDateTime | $\\\\phi$                         |\n\"\n    nextjournal.markdown/parse\n    nextjournal.markdown.transform/->hiccup\n    ))\n\n;; ## Handling of Text Tokens\n;;\n;;    normalize-tokenizer :: {:regex, :doc-handler} | {:tokenizer-fn, :handler} -> Tokenizer\n;;    Tokenizer :: {:tokenizer-fn :: TokenizerFn, :doc-handler :: DocHandler}\n;;\n;;    Match :: Any\n;;    Handler :: Match -> Node\n;;    IndexedMatch :: (Match, Int, Int)\n;;    TokenizerFn :: String -> [IndexedMatch]\n;;    DocHandler :: Doc -> {:match :: Match} -> Doc\n\n(def text-tokenizers\n  [{:regex #\"(^|\\B)#[\\w-]+\"\n    :handler (fn [match] {:type :hashtag :text (subs (match 0) 1)})}\n   {:regex #\"\\[\\[([^\\]]+)\\]\\]\"\n    :handler (fn [match] {:type :internal-link :text (match 1)})}])\n\n(defn normalize-tokenizer\n  \"Normalizes a map of regex and handler into a Tokenizer\"\n  [{:as tokenizer :keys [doc-handler handler regex tokenizer-fn]}]\n  (assert (and (or doc-handler handler) (or regex tokenizer-fn)))\n  (cond-> tokenizer\n    (not doc-handler) (assoc :doc-handler (fn [doc {:keys [match]}] (push-node doc (handler match))))\n    (not tokenizer-fn) (assoc :tokenizer-fn (partial re-idx-seq regex))))\n\n(defn tokenize-text-node [{:as tkz :keys [tokenizer-fn doc-handler]} {:as node :keys [text]}]\n  ;; TokenizerFn -> HNode -> [HNode]\n  (assert (and (fn? tokenizer-fn) (fn? doc-handler) (string? text))\n          {:text text :tokenizer tkz})\n  (let [idx-seq (tokenizer-fn text)]\n    (if (seq idx-seq)\n      (let [text-hnode (fn [s] (assoc (text-node s) :doc-handler push-node))\n            {:keys [nodes remaining-text]}\n            (reduce (fn [{:as acc :keys [remaining-text]} [match start end]]\n                      (-> acc\n                          (update :remaining-text subs 0 start)\n                          (cond->\n                            (< end (count remaining-text))\n                            (update :nodes conj (text-hnode (subs remaining-text end))))\n                          (update :nodes conj {:doc-handler doc-handler\n                                               :match match :text text\n                                               :start start :end end})))\n                    {:remaining-text text :nodes ()}\n                    (reverse idx-seq))]\n        (cond-> nodes\n          (seq remaining-text)\n          (conj (text-hnode remaining-text))))\n      [node])))\n\n(defmethod apply-token \"text\" [{:as doc :keys [text-tokenizers]} {:keys [content]}]\n  (reduce (fn [doc {:as node :keys [doc-handler]}] (doc-handler doc (dissoc node :doc-handler)))\n          doc\n          (reduce (fn [nodes tokenizer]\n                    (mapcat (fn [{:as node :keys [type]}]\n                              (if (= :text type) (tokenize-text-node tokenizer node) [node]))\n                            nodes))\n                  [{:type :text :text content :doc-handler push-node}]\n                  text-tokenizers)))\n\n(comment\n  (def mustache (normalize-tokenizer {:regex #\"\\{\\{([^\\{]+)\\}\\}\" :handler (fn [m] {:type :eval :text (m 1)})}))\n  (tokenize-text-node mustache {:text \"{{what}} the {{hellow}}\"})\n  (apply-token (assoc empty-doc :text-tokenizers [mustache])\n               {:type \"text\" :content \"foo [[bar]] dang #hashy taggy [[what]] #dangy foo [[great]] and {{eval}} me\"})\n\n  (nextjournal.markdown/parse \"foo [[bar]] dang #hashy taggy [[what]] #dangy foo [[great]]\" )\n\n  (parse (assoc empty-doc\n                :text-tokenizers\n                [(normalize-tokenizer {:regex #\"\\{\\{([^\\{]+)\\}\\}\"\n                                       :doc-handler (fn [doc {[_ meta] :match}]\n                                                      (update-in doc (pop (pop (::path ddoc))) assoc :meta meta))})])\n         (nextjournal.markdown/tokenize \"# Title {{id=heading}}\n* one\n* two\")))\n\n;; inlines\n(defmethod apply-token \"inline\" [doc {:as _token ts :children}] (apply-tokens doc ts))\n(defmethod apply-token \"math_inline\" [doc {text :content}] (push-node doc (formula text)))\n(defmethod apply-token \"math_inline_double\" [doc {text :content}] (push-node doc (formula text)))\n(defmethod apply-token \"softbreak\" [doc _token] (push-node doc {:type :softbreak}))\n\n;; images\n(defmethod apply-token \"image\" [doc {:keys [attrs children]}] (-> doc (open-node :image attrs) (apply-tokens children) close-node))\n\n;; marks\n(defmethod apply-token \"em_open\" [doc _token] (open-node doc :em))\n(defmethod apply-token \"em_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"strong_open\" [doc _token] (open-node doc :strong))\n(defmethod apply-token \"strong_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"s_open\" [doc _token] (open-node doc :strikethrough))\n(defmethod apply-token \"s_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"link_open\" [doc token] (open-node doc :link (:attrs token)))\n(defmethod apply-token \"link_close\" [doc _token] (close-node doc))\n(defmethod apply-token \"code_inline\" [doc {text :content}] (-> doc (open-node :monospace) (push-node (text-node text)) close-node))\n\n;; html (ignored)\n(defmethod apply-token \"html_inline\" [doc _] doc)\n(defmethod apply-token \"html_block\" [doc _] doc)\n;; endregion\n\n;; region data builder api\n(defn pairs->kmap [pairs] (into {} (map (juxt (comp keyword first) second)) pairs))\n(defn apply-tokens [doc tokens]\n  (let [mapify-attrs-xf (map (fn [x] (update* x :attrs pairs->kmap)))]\n    (reduce (mapify-attrs-xf apply-token) doc tokens)))\n\n(def empty-doc {:type :doc\n                :content []\n                ;; Id -> Nat, to disambiguate ids for nodes with the same textual content\n                ::id->index {}\n                ;; Node -> {id : String, emoji String}, dissoc from context to opt-out of ids\n                :text->id+emoji-fn (comp text->id+emoji md.transform/->text)\n                :toc {:type :toc}\n                ::path [:content -1] ;; private\n                :text-tokenizers text-tokenizers})\n\n(defn parse\n  \"Takes a doc and a collection of markdown-it tokens, applies tokens to doc. Uses an emtpy doc in arity 1.\"\n  ([tokens] (parse empty-doc tokens))\n  ([doc tokens] (-> doc\n                    (update :text-tokenizers (partial map normalize-tokenizer))\n                    (apply-tokens tokens)\n                    (dissoc ::path :text-tokenizers))))\n\n(comment\n\n (-> \"# \ud83c\udfb1 Markdown Data\n\nsome _emphatic_ **strong** [link](https://foo.com)\n\n---\n\n> some ~~nice~~ quote\n> for fun\n\n## Formulas\n\n[[TOC]]\n\n$$\\\\Pi^2$$\n\n- [ ]  and\n- [x]  some $\\\\Phi_{\\\\alpha}$ latext\n- [ ]  bullets\n\n## Sidenotes\n\nhere [^mynote] to somewhere\n\n## Fences\n\n```py id=\\\"aaa-bbb-ccc\\\"\n1\nprint(\\\"this is some python\\\")\n2\n3\n```\n\n![Image Text](https://img.icons8.com/officel/16/000000/public.png)\n\nHline Section\n-------------\n\n### but also [[indented code]]\n\n    import os\n    os.listdir('/')\n\nor monospace mark [`real`](/foo/bar) fun.\n\n[^mynote]: Here you _can_ `explain` at lenght\n\"\n     nextjournal.markdown/tokenize\n     parse\n     ;;seq\n     ;;(->> (take 10))\n     ;;(->> (take-last 4))\n     ))\n;; endregion\n\n;; region zoom-in at section\n(defn section-at [{:as doc :keys [content]} [_ pos :as path]]\n  ;; TODO: generalize over path (zoom-in at)\n  ;; supports only top-level headings atm (as found in TOC)\n  (let [{:as h section-level :heading-level} (get-in doc path)\n        in-section? (fn [{l :heading-level}] (or (not l) (< section-level l)))]\n    (when section-level\n      {:type :doc\n       :content (cons h\n                      (->> content\n                           (drop (inc pos))\n                           (take-while in-section?)))})))\n\n(comment\n (some-> \"# Title\n\n## Section 1\n\nfoo\n\n- # What is this? (no!)\n- maybe\n\n### Section 1.2\n\n## Section 2\n\nsome par\n\n### Section 2.1\n\nsome other par\n\n### Section 2.2\n\n#### Section 2.2.1\n\ntwo two one\n\n#### Section 2.2.2\n\ntwo two two\n\n## Section 3\n\nsome final par\"\n    nextjournal.markdown/parse\n    (section-at [:content 9])                         ;; \u2b05 paths are stored in TOC sections\n    nextjournal.markdown.transform/->hiccup))\n;; endregion\n"]}