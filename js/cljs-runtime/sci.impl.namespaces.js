goog.provide('sci.impl.namespaces');
sci.impl.namespaces.clojure_core_ns = sci.impl.utils.clojure_core_ns;
sci.impl.namespaces.inlined_vars = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 90, [new cljs.core.Symbol(null,"+'","+'",1839585344,null),"null",new cljs.core.Symbol(null,"unchecked-remainder-int","unchecked-remainder-int",1427188224,null),"null",new cljs.core.Symbol(null,"unchecked-subtract-int","unchecked-subtract-int",-1899147615,null),"null",new cljs.core.Symbol(null,"dec'","dec'",1382902561,null),"null",new cljs.core.Symbol(null,"short-array","short-array",-395185918,null),"null",new cljs.core.Symbol(null,"bit-shift-right","bit-shift-right",884046498,null),"null",new cljs.core.Symbol(null,"aget","aget",1491056546,null),"null",new cljs.core.Symbol(null,"=","=",-1501502141,null),"null",new cljs.core.Symbol(null,"boolean","boolean",-278886877,null),"null",new cljs.core.Symbol(null,"bit-shift-left","bit-shift-left",-1814765981,null),"null",new cljs.core.Symbol(null,"aclone","aclone",722978531,null),"null",new cljs.core.Symbol(null,"dec","dec",-766002333,null),"null",new cljs.core.Symbol(null,"<","<",993667236,null),"null",new cljs.core.Symbol(null,"char","char",998943941,null),"null",new cljs.core.Symbol(null,"unchecked-long","unchecked-long",1306610949,null),"null",new cljs.core.Symbol(null,"unchecked-negate","unchecked-negate",-1669067451,null),"null",new cljs.core.Symbol(null,"unchecked-inc-int","unchecked-inc-int",1402783397,null),"null",new cljs.core.Symbol(null,"floats","floats",513591110,null),"null",new cljs.core.Symbol(null,"pos?","pos?",-244377722,null),"null",new cljs.core.Symbol(null,"boolean-array","boolean-array",-640353913,null),"null",new cljs.core.Symbol(null,"alength","alength",-1268305401,null),"null",new cljs.core.Symbol(null,"bit-xor","bit-xor",-1334295033,null),"null",new cljs.core.Symbol(null,"unsigned-bit-shift-right","unsigned-bit-shift-right",-1953076601,null),"null",new cljs.core.Symbol(null,"neg?","neg?",-1902175577,null),"null",new cljs.core.Symbol(null,"unchecked-float","unchecked-float",1485658216,null),"null",new cljs.core.Symbol(null,"num","num",-669195096,null),"null",new cljs.core.Symbol(null,"reduced?","reduced?",1361797384,null),"null",new cljs.core.Symbol(null,"booleans","booleans",756846088,null),"null",new cljs.core.Symbol(null,"int-array","int-array",459176616,null),"null",new cljs.core.Symbol(null,"inc'","inc'",1740049128,null),"null",new cljs.core.Symbol(null,"<=","<=",1244895369,null),"null",new cljs.core.Symbol(null,"-'","-'",1770549449,null),"null",new cljs.core.Symbol(null,"*","*",345799209,null),"null",new cljs.core.Symbol(null,"min","min",2085523049,null),"null",new cljs.core.Symbol(null,"get","get",-971253014,null),"null",new cljs.core.Symbol(null,"long","long",1469079434,null),"null",new cljs.core.Symbol(null,"double","double",-1769548886,null),"null",new cljs.core.Symbol(null,"bit-and-not","bit-and-not",-254338837,null),"null",new cljs.core.Symbol(null,"unchecked-add-int","unchecked-add-int",-1821763285,null),"null",new cljs.core.Symbol(null,"short","short",-725675253,null),"null",new cljs.core.Symbol(null,"quot","quot",-1125214196,null),"null",new cljs.core.Symbol(null,"unchecked-double","unchecked-double",-1593778036,null),"null",new cljs.core.Symbol(null,"longs","longs",-1017696020,null),"null",new cljs.core.Symbol(null,"unchecked-multiply-int","unchecked-multiply-int",-788546068,null),"null",new cljs.core.Symbol(null,"int","int",-100885395,null),"null",new cljs.core.Symbol(null,">",">",1085014381,null),"null",new cljs.core.Symbol(null,"unchecked-int","unchecked-int",1672898125,null),"null",new cljs.core.Symbol(null,"unchecked-multiply","unchecked-multiply",-1019161490,null),"null",new cljs.core.Symbol(null,"unchecked-dec","unchecked-dec",2095823150,null),"null",new cljs.core.Symbol(null,"double-array","double-array",257035726,null),"null",new cljs.core.Symbol(null,"float","float",-91857841,null),"null",new cljs.core.Symbol(null,"-","-",-471816912,null),"null",new cljs.core.Symbol(null,"byte-array","byte-array",2009690064,null),"null",new cljs.core.Symbol(null,"zero?","zero?",325758897,null),"null",new cljs.core.Symbol(null,"unchecked-dec-int","unchecked-dec-int",1339067442,null),"null",new cljs.core.Symbol(null,"rem","rem",664046770,null),"null",new cljs.core.Symbol(null,"nth","nth",1529209554,null),"null",new cljs.core.Symbol(null,"nil?","nil?",1612038930,null),"null",new cljs.core.Symbol(null,"bit-and","bit-and",-479352589,null),"null",new cljs.core.Symbol(null,"*'","*'",-1403126253,null),"null",new cljs.core.Symbol(null,"unchecked-add","unchecked-add",-2030665965,null),"null",new cljs.core.Symbol(null,"identical?","identical?",-745864205,null),"null",new cljs.core.Symbol(null,"unchecked-divide-int","unchecked-divide-int",1613116468,null),"null",new cljs.core.Symbol(null,"unchecked-subtract","unchecked-subtract",-2137458667,null),"null",new cljs.core.Symbol(null,"/","/",-1371932971,null),"null",new cljs.core.Symbol(null,"bit-or","bit-or",-1144943723,null),"null",new cljs.core.Symbol(null,">=",">=",1016916022,null),"null",new cljs.core.Symbol(null,"long-array","long-array",217579190,null),"null",new cljs.core.Symbol(null,"object-array","object-array",206434647,null),"null",new cljs.core.Symbol(null,"doubles","doubles",-1517872169,null),"null",new cljs.core.Symbol(null,"unchecked-byte","unchecked-byte",1091664664,null),"null",new cljs.core.Symbol(null,"unchecked-short","unchecked-short",27848057,null),"null",new cljs.core.Symbol(null,"float-array","float-array",2043038265,null),"null",new cljs.core.Symbol(null,"inc","inc",324505433,null),"null",new cljs.core.Symbol(null,"+","+",-740910886,null),"null",new cljs.core.Symbol(null,"aset","aset",900773178,null),"null",new cljs.core.Symbol(null,"chars","chars",545901210,null),"null",new cljs.core.Symbol(null,"ints","ints",-1761239845,null),"null",new cljs.core.Symbol(null,"bit-not","bit-not",1508529851,null),"null",new cljs.core.Symbol(null,"byte","byte",-1970660549,null),"null",new cljs.core.Symbol(null,"max","max",1701898075,null),"null",new cljs.core.Symbol(null,"==","==",-234118149,null),"null",new cljs.core.Symbol(null,"count","count",-514511684,null),"null",new cljs.core.Symbol(null,"char-array","char-array",1338149341,null),"null",new cljs.core.Symbol(null,"compare","compare",1109853757,null),"null",new cljs.core.Symbol(null,"shorts","shorts",107738238,null),"null",new cljs.core.Symbol(null,"unchecked-negate-int","unchecked-negate-int",-825297602,null),"null",new cljs.core.Symbol(null,"unchecked-inc","unchecked-inc",-1170131490,null),"null",new cljs.core.Symbol(null,"unchecked-char","unchecked-char",1662742943,null),"null",new cljs.core.Symbol(null,"bytes","bytes",-1478569089,null),"null"], null), null);
sci.impl.namespaces.elide_vars = false;
sci.impl.namespaces.cljs_resolve = (((typeof cljs !== 'undefined') && (typeof cljs.analyzer !== 'undefined') && (typeof cljs.analyzer.api !== 'undefined') && (typeof cljs.analyzer.api.resolve !== 'undefined'))?(new cljs.core.Var((function (){
return cljs.analyzer.api.resolve;
}),cljs.core.with_meta(new cljs.core.Symbol("cljs.analyzer.api","resolve","cljs.analyzer.api/resolve",498213843,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),null)):null);
sci.impl.namespaces.macrofy = (function sci$impl$namespaces$macrofy(var_args){
var G__70105 = arguments.length;
switch (G__70105) {
case 1:
return sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$1 = (function (f){
return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2(f,(function (p1__70100_SHARP_){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(p1__70100_SHARP_,new cljs.core.Keyword("sci","macro","sci/macro",-868536151),true);
}));
}));

(sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2 = (function (sym,f){
return sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$4(sym,f,sci.impl.namespaces.clojure_core_ns,false);
}));

(sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$3 = (function (sym,f,ns){
return sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$4(sym,f,ns,false);
}));

(sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$4 = (function (sym,f,ns,ctx_QMARK_){
return sci.impl.utils.new_var.cljs$core$IFn$_invoke$arity$4(sym,f,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"ns","ns",441598760),ns,new cljs.core.Keyword(null,"macro","macro",-867863404),true,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true], null),ctx_QMARK_);
}));

(sci.impl.namespaces.macrofy.cljs$lang$maxFixedArity = 4);

sci.impl.namespaces.ns_new_var = (function sci$impl$namespaces$ns_new_var(ns){
return (function() {
var sci$impl$namespaces$ns_new_var_$_new_var_with_ns = null;
var sci$impl$namespaces$ns_new_var_$_new_var_with_ns__2 = (function (sym,v){
return sci$impl$namespaces$ns_new_var_$_new_var_with_ns.cljs$core$IFn$_invoke$arity$3(sym,v,false);
});
var sci$impl$namespaces$ns_new_var_$_new_var_with_ns__3 = (function (sym,v,ctx_QMARK_){
return sci.impl.utils.new_var.cljs$core$IFn$_invoke$arity$4(sym,v,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"ns","ns",441598760),ns,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true], null),ctx_QMARK_);
});
sci$impl$namespaces$ns_new_var_$_new_var_with_ns = function(sym,v,ctx_QMARK_){
switch(arguments.length){
case 2:
return sci$impl$namespaces$ns_new_var_$_new_var_with_ns__2.call(this,sym,v);
case 3:
return sci$impl$namespaces$ns_new_var_$_new_var_with_ns__3.call(this,sym,v,ctx_QMARK_);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
sci$impl$namespaces$ns_new_var_$_new_var_with_ns.cljs$core$IFn$_invoke$arity$2 = sci$impl$namespaces$ns_new_var_$_new_var_with_ns__2;
sci$impl$namespaces$ns_new_var_$_new_var_with_ns.cljs$core$IFn$_invoke$arity$3 = sci$impl$namespaces$ns_new_var_$_new_var_with_ns__3;
return sci$impl$namespaces$ns_new_var_$_new_var_with_ns;
})()
});
sci.impl.namespaces.__GT__STAR_ = (function sci$impl$namespaces$__GT__STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72536 = arguments.length;
var i__4865__auto___72537 = (0);
while(true){
if((i__4865__auto___72537 < len__4864__auto___72536)){
args__4870__auto__.push((arguments[i__4865__auto___72537]));

var G__72538 = (i__4865__auto___72537 + (1));
i__4865__auto___72537 = G__72538;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);
});

(sci.impl.namespaces.__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,x,forms){
var x__$1 = x;
var forms__$1 = forms;
while(true){
if(cljs.core.truth_(forms__$1)){
var form = cljs.core.first(forms__$1);
var threaded = ((cljs.core.seq_QMARK_(form))?cljs.core.with_meta(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.first(form),null,(1),null)),(new cljs.core.List(null,x__$1,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.next(form)], 0)))),cljs.core.meta(form)):(new cljs.core.List(null,form,(new cljs.core.List(null,x__$1,null,(1),null)),(2),null)));
var G__72546 = threaded;
var G__72547 = cljs.core.next(forms__$1);
x__$1 = G__72546;
forms__$1 = G__72547;
continue;
} else {
return x__$1;
}
break;
}
}));

(sci.impl.namespaces.__GT__STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.__GT__STAR_.cljs$lang$applyTo = (function (seq70112){
var G__70113 = cljs.core.first(seq70112);
var seq70112__$1 = cljs.core.next(seq70112);
var G__70114 = cljs.core.first(seq70112__$1);
var seq70112__$2 = cljs.core.next(seq70112__$1);
var G__70115 = cljs.core.first(seq70112__$2);
var seq70112__$3 = cljs.core.next(seq70112__$2);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70113,G__70114,G__70115,seq70112__$3);
}));

sci.impl.namespaces.__GT__GT__STAR_ = (function sci$impl$namespaces$__GT__GT__STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72550 = arguments.length;
var i__4865__auto___72552 = (0);
while(true){
if((i__4865__auto___72552 < len__4864__auto___72550)){
args__4870__auto__.push((arguments[i__4865__auto___72552]));

var G__72553 = (i__4865__auto___72552 + (1));
i__4865__auto___72552 = G__72553;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.__GT__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);
});

(sci.impl.namespaces.__GT__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,x,forms){
var x__$1 = x;
var forms__$1 = forms;
while(true){
if(cljs.core.truth_(forms__$1)){
var form = cljs.core.first(forms__$1);
var threaded = ((cljs.core.seq_QMARK_(form))?cljs.core.with_meta(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.first(form),null,(1),null)),cljs.core.next(form),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,x__$1,null,(1),null))], 0)))),cljs.core.meta(form)):(new cljs.core.List(null,form,(new cljs.core.List(null,x__$1,null,(1),null)),(2),null)));
var G__72554 = threaded;
var G__72555 = cljs.core.next(forms__$1);
x__$1 = G__72554;
forms__$1 = G__72555;
continue;
} else {
return x__$1;
}
break;
}
}));

(sci.impl.namespaces.__GT__GT__STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.__GT__GT__STAR_.cljs$lang$applyTo = (function (seq70124){
var G__70125 = cljs.core.first(seq70124);
var seq70124__$1 = cljs.core.next(seq70124);
var G__70126 = cljs.core.first(seq70124__$1);
var seq70124__$2 = cljs.core.next(seq70124__$1);
var G__70127 = cljs.core.first(seq70124__$2);
var seq70124__$3 = cljs.core.next(seq70124__$2);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70125,G__70126,G__70127,seq70124__$3);
}));

sci.impl.namespaces.as__GT__STAR_ = (function sci$impl$namespaces$as__GT__STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72557 = arguments.length;
var i__4865__auto___72558 = (0);
while(true){
if((i__4865__auto___72558 < len__4864__auto___72557)){
args__4870__auto__.push((arguments[i__4865__auto___72558]));

var G__72559 = (i__4865__auto___72558 + (1));
i__4865__auto___72558 = G__72559;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((4) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((4)),(0),null)):null);
return sci.impl.namespaces.as__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),argseq__4871__auto__);
});

(sci.impl.namespaces.as__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,expr,name,forms){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,name,null,(1),null)),(new cljs.core.List(null,expr,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(name),cljs.core.butlast(forms))], 0))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,((cljs.core.empty_QMARK_(forms))?name:cljs.core.last(forms)),null,(1),null))], 0))));
}));

(sci.impl.namespaces.as__GT__STAR_.cljs$lang$maxFixedArity = (4));

/** @this {Function} */
(sci.impl.namespaces.as__GT__STAR_.cljs$lang$applyTo = (function (seq70132){
var G__70133 = cljs.core.first(seq70132);
var seq70132__$1 = cljs.core.next(seq70132);
var G__70134 = cljs.core.first(seq70132__$1);
var seq70132__$2 = cljs.core.next(seq70132__$1);
var G__70135 = cljs.core.first(seq70132__$2);
var seq70132__$3 = cljs.core.next(seq70132__$2);
var G__70136 = cljs.core.first(seq70132__$3);
var seq70132__$4 = cljs.core.next(seq70132__$3);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70133,G__70134,G__70135,G__70136,seq70132__$4);
}));

sci.impl.namespaces.comment_STAR_ = (function sci$impl$namespaces$comment_STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72561 = arguments.length;
var i__4865__auto___72562 = (0);
while(true){
if((i__4865__auto___72562 < len__4864__auto___72561)){
args__4870__auto__.push((arguments[i__4865__auto___72562]));

var G__72563 = (i__4865__auto___72562 + (1));
i__4865__auto___72562 = G__72563;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((2) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((2)),(0),null)):null);
return sci.impl.namespaces.comment_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4871__auto__);
});

(sci.impl.namespaces.comment_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,_body){
return null;
}));

(sci.impl.namespaces.comment_STAR_.cljs$lang$maxFixedArity = (2));

/** @this {Function} */
(sci.impl.namespaces.comment_STAR_.cljs$lang$applyTo = (function (seq70146){
var G__70147 = cljs.core.first(seq70146);
var seq70146__$1 = cljs.core.next(seq70146);
var G__70148 = cljs.core.first(seq70146__$1);
var seq70146__$2 = cljs.core.next(seq70146__$1);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70147,G__70148,seq70146__$2);
}));

sci.impl.namespaces.dotimes_STAR_ = (function sci$impl$namespaces$dotimes_STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72572 = arguments.length;
var i__4865__auto___72573 = (0);
while(true){
if((i__4865__auto___72573 < len__4864__auto___72572)){
args__4870__auto__.push((arguments[i__4865__auto___72573]));

var G__72574 = (i__4865__auto___72573 + (1));
i__4865__auto___72573 = G__72574;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.dotimes_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);
});

(sci.impl.namespaces.dotimes_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,bindings,body){
if(cljs.core.vector_QMARK_(bindings)){
} else {
throw (new Error("Assert failed: (vector? bindings)"));
}

if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((2),cljs.core.count(bindings))){
} else {
throw (new Error("Assert failed: (= 2 (count bindings))"));
}

var i = cljs.core.first(bindings);
var n = cljs.core.second(bindings);
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"n__70167__auto__","n__70167__auto__",153992250,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","long","cljs.core/long",241154833,null),null,(1),null)),(new cljs.core.List(null,n,null,(1),null))))),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,sci.impl.utils.allowed_loop,null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,i,null,(1),null)),(new cljs.core.List(null,(0),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","when","cljs.core/when",120293186,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","<","cljs.core/<",1677496129,null),null,(1),null)),(new cljs.core.List(null,i,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,new cljs.core.Symbol(null,"n__70167__auto__","n__70167__auto__",153992250,null),null,(1),null))], 0)))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body,(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,sci.impl.utils.allowed_recur,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","unchecked-inc","cljs.core/unchecked-inc",-501313167,null),null,(1),null)),(new cljs.core.List(null,i,null,(1),null))))),null,(1),null))))),null,(1),null))], 0)))),null,(1),null))], 0)))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.dotimes_STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.dotimes_STAR_.cljs$lang$applyTo = (function (seq70169){
var G__70170 = cljs.core.first(seq70169);
var seq70169__$1 = cljs.core.next(seq70169);
var G__70171 = cljs.core.first(seq70169__$1);
var seq70169__$2 = cljs.core.next(seq70169__$1);
var G__70172 = cljs.core.first(seq70169__$2);
var seq70169__$3 = cljs.core.next(seq70169__$2);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70170,G__70171,G__70172,seq70169__$3);
}));

/**
 * if-not from clojure.core
 */
sci.impl.namespaces.if_not_STAR_ = (function sci$impl$namespaces$if_not_STAR_(var_args){
var G__70274 = arguments.length;
switch (G__70274) {
case 4:
return sci.impl.namespaces.if_not_STAR_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
case 5:
return sci.impl.namespaces.if_not_STAR_.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(sci.impl.namespaces.if_not_STAR_.cljs$core$IFn$_invoke$arity$4 = (function (_AMPERSAND_form,_AMPERSAND_env,test,then){
return sci.impl.namespaces.if_not_STAR_.cljs$core$IFn$_invoke$arity$5(_AMPERSAND_form,_AMPERSAND_env,test,then,null);
}));

(sci.impl.namespaces.if_not_STAR_.cljs$core$IFn$_invoke$arity$5 = (function (__AMPERSAND_form,__AMPERSAND_env,test,then,else$){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,"if","if",1181717262,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","not","cljs.core/not",100665144,null),null,(1),null)),(new cljs.core.List(null,test,null,(1),null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,then,null,(1),null)),(new cljs.core.List(null,else$,null,(1),null))], 0))));
}));

(sci.impl.namespaces.if_not_STAR_.cljs$lang$maxFixedArity = 5);

sci.impl.namespaces.when_STAR_ = (function sci$impl$namespaces$when_STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72594 = arguments.length;
var i__4865__auto___72596 = (0);
while(true){
if((i__4865__auto___72596 < len__4864__auto___72594)){
args__4870__auto__.push((arguments[i__4865__auto___72596]));

var G__72598 = (i__4865__auto___72596 + (1));
i__4865__auto___72596 = G__72598;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.when_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);
});

(sci.impl.namespaces.when_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,test,body){
return (new cljs.core.List(null,new cljs.core.Symbol(null,"if","if",1181717262,null),(new cljs.core.List(null,test,(new cljs.core.List(null,cljs.core.cons(new cljs.core.Symbol(null,"do","do",1686842252,null),body),null,(1),null)),(2),null)),(3),null));
}));

(sci.impl.namespaces.when_STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.when_STAR_.cljs$lang$applyTo = (function (seq70299){
var G__70300 = cljs.core.first(seq70299);
var seq70299__$1 = cljs.core.next(seq70299);
var G__70301 = cljs.core.first(seq70299__$1);
var seq70299__$2 = cljs.core.next(seq70299__$1);
var G__70302 = cljs.core.first(seq70299__$2);
var seq70299__$3 = cljs.core.next(seq70299__$2);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70300,G__70301,G__70302,seq70299__$3);
}));

/**
 * when-not from clojure.core
 */
sci.impl.namespaces.when_not_STAR_ = (function sci$impl$namespaces$when_not_STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72600 = arguments.length;
var i__4865__auto___72601 = (0);
while(true){
if((i__4865__auto___72601 < len__4864__auto___72600)){
args__4870__auto__.push((arguments[i__4865__auto___72601]));

var G__72603 = (i__4865__auto___72601 + (1));
i__4865__auto___72601 = G__72603;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.when_not_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);
});

(sci.impl.namespaces.when_not_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (__AMPERSAND_form,__AMPERSAND_env,test,body){
return (new cljs.core.List(null,new cljs.core.Symbol(null,"if","if",1181717262,null),(new cljs.core.List(null,test,(new cljs.core.List(null,null,(new cljs.core.List(null,cljs.core.cons(new cljs.core.Symbol(null,"do","do",1686842252,null),body),null,(1),null)),(2),null)),(3),null)),(4),null));
}));

(sci.impl.namespaces.when_not_STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.when_not_STAR_.cljs$lang$applyTo = (function (seq70329){
var G__70330 = cljs.core.first(seq70329);
var seq70329__$1 = cljs.core.next(seq70329);
var G__70331 = cljs.core.first(seq70329__$1);
var seq70329__$2 = cljs.core.next(seq70329__$1);
var G__70332 = cljs.core.first(seq70329__$2);
var seq70329__$3 = cljs.core.next(seq70329__$2);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70330,G__70331,G__70332,seq70329__$3);
}));

/**
 * doto from clojure.core
 */
sci.impl.namespaces.doto_STAR_ = (function sci$impl$namespaces$doto_STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72605 = arguments.length;
var i__4865__auto___72606 = (0);
while(true){
if((i__4865__auto___72606 < len__4864__auto___72605)){
args__4870__auto__.push((arguments[i__4865__auto___72606]));

var G__72607 = (i__4865__auto___72606 + (1));
i__4865__auto___72606 = G__72607;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.doto_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);
});

(sci.impl.namespaces.doto_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (__AMPERSAND_form,__AMPERSAND_env,x,forms){
var gx = cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,gx,null,(1),null)),(new cljs.core.List(null,x,null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (f){
return cljs.core.with_meta(((cljs.core.seq_QMARK_(f))?cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,cljs.core.first(f),null,(1),null)),(new cljs.core.List(null,gx,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.next(f)], 0)))):cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,f,null,(1),null)),(new cljs.core.List(null,gx,null,(1),null)))))),cljs.core.meta(f));
}),forms),(new cljs.core.List(null,gx,null,(1),null))], 0))));
}));

(sci.impl.namespaces.doto_STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.doto_STAR_.cljs$lang$applyTo = (function (seq70361){
var G__70362 = cljs.core.first(seq70361);
var seq70361__$1 = cljs.core.next(seq70361);
var G__70363 = cljs.core.first(seq70361__$1);
var seq70361__$2 = cljs.core.next(seq70361__$1);
var G__70364 = cljs.core.first(seq70361__$2);
var seq70361__$3 = cljs.core.next(seq70361__$2);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70362,G__70363,G__70364,seq70361__$3);
}));

sci.impl.namespaces.cond_STAR_ = (function sci$impl$namespaces$cond_STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72608 = arguments.length;
var i__4865__auto___72609 = (0);
while(true){
if((i__4865__auto___72609 < len__4864__auto___72608)){
args__4870__auto__.push((arguments[i__4865__auto___72609]));

var G__72610 = (i__4865__auto___72609 + (1));
i__4865__auto___72609 = G__72610;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((2) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((2)),(0),null)):null);
return sci.impl.namespaces.cond_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4871__auto__);
});

(sci.impl.namespaces.cond_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,clauses){
if(cljs.core.truth_(clauses)){
return (new cljs.core.List(null,new cljs.core.Symbol(null,"if","if",1181717262,null),(new cljs.core.List(null,cljs.core.first(clauses),(new cljs.core.List(null,((cljs.core.next(clauses))?cljs.core.second(clauses):(function(){throw (new Error("cond requires an even number of forms"))})()),(new cljs.core.List(null,cljs.core.cons(new cljs.core.Symbol("clojure.core","cond","clojure.core/cond",1906951420,null),cljs.core.next(cljs.core.next(clauses))),null,(1),null)),(2),null)),(3),null)),(4),null));
} else {
return null;
}
}));

(sci.impl.namespaces.cond_STAR_.cljs$lang$maxFixedArity = (2));

/** @this {Function} */
(sci.impl.namespaces.cond_STAR_.cljs$lang$applyTo = (function (seq70368){
var G__70373 = cljs.core.first(seq70368);
var seq70368__$1 = cljs.core.next(seq70368);
var G__70384 = cljs.core.first(seq70368__$1);
var seq70368__$2 = cljs.core.next(seq70368__$1);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70373,G__70384,seq70368__$2);
}));

sci.impl.namespaces.cond__GT__STAR_ = (function sci$impl$namespaces$cond__GT__STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72612 = arguments.length;
var i__4865__auto___72613 = (0);
while(true){
if((i__4865__auto___72613 < len__4864__auto___72612)){
args__4870__auto__.push((arguments[i__4865__auto___72613]));

var G__72614 = (i__4865__auto___72613 + (1));
i__4865__auto___72613 = G__72614;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.cond__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);
});

(sci.impl.namespaces.cond__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (__AMPERSAND_form,__AMPERSAND_env,expr,clauses){
if(cljs.core.even_QMARK_(cljs.core.count(clauses))){
} else {
throw (new Error("Assert failed: (even? (count clauses))"));
}

var g = cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
var steps = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__70434){
var vec__70435 = p__70434;
var test = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__70435,(0),null);
var step = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__70435,(1),null);
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,"if","if",1181717262,null),null,(1),null)),(new cljs.core.List(null,test,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","->","cljs.core/->",1488366311,null),null,(1),null)),(new cljs.core.List(null,g,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,step,null,(1),null))], 0)))),null,(1),null)),(new cljs.core.List(null,g,null,(1),null))], 0))));
}),cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),clauses));
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,g,null,(1),null)),(new cljs.core.List(null,expr,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(g),cljs.core.butlast(steps))], 0))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,((cljs.core.empty_QMARK_(steps))?g:cljs.core.last(steps)),null,(1),null))], 0))));
}));

(sci.impl.namespaces.cond__GT__STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.cond__GT__STAR_.cljs$lang$applyTo = (function (seq70399){
var G__70400 = cljs.core.first(seq70399);
var seq70399__$1 = cljs.core.next(seq70399);
var G__70401 = cljs.core.first(seq70399__$1);
var seq70399__$2 = cljs.core.next(seq70399__$1);
var G__70402 = cljs.core.first(seq70399__$2);
var seq70399__$3 = cljs.core.next(seq70399__$2);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70400,G__70401,G__70402,seq70399__$3);
}));

sci.impl.namespaces.cond__GT__GT__STAR_ = (function sci$impl$namespaces$cond__GT__GT__STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72616 = arguments.length;
var i__4865__auto___72617 = (0);
while(true){
if((i__4865__auto___72617 < len__4864__auto___72616)){
args__4870__auto__.push((arguments[i__4865__auto___72617]));

var G__72620 = (i__4865__auto___72617 + (1));
i__4865__auto___72617 = G__72620;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.cond__GT__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);
});

(sci.impl.namespaces.cond__GT__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (__AMPERSAND_form,__AMPERSAND_env,expr,clauses){
if(cljs.core.even_QMARK_(cljs.core.count(clauses))){
} else {
throw (new Error("Assert failed: (even? (count clauses))"));
}

var g = cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
var steps = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__70476){
var vec__70477 = p__70476;
var test = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__70477,(0),null);
var step = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__70477,(1),null);
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,"if","if",1181717262,null),null,(1),null)),(new cljs.core.List(null,test,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","->>","cljs.core/->>",-1207871206,null),null,(1),null)),(new cljs.core.List(null,g,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,step,null,(1),null))], 0)))),null,(1),null)),(new cljs.core.List(null,g,null,(1),null))], 0))));
}),cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),clauses));
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,g,null,(1),null)),(new cljs.core.List(null,expr,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(g),cljs.core.butlast(steps))], 0))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,((cljs.core.empty_QMARK_(steps))?g:cljs.core.last(steps)),null,(1),null))], 0))));
}));

(sci.impl.namespaces.cond__GT__GT__STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.cond__GT__GT__STAR_.cljs$lang$applyTo = (function (seq70439){
var G__70440 = cljs.core.first(seq70439);
var seq70439__$1 = cljs.core.next(seq70439);
var G__70441 = cljs.core.first(seq70439__$1);
var seq70439__$2 = cljs.core.next(seq70439__$1);
var G__70442 = cljs.core.first(seq70439__$2);
var seq70439__$3 = cljs.core.next(seq70439__$2);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70440,G__70441,G__70442,seq70439__$3);
}));

sci.impl.namespaces.if_let_STAR_ = (function sci$impl$namespaces$if_let_STAR_(var_args){
var G__70490 = arguments.length;
switch (G__70490) {
case 4:
return sci.impl.namespaces.if_let_STAR_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
default:
var args_arr__4885__auto__ = [];
var len__4864__auto___72623 = arguments.length;
var i__4865__auto___72624 = (0);
while(true){
if((i__4865__auto___72624 < len__4864__auto___72623)){
args_arr__4885__auto__.push((arguments[i__4865__auto___72624]));

var G__72625 = (i__4865__auto___72624 + (1));
i__4865__auto___72624 = G__72625;
continue;
} else {
}
break;
}

var argseq__4886__auto__ = (new cljs.core.IndexedSeq(args_arr__4885__auto__.slice((5)),(0),null));
return sci.impl.namespaces.if_let_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),argseq__4886__auto__);

}
});

(sci.impl.namespaces.if_let_STAR_.cljs$core$IFn$_invoke$arity$4 = (function (_AMPERSAND_form,_AMPERSAND_env,bindings,then){
return sci.impl.namespaces.if_let_STAR_(_AMPERSAND_form,_AMPERSAND_env,bindings,then,null);
}));

(sci.impl.namespaces.if_let_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (__AMPERSAND_form,__AMPERSAND_env,bindings,then,else$,_oldform){
var form = (bindings.cljs$core$IFn$_invoke$arity$1 ? bindings.cljs$core$IFn$_invoke$arity$1((0)) : bindings.call(null,(0)));
var tst = (bindings.cljs$core$IFn$_invoke$arity$1 ? bindings.cljs$core$IFn$_invoke$arity$1((1)) : bindings.call(null,(1)));
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"temp__70481__auto__","temp__70481__auto__",-350302982,null),null,(1),null)),(new cljs.core.List(null,tst,null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,"if","if",1181717262,null),null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(null,"temp__70481__auto__","temp__70481__auto__",-350302982,null),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,form,null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(null,"temp__70481__auto__","temp__70481__auto__",-350302982,null),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,then,null,(1),null))], 0)))),null,(1),null)),(new cljs.core.List(null,else$,null,(1),null))], 0)))),null,(1),null))], 0))));
}));

/** @this {Function} */
(sci.impl.namespaces.if_let_STAR_.cljs$lang$applyTo = (function (seq70483){
var G__70484 = cljs.core.first(seq70483);
var seq70483__$1 = cljs.core.next(seq70483);
var G__70485 = cljs.core.first(seq70483__$1);
var seq70483__$2 = cljs.core.next(seq70483__$1);
var G__70486 = cljs.core.first(seq70483__$2);
var seq70483__$3 = cljs.core.next(seq70483__$2);
var G__70487 = cljs.core.first(seq70483__$3);
var seq70483__$4 = cljs.core.next(seq70483__$3);
var G__70488 = cljs.core.first(seq70483__$4);
var seq70483__$5 = cljs.core.next(seq70483__$4);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70484,G__70485,G__70486,G__70487,G__70488,seq70483__$5);
}));

(sci.impl.namespaces.if_let_STAR_.cljs$lang$maxFixedArity = (5));

sci.impl.namespaces.if_some_STAR_ = (function sci$impl$namespaces$if_some_STAR_(var_args){
var G__70534 = arguments.length;
switch (G__70534) {
case 4:
return sci.impl.namespaces.if_some_STAR_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
default:
var args_arr__4885__auto__ = [];
var len__4864__auto___72629 = arguments.length;
var i__4865__auto___72630 = (0);
while(true){
if((i__4865__auto___72630 < len__4864__auto___72629)){
args_arr__4885__auto__.push((arguments[i__4865__auto___72630]));

var G__72631 = (i__4865__auto___72630 + (1));
i__4865__auto___72630 = G__72631;
continue;
} else {
}
break;
}

var argseq__4886__auto__ = (new cljs.core.IndexedSeq(args_arr__4885__auto__.slice((5)),(0),null));
return sci.impl.namespaces.if_some_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),argseq__4886__auto__);

}
});

(sci.impl.namespaces.if_some_STAR_.cljs$core$IFn$_invoke$arity$4 = (function (_AMPERSAND_form,_AMPERSAND_env,bindings,then){
return sci.impl.namespaces.if_some_STAR_(_AMPERSAND_form,_AMPERSAND_env,bindings,then,null);
}));

(sci.impl.namespaces.if_some_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (__AMPERSAND_form,__AMPERSAND_env,bindings,then,else$,_oldform){
var form = (bindings.cljs$core$IFn$_invoke$arity$1 ? bindings.cljs$core$IFn$_invoke$arity$1((0)) : bindings.call(null,(0)));
var tst = (bindings.cljs$core$IFn$_invoke$arity$1 ? bindings.cljs$core$IFn$_invoke$arity$1((1)) : bindings.call(null,(1)));
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"temp__70526__auto__","temp__70526__auto__",1890148817,null),null,(1),null)),(new cljs.core.List(null,tst,null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,"if","if",1181717262,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","nil?","cljs.core/nil?",945071861,null),null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(null,"temp__70526__auto__","temp__70526__auto__",1890148817,null),null,(1),null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,else$,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,form,null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(null,"temp__70526__auto__","temp__70526__auto__",1890148817,null),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,then,null,(1),null))], 0)))),null,(1),null))], 0)))),null,(1),null))], 0))));
}));

/** @this {Function} */
(sci.impl.namespaces.if_some_STAR_.cljs$lang$applyTo = (function (seq70528){
var G__70529 = cljs.core.first(seq70528);
var seq70528__$1 = cljs.core.next(seq70528);
var G__70530 = cljs.core.first(seq70528__$1);
var seq70528__$2 = cljs.core.next(seq70528__$1);
var G__70531 = cljs.core.first(seq70528__$2);
var seq70528__$3 = cljs.core.next(seq70528__$2);
var G__70532 = cljs.core.first(seq70528__$3);
var seq70528__$4 = cljs.core.next(seq70528__$3);
var G__70533 = cljs.core.first(seq70528__$4);
var seq70528__$5 = cljs.core.next(seq70528__$4);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70529,G__70530,G__70531,G__70532,G__70533,seq70528__$5);
}));

(sci.impl.namespaces.if_some_STAR_.cljs$lang$maxFixedArity = (5));

sci.impl.namespaces.when_let_STAR_ = (function sci$impl$namespaces$when_let_STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72636 = arguments.length;
var i__4865__auto___72637 = (0);
while(true){
if((i__4865__auto___72637 < len__4864__auto___72636)){
args__4870__auto__.push((arguments[i__4865__auto___72637]));

var G__72638 = (i__4865__auto___72637 + (1));
i__4865__auto___72637 = G__72638;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.when_let_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);
});

(sci.impl.namespaces.when_let_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (__AMPERSAND_form,__AMPERSAND_env,bindings,body){
var form = (bindings.cljs$core$IFn$_invoke$arity$1 ? bindings.cljs$core$IFn$_invoke$arity$1((0)) : bindings.call(null,(0)));
var tst = (bindings.cljs$core$IFn$_invoke$arity$1 ? bindings.cljs$core$IFn$_invoke$arity$1((1)) : bindings.call(null,(1)));
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"temp__70572__auto__","temp__70572__auto__",-98260766,null),null,(1),null)),(new cljs.core.List(null,tst,null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","when","cljs.core/when",120293186,null),null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(null,"temp__70572__auto__","temp__70572__auto__",-98260766,null),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,form,null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(null,"temp__70572__auto__","temp__70572__auto__",-98260766,null),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body], 0)))),null,(1),null))], 0)))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.when_let_STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.when_let_STAR_.cljs$lang$applyTo = (function (seq70573){
var G__70574 = cljs.core.first(seq70573);
var seq70573__$1 = cljs.core.next(seq70573);
var G__70575 = cljs.core.first(seq70573__$1);
var seq70573__$2 = cljs.core.next(seq70573__$1);
var G__70576 = cljs.core.first(seq70573__$2);
var seq70573__$3 = cljs.core.next(seq70573__$2);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70574,G__70575,G__70576,seq70573__$3);
}));

sci.impl.namespaces.when_first_STAR_ = (function sci$impl$namespaces$when_first_STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72644 = arguments.length;
var i__4865__auto___72645 = (0);
while(true){
if((i__4865__auto___72645 < len__4864__auto___72644)){
args__4870__auto__.push((arguments[i__4865__auto___72645]));

var G__72647 = (i__4865__auto___72645 + (1));
i__4865__auto___72645 = G__72647;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.when_first_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);
});

(sci.impl.namespaces.when_first_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,bindings,body){
var vec__70622 = bindings;
var x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__70622,(0),null);
var xs = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__70622,(1),null);
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","when-let","cljs.core/when-let",-2049838349,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"xs__70580__auto__","xs__70580__auto__",1292756084,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","seq","cljs.core/seq",-1649497689,null),null,(1),null)),(new cljs.core.List(null,xs,null,(1),null))))),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,x,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","first","cljs.core/first",-752535972,null),null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(null,"xs__70580__auto__","xs__70580__auto__",1292756084,null),null,(1),null))))),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body], 0)))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.when_first_STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.when_first_STAR_.cljs$lang$applyTo = (function (seq70618){
var G__70619 = cljs.core.first(seq70618);
var seq70618__$1 = cljs.core.next(seq70618);
var G__70620 = cljs.core.first(seq70618__$1);
var seq70618__$2 = cljs.core.next(seq70618__$1);
var G__70621 = cljs.core.first(seq70618__$2);
var seq70618__$3 = cljs.core.next(seq70618__$2);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70619,G__70620,G__70621,seq70618__$3);
}));

sci.impl.namespaces.when_some_STAR_ = (function sci$impl$namespaces$when_some_STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72664 = arguments.length;
var i__4865__auto___72665 = (0);
while(true){
if((i__4865__auto___72665 < len__4864__auto___72664)){
args__4870__auto__.push((arguments[i__4865__auto___72665]));

var G__72666 = (i__4865__auto___72665 + (1));
i__4865__auto___72665 = G__72666;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.when_some_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);
});

(sci.impl.namespaces.when_some_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,bindings,body){
var form = (bindings.cljs$core$IFn$_invoke$arity$1 ? bindings.cljs$core$IFn$_invoke$arity$1((0)) : bindings.call(null,(0)));
var tst = (bindings.cljs$core$IFn$_invoke$arity$1 ? bindings.cljs$core$IFn$_invoke$arity$1((1)) : bindings.call(null,(1)));
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"temp__70625__auto__","temp__70625__auto__",-823469568,null),null,(1),null)),(new cljs.core.List(null,tst,null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,"if","if",1181717262,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","nil?","cljs.core/nil?",945071861,null),null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(null,"temp__70625__auto__","temp__70625__auto__",-823469568,null),null,(1),null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,null,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,form,null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(null,"temp__70625__auto__","temp__70625__auto__",-823469568,null),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body], 0)))),null,(1),null))], 0)))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.when_some_STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.when_some_STAR_.cljs$lang$applyTo = (function (seq70626){
var G__70627 = cljs.core.first(seq70626);
var seq70626__$1 = cljs.core.next(seq70626);
var G__70628 = cljs.core.first(seq70626__$1);
var seq70626__$2 = cljs.core.next(seq70626__$1);
var G__70629 = cljs.core.first(seq70626__$2);
var seq70626__$3 = cljs.core.next(seq70626__$2);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70627,G__70628,G__70629,seq70626__$3);
}));

sci.impl.namespaces.some__GT__STAR_ = (function sci$impl$namespaces$some__GT__STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72667 = arguments.length;
var i__4865__auto___72668 = (0);
while(true){
if((i__4865__auto___72668 < len__4864__auto___72667)){
args__4870__auto__.push((arguments[i__4865__auto___72668]));

var G__72669 = (i__4865__auto___72668 + (1));
i__4865__auto___72668 = G__72669;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.some__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);
});

(sci.impl.namespaces.some__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (__AMPERSAND_form,__AMPERSAND_env,expr,forms){
var g = cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
var steps = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (step){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,"if","if",1181717262,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","nil?","cljs.core/nil?",945071861,null),null,(1),null)),(new cljs.core.List(null,g,null,(1),null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,null,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","->","cljs.core/->",1488366311,null),null,(1),null)),(new cljs.core.List(null,g,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,step,null,(1),null))], 0)))),null,(1),null))], 0))));
}),forms);
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,g,null,(1),null)),(new cljs.core.List(null,expr,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(g),cljs.core.butlast(steps))], 0))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,((cljs.core.empty_QMARK_(steps))?g:cljs.core.last(steps)),null,(1),null))], 0))));
}));

(sci.impl.namespaces.some__GT__STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.some__GT__STAR_.cljs$lang$applyTo = (function (seq70672){
var G__70673 = cljs.core.first(seq70672);
var seq70672__$1 = cljs.core.next(seq70672);
var G__70674 = cljs.core.first(seq70672__$1);
var seq70672__$2 = cljs.core.next(seq70672__$1);
var G__70675 = cljs.core.first(seq70672__$2);
var seq70672__$3 = cljs.core.next(seq70672__$2);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70673,G__70674,G__70675,seq70672__$3);
}));

sci.impl.namespaces.some__GT__GT__STAR_ = (function sci$impl$namespaces$some__GT__GT__STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72670 = arguments.length;
var i__4865__auto___72671 = (0);
while(true){
if((i__4865__auto___72671 < len__4864__auto___72670)){
args__4870__auto__.push((arguments[i__4865__auto___72671]));

var G__72672 = (i__4865__auto___72671 + (1));
i__4865__auto___72671 = G__72672;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.some__GT__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);
});

(sci.impl.namespaces.some__GT__GT__STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,expr,forms){
var g = cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
var steps = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (step){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,"if","if",1181717262,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","nil?","cljs.core/nil?",945071861,null),null,(1),null)),(new cljs.core.List(null,g,null,(1),null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,null,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","->>","cljs.core/->>",-1207871206,null),null,(1),null)),(new cljs.core.List(null,g,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,step,null,(1),null))], 0)))),null,(1),null))], 0))));
}),forms);
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,g,null,(1),null)),(new cljs.core.List(null,expr,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(g),cljs.core.butlast(steps))], 0))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,((cljs.core.empty_QMARK_(steps))?g:cljs.core.last(steps)),null,(1),null))], 0))));
}));

(sci.impl.namespaces.some__GT__GT__STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.some__GT__GT__STAR_.cljs$lang$applyTo = (function (seq70677){
var G__70678 = cljs.core.first(seq70677);
var seq70677__$1 = cljs.core.next(seq70677);
var G__70679 = cljs.core.first(seq70677__$1);
var seq70677__$2 = cljs.core.next(seq70677__$1);
var G__70680 = cljs.core.first(seq70677__$2);
var seq70677__$3 = cljs.core.next(seq70677__$2);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70678,G__70679,G__70680,seq70677__$3);
}));

/**
 * defs the supplied var names with no bindings, useful for making forward declarations.
 */
sci.impl.namespaces.declare_STAR_ = (function sci$impl$namespaces$declare_STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72673 = arguments.length;
var i__4865__auto___72674 = (0);
while(true){
if((i__4865__auto___72674 < len__4864__auto___72673)){
args__4870__auto__.push((arguments[i__4865__auto___72674]));

var G__72675 = (i__4865__auto___72674 + (1));
i__4865__auto___72674 = G__72675;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((2) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((2)),(0),null)):null);
return sci.impl.namespaces.declare_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4871__auto__);
});

(sci.impl.namespaces.declare_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,names){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"do","do",1686842252,null),null,(1),null)),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__70724_SHARP_){
return (new cljs.core.List(null,new cljs.core.Symbol(null,"def","def",597100991,null),(new cljs.core.List(null,cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(p1__70724_SHARP_,cljs.core.assoc,new cljs.core.Keyword(null,"declared","declared",92336021),true),null,(1),null)),(2),null));
}),names))));
}));

(sci.impl.namespaces.declare_STAR_.cljs$lang$maxFixedArity = (2));

/** @this {Function} */
(sci.impl.namespaces.declare_STAR_.cljs$lang$applyTo = (function (seq70725){
var G__70726 = cljs.core.first(seq70725);
var seq70725__$1 = cljs.core.next(seq70725);
var G__70727 = cljs.core.first(seq70725__$1);
var seq70725__$2 = cljs.core.next(seq70725__$1);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70726,G__70727,seq70725__$2);
}));

sci.impl.namespaces.ex_message = (function (){var temp__5751__auto__ = (((typeof cljs !== 'undefined') && (typeof cljs.core !== 'undefined') && (typeof cljs.core.ex_message !== 'undefined'))?(new cljs.core.Var((function (){
return cljs.core.ex_message;
}),cljs.core.with_meta(new cljs.core.Symbol("cljs.core","ex-message","cljs.core/ex-message",-747602175,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.Symbol(null,"cljs.core","cljs.core",770546058,null),new cljs.core.Symbol(null,"ex-message","ex-message",-1128293394,null),"cljs/core.cljs",17,1,11522,11522,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"ex","ex",226760186,null)], null)),"Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.",(cljs.core.truth_(cljs.core.ex_message)?cljs.core.ex_message.cljs$lang$test:null)]))):null);
if(cljs.core.truth_(temp__5751__auto__)){
var v = temp__5751__auto__;
return cljs.core.deref(v);
} else {
return (function sci$impl$namespaces$ex_message(ex){
if((ex instanceof Error)){
return ex.message;
} else {
return null;
}
});
}
})();
sci.impl.namespaces.ex_cause = (function (){var temp__5751__auto__ = (((typeof cljs !== 'undefined') && (typeof cljs.core !== 'undefined') && (typeof cljs.core.ex_cause !== 'undefined'))?(new cljs.core.Var((function (){
return cljs.core.ex_cause;
}),cljs.core.with_meta(new cljs.core.Symbol("cljs.core","ex-cause","cljs.core/ex-cause",1843478517,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.Symbol(null,"cljs.core","cljs.core",770546058,null),new cljs.core.Symbol(null,"ex-cause","ex-cause",95392590,null),"cljs/core.cljs",15,1,11529,11529,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"ex","ex",226760186,null)], null)),"Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.",(cljs.core.truth_(cljs.core.ex_cause)?cljs.core.ex_cause.cljs$lang$test:null)]))):null);
if(cljs.core.truth_(temp__5751__auto__)){
var v = temp__5751__auto__;
return cljs.core.deref(v);
} else {
return (function sci$impl$namespaces$ex_message(ex){
if((ex instanceof cljs.core.ExceptionInfo)){
return ex.cause;
} else {
return null;
}
});
}
})();
sci.impl.namespaces.assert_var = sci.impl.utils.dynamic_var.cljs$core$IFn$_invoke$arity$3(new cljs.core.Symbol(null,"*assert*","*assert*",1479636474,null),true,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null));
sci.impl.namespaces.assert_STAR_ = (function sci$impl$namespaces$assert_STAR_(var_args){
var G__70731 = arguments.length;
switch (G__70731) {
case 3:
return sci.impl.namespaces.assert_STAR_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return sci.impl.namespaces.assert_STAR_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(sci.impl.namespaces.assert_STAR_.cljs$core$IFn$_invoke$arity$3 = (function (__AMPERSAND_form,_,x){
if(cljs.core.truth_(cljs.core.deref(sci.impl.namespaces.assert_var))){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","when-not","cljs.core/when-not",-556141047,null),null,(1),null)),(new cljs.core.List(null,x,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"throw","throw",595905694,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("js","Error.","js/Error.",750655924,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","str","cljs.core/str",-1971828991,null),null,(1),null)),(new cljs.core.List(null,"Assert failed: ",null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","pr-str","cljs.core/pr-str",-552799478,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"quote","quote",1377916282,null),null,(1),null)),(new cljs.core.List(null,x,null,(1),null))))),null,(1),null))))),null,(1),null))], 0)))),null,(1),null))))),null,(1),null))))),null,(1),null))], 0))));
} else {
return null;
}
}));

(sci.impl.namespaces.assert_STAR_.cljs$core$IFn$_invoke$arity$4 = (function (__AMPERSAND_form,_,x,message){
if(cljs.core.truth_(cljs.core.deref(sci.impl.namespaces.assert_var))){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","when-not","cljs.core/when-not",-556141047,null),null,(1),null)),(new cljs.core.List(null,x,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"throw","throw",595905694,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("js","Error.","js/Error.",750655924,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","str","cljs.core/str",-1971828991,null),null,(1),null)),(new cljs.core.List(null,"Assert failed: ",null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,message,null,(1),null)),(new cljs.core.List(null,"\n",null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","pr-str","cljs.core/pr-str",-552799478,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"quote","quote",1377916282,null),null,(1),null)),(new cljs.core.List(null,x,null,(1),null))))),null,(1),null))))),null,(1),null))], 0)))),null,(1),null))))),null,(1),null))))),null,(1),null))], 0))));
} else {
return null;
}
}));

(sci.impl.namespaces.assert_STAR_.cljs$lang$maxFixedArity = 4);

sci.impl.namespaces.areduce_STAR_ = (function sci$impl$namespaces$areduce_STAR_(_,___$1,a,idx,ret,init,expr){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,"a__70746__auto__","a__70746__auto__",256698370,null),null,(1),null)),(new cljs.core.List(null,a,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,new cljs.core.Symbol(null,"l__70747__auto__","l__70747__auto__",349406092,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","alength","cljs.core/alength",-1012804190,null),null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(null,"a__70746__auto__","a__70746__auto__",256698370,null),null,(1),null))))),null,(1),null))], 0))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","loop","cljs.core/loop",-1829423021,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,idx,null,(1),null)),(new cljs.core.List(null,(0),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,ret,null,(1),null)),(new cljs.core.List(null,init,null,(1),null))], 0))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,"if","if",1181717262,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","<","cljs.core/<",1677496129,null),null,(1),null)),(new cljs.core.List(null,idx,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,new cljs.core.Symbol(null,"l__70747__auto__","l__70747__auto__",349406092,null),null,(1),null))], 0)))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,"recur","recur",1202958259,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","unchecked-inc-int","cljs.core/unchecked-inc-int",-2007014592,null),null,(1),null)),(new cljs.core.List(null,idx,null,(1),null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,expr,null,(1),null))], 0)))),null,(1),null)),(new cljs.core.List(null,ret,null,(1),null))], 0)))),null,(1),null))], 0)))),null,(1),null))], 0))));
});
sci.impl.namespaces.amap_STAR_ = (function sci$impl$namespaces$amap_STAR_(_,___$1,a,idx,ret,expr){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,"a__70768__auto__","a__70768__auto__",1166338833,null),null,(1),null)),(new cljs.core.List(null,a,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,new cljs.core.Symbol(null,"l__70769__auto__","l__70769__auto__",231540409,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","alength","cljs.core/alength",-1012804190,null),null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(null,"a__70768__auto__","a__70768__auto__",1166338833,null),null,(1),null))))),null,(1),null)),(new cljs.core.List(null,ret,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","aclone","cljs.core/aclone",-758078968,null),null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(null,"a__70768__auto__","a__70768__auto__",1166338833,null),null,(1),null))))),null,(1),null))], 0))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","loop","cljs.core/loop",-1829423021,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,idx,null,(1),null)),(new cljs.core.List(null,(0),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,"if","if",1181717262,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","<","cljs.core/<",1677496129,null),null,(1),null)),(new cljs.core.List(null,idx,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,new cljs.core.Symbol(null,"l__70769__auto__","l__70769__auto__",231540409,null),null,(1),null))], 0)))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,"do","do",1686842252,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","aset","cljs.core/aset",-898215545,null),null,(1),null)),(new cljs.core.List(null,ret,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,idx,null,(1),null)),(new cljs.core.List(null,expr,null,(1),null))], 0)))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"recur","recur",1202958259,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","unchecked-inc","cljs.core/unchecked-inc",-501313167,null),null,(1),null)),(new cljs.core.List(null,idx,null,(1),null))))),null,(1),null))))),null,(1),null))], 0)))),null,(1),null)),(new cljs.core.List(null,ret,null,(1),null))], 0)))),null,(1),null))], 0)))),null,(1),null))], 0))));
});
sci.impl.namespaces.with_open_STAR_ = (function sci$impl$namespaces$with_open_STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72702 = arguments.length;
var i__4865__auto___72704 = (0);
while(true){
if((i__4865__auto___72704 < len__4864__auto___72702)){
args__4870__auto__.push((arguments[i__4865__auto___72704]));

var G__72705 = (i__4865__auto___72704 + (1));
i__4865__auto___72704 = G__72705;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.with_open_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);
});

(sci.impl.namespaces.with_open_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,bindings,body){
if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(bindings),(0))){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"do","do",1686842252,null),null,(1),null)),body)));
} else {
if(((bindings.cljs$core$IFn$_invoke$arity$1 ? bindings.cljs$core$IFn$_invoke$arity$1((0)) : bindings.call(null,(0))) instanceof cljs.core.Symbol)){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(bindings,(0),(2)),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,"try","try",-1273693247,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("sci.impl.namespaces","with-open","sci.impl.namespaces/with-open",-1695932508,null),null,(1),null)),(new cljs.core.List(null,cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(bindings,(2)),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body], 0)))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"finally","finally",-1065347064,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,".close",".close",-1017758745,null),null,(1),null)),(new cljs.core.List(null,(bindings.cljs$core$IFn$_invoke$arity$1 ? bindings.cljs$core$IFn$_invoke$arity$1((0)) : bindings.call(null,(0))),null,(1),null))))),null,(1),null))))),null,(1),null))], 0)))),null,(1),null))], 0))));
} else {
return new cljs.core.Keyword("sci.impl.namespaces","TODO","sci.impl.namespaces/TODO",-1842365958);

}
}
}));

(sci.impl.namespaces.with_open_STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.with_open_STAR_.cljs$lang$applyTo = (function (seq70798){
var G__70799 = cljs.core.first(seq70798);
var seq70798__$1 = cljs.core.next(seq70798);
var G__70800 = cljs.core.first(seq70798__$1);
var seq70798__$2 = cljs.core.next(seq70798__$1);
var G__70801 = cljs.core.first(seq70798__$2);
var seq70798__$3 = cljs.core.next(seq70798__$2);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70799,G__70800,G__70801,seq70798__$3);
}));

sci.impl.namespaces.letfn_STAR_ = (function sci$impl$namespaces$letfn_STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72711 = arguments.length;
var i__4865__auto___72712 = (0);
while(true){
if((i__4865__auto___72712 < len__4864__auto___72711)){
args__4870__auto__.push((arguments[i__4865__auto___72712]));

var G__72713 = (i__4865__auto___72712 + (1));
i__4865__auto___72712 = G__72713;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.letfn_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);
});

(sci.impl.namespaces.letfn_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,fnspecs,body){
var syms = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,fnspecs);
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(syms,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(cljs.core.list(new cljs.core.Symbol("clojure.core","-new-var","clojure.core/-new-var",363339052,null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.map.cljs$core$IFn$_invoke$arity$3((function (sym,fn_spec){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","alter-var-root","cljs.core/alter-var-root",-1342668238,null),null,(1),null)),(new cljs.core.List(null,sym,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","constantly","cljs.core/constantly",119002258,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","fn","cljs.core/fn",-1065745098,null),null,(1),null)),(new cljs.core.List(null,sym,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.rest(fn_spec)], 0)))),null,(1),null))))),null,(1),null))], 0))));
}),syms,fnspecs),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(syms,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (sym){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","var-get","cljs.core/var-get",-91823622,null),null,(1),null)),(new cljs.core.List(null,sym,null,(1),null)))));
}),syms))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body], 0)))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.letfn_STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.letfn_STAR_.cljs$lang$applyTo = (function (seq70820){
var G__70821 = cljs.core.first(seq70820);
var seq70820__$1 = cljs.core.next(seq70820);
var G__70822 = cljs.core.first(seq70820__$1);
var seq70820__$2 = cljs.core.next(seq70820__$1);
var G__70823 = cljs.core.first(seq70820__$2);
var seq70820__$3 = cljs.core.next(seq70820__$2);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70821,G__70822,G__70823,seq70820__$3);
}));

sci.impl.namespaces.with_local_vars_STAR_ = (function sci$impl$namespaces$with_local_vars_STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72714 = arguments.length;
var i__4865__auto___72717 = (0);
while(true){
if((i__4865__auto___72717 < len__4864__auto___72714)){
args__4870__auto__.push((arguments[i__4865__auto___72717]));

var G__72718 = (i__4865__auto___72717 + (1));
i__4865__auto___72717 = G__72718;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.with_local_vars_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);
});

(sci.impl.namespaces.with_local_vars_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (form,_,name_vals_vec,body){
if(cljs.core.vector_QMARK_(name_vals_vec)){
} else {
sci.impl.utils.throw_error_with_location.cljs$core$IFn$_invoke$arity$2("with-local-vars requires a vector for its bindings",form);
}

if(cljs.core.even_QMARK_(cljs.core.count(name_vals_vec))){
} else {
sci.impl.utils.throw_error_with_location.cljs$core$IFn$_invoke$arity$2("with-local-vars requires an even number of forms in binding vector",form);
}

return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$1(cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2((2),name_vals_vec),cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(cljs.core.list(new cljs.core.Symbol("clojure.core","-new-dynamic-var","clojure.core/-new-dynamic-var",-1873937019,null)))))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","push-thread-bindings","cljs.core/push-thread-bindings",-703482450,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","hash-map","cljs.core/hash-map",303385767,null),null,(1),null)),name_vals_vec))),null,(1),null))))),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,"try","try",-1273693247,null),null,(1),null)),body,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"finally","finally",-1065347064,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","pop-thread-bindings","cljs.core/pop-thread-bindings",-1994943347,null),null,(1),null))))),null,(1),null))))),null,(1),null))], 0)))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.with_local_vars_STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.with_local_vars_STAR_.cljs$lang$applyTo = (function (seq70855){
var G__70864 = cljs.core.first(seq70855);
var seq70855__$1 = cljs.core.next(seq70855);
var G__70865 = cljs.core.first(seq70855__$1);
var seq70855__$2 = cljs.core.next(seq70855__$1);
var G__70866 = cljs.core.first(seq70855__$2);
var seq70855__$3 = cljs.core.next(seq70855__$2);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70864,G__70865,G__70866,seq70855__$3);
}));

/**
 * Non-atomically swaps the value of the volatile as if:
 * (apply f current-value-of-vol args). Returns the value that
 * was swapped in.
 */
sci.impl.namespaces.vswap_BANG_ = (function sci$impl$namespaces$vswap_BANG_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72727 = arguments.length;
var i__4865__auto___72728 = (0);
while(true){
if((i__4865__auto___72728 < len__4864__auto___72727)){
args__4870__auto__.push((arguments[i__4865__auto___72728]));

var G__72729 = (i__4865__auto___72728 + (1));
i__4865__auto___72728 = G__72729;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((4) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((4)),(0),null)):null);
return sci.impl.namespaces.vswap_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),argseq__4871__auto__);
});

(sci.impl.namespaces.vswap_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,vol,f,args){
var v = vol;
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","vreset!","cljs.core/vreset!",-1308835928,null),null,(1),null)),(new cljs.core.List(null,v,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,f,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","deref","cljs.core/deref",1901963335,null),null,(1),null)),(new cljs.core.List(null,v,null,(1),null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([args], 0)))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.vswap_BANG_.cljs$lang$maxFixedArity = (4));

/** @this {Function} */
(sci.impl.namespaces.vswap_BANG_.cljs$lang$applyTo = (function (seq70890){
var G__70891 = cljs.core.first(seq70890);
var seq70890__$1 = cljs.core.next(seq70890);
var G__70892 = cljs.core.first(seq70890__$1);
var seq70890__$2 = cljs.core.next(seq70890__$1);
var G__70893 = cljs.core.first(seq70890__$2);
var seq70890__$3 = cljs.core.next(seq70890__$2);
var G__70894 = cljs.core.first(seq70890__$3);
var seq70890__$4 = cljs.core.next(seq70890__$3);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70891,G__70892,G__70893,G__70894,seq70890__$4);
}));

/**
 * Expands into code that creates a fn that expects to be passed an
 *   object and any args and calls the named instance method on the
 *   object passing the args. Use when you want to treat a JavaScript
 *   method as a first-class fn.
 */
sci.impl.namespaces.memfn = cljs.core.with_meta((function() { 
var sci$impl$namespaces$memfn__delegate = function (_,___$1,name,args){
var t = cljs.core.with_meta(cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("target"),cljs.core.meta(name));
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","fn","cljs.core/fn",-1065745098,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,t,null,(1),null)),args)))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,".",".",1975675962,null),null,(1),null)),(new cljs.core.List(null,t,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,name,null,(1),null)),args))),null,(1),null))], 0)))),null,(1),null))], 0))));
};
var sci$impl$namespaces$memfn = function (_,___$1,name,var_args){
var args = null;
if (arguments.length > 3) {
var G__72742__i = 0, G__72742__a = new Array(arguments.length -  3);
while (G__72742__i < G__72742__a.length) {G__72742__a[G__72742__i] = arguments[G__72742__i + 3]; ++G__72742__i;}
  args = new cljs.core.IndexedSeq(G__72742__a,0,null);
} 
return sci$impl$namespaces$memfn__delegate.call(this,_,___$1,name,args);};
sci$impl$namespaces$memfn.cljs$lang$maxFixedArity = 3;
sci$impl$namespaces$memfn.cljs$lang$applyTo = (function (arglist__72743){
var _ = cljs.core.first(arglist__72743);
arglist__72743 = cljs.core.next(arglist__72743);
var ___$1 = cljs.core.first(arglist__72743);
arglist__72743 = cljs.core.next(arglist__72743);
var name = cljs.core.first(arglist__72743);
var args = cljs.core.rest(arglist__72743);
return sci$impl$namespaces$memfn__delegate(_,___$1,name,args);
});
sci$impl$namespaces$memfn.cljs$core$IFn$_invoke$arity$variadic = sci$impl$namespaces$memfn__delegate;
return sci$impl$namespaces$memfn;
})()
,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("sci","macro","sci/macro",-868536151),true], null));
sci.impl.namespaces.delay_STAR_ = (function sci$impl$namespaces$delay_STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72750 = arguments.length;
var i__4865__auto___72751 = (0);
while(true){
if((i__4865__auto___72751 < len__4864__auto___72750)){
args__4870__auto__.push((arguments[i__4865__auto___72751]));

var G__72752 = (i__4865__auto___72751 + (1));
i__4865__auto___72751 = G__72752;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((2) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((2)),(0),null)):null);
return sci.impl.namespaces.delay_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4871__auto__);
});

(sci.impl.namespaces.delay_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,body){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,"new","new",-444906321,null),null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(null,"cljs.core.Delay","cljs.core.Delay",-1917476777,null),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","fn","cljs.core/fn",-1065745098,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$0()))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body], 0)))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.delay_STAR_.cljs$lang$maxFixedArity = (2));

/** @this {Function} */
(sci.impl.namespaces.delay_STAR_.cljs$lang$applyTo = (function (seq70920){
var G__70921 = cljs.core.first(seq70920);
var seq70920__$1 = cljs.core.next(seq70920);
var G__70922 = cljs.core.first(seq70920__$1);
var seq70920__$2 = cljs.core.next(seq70920__$1);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70921,G__70922,seq70920__$2);
}));

sci.impl.namespaces.defn__STAR_ = (function sci$impl$namespaces$defn__STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72761 = arguments.length;
var i__4865__auto___72762 = (0);
while(true){
if((i__4865__auto___72762 < len__4864__auto___72761)){
args__4870__auto__.push((arguments[i__4865__auto___72762]));

var G__72763 = (i__4865__auto___72762 + (1));
i__4865__auto___72762 = G__72763;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.defn__STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);
});

(sci.impl.namespaces.defn__STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,name,decls){
return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(new cljs.core.Symbol("cljs.core","defn","cljs.core/defn",-1606493717,null),cljs.core.with_meta(name,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(name),new cljs.core.Keyword(null,"private","private",-558947994),true)),decls);
}));

(sci.impl.namespaces.defn__STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.defn__STAR_.cljs$lang$applyTo = (function (seq70924){
var G__70925 = cljs.core.first(seq70924);
var seq70924__$1 = cljs.core.next(seq70924);
var G__70926 = cljs.core.first(seq70924__$1);
var seq70924__$2 = cljs.core.next(seq70924__$1);
var G__70927 = cljs.core.first(seq70924__$2);
var seq70924__$3 = cljs.core.next(seq70924__$2);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70925,G__70926,G__70927,seq70924__$3);
}));

sci.impl.namespaces.condp_STAR_ = (function sci$impl$namespaces$condp_STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72765 = arguments.length;
var i__4865__auto___72766 = (0);
while(true){
if((i__4865__auto___72766 < len__4864__auto___72765)){
args__4870__auto__.push((arguments[i__4865__auto___72766]));

var G__72767 = (i__4865__auto___72766 + (1));
i__4865__auto___72766 = G__72767;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((4) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((4)),(0),null)):null);
return sci.impl.namespaces.condp_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),argseq__4871__auto__);
});

(sci.impl.namespaces.condp_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,pred,expr,clauses){
var gpred = cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("pred__");
var gexpr = cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("expr__");
var emit = (function sci$impl$namespaces$emit(pred__$1,expr__$1,args){
var vec__70961 = cljs.core.split_at(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,">>",">>",-277509267),cljs.core.second(args)))?(3):(2)),args);
var vec__70964 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__70961,(0),null);
var a = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__70964,(0),null);
var b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__70964,(1),null);
var c = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__70964,(2),null);
var clause = vec__70964;
var more = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__70961,(1),null);
var n = cljs.core.count(clause);
if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((0),n)){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"throw","throw",595905694,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,"new","new",-444906321,null),null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol("js","Error","js/Error",-1692659266,null),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","str","cljs.core/str",-1971828991,null),null,(1),null)),(new cljs.core.List(null,"No matching clause: ",null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,expr__$1,null,(1),null))], 0)))),null,(1),null))], 0)))),null,(1),null)))));
} else {
if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((1),n)){
return a;
} else {
if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((2),n)){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,"if","if",1181717262,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,pred__$1,null,(1),null)),(new cljs.core.List(null,a,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,expr__$1,null,(1),null))], 0)))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,b,null,(1),null)),(new cljs.core.List(null,sci$impl$namespaces$emit(pred__$1,expr__$1,more),null,(1),null))], 0))));
} else {
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","if-let","cljs.core/if-let",1346583165,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"p__70954__auto__","p__70954__auto__",-846444572,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,pred__$1,null,(1),null)),(new cljs.core.List(null,a,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,expr__$1,null,(1),null))], 0)))),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,c,null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(null,"p__70954__auto__","p__70954__auto__",-846444572,null),null,(1),null))))),null,(1),null)),(new cljs.core.List(null,sci$impl$namespaces$emit(pred__$1,expr__$1,more),null,(1),null))], 0))));

}
}
}
});
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,gpred,null,(1),null)),(new cljs.core.List(null,pred,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,gexpr,null,(1),null)),(new cljs.core.List(null,expr,null,(1),null))], 0))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,emit(gpred,gexpr,clauses),null,(1),null))], 0))));
}));

(sci.impl.namespaces.condp_STAR_.cljs$lang$maxFixedArity = (4));

/** @this {Function} */
(sci.impl.namespaces.condp_STAR_.cljs$lang$applyTo = (function (seq70955){
var G__70956 = cljs.core.first(seq70955);
var seq70955__$1 = cljs.core.next(seq70955);
var G__70957 = cljs.core.first(seq70955__$1);
var seq70955__$2 = cljs.core.next(seq70955__$1);
var G__70958 = cljs.core.first(seq70955__$2);
var seq70955__$3 = cljs.core.next(seq70955__$2);
var G__70959 = cljs.core.first(seq70955__$3);
var seq70955__$4 = cljs.core.next(seq70955__$3);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70956,G__70957,G__70958,G__70959,seq70955__$4);
}));

sci.impl.namespaces.defonce_STAR_ = (function sci$impl$namespaces$defonce_STAR_(_,___$1,name,expr){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"v__70995__auto__","v__70995__auto__",-915358637,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"def","def",597100991,null),null,(1),null)),(new cljs.core.List(null,name,null,(1),null))))),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","when-not","cljs.core/when-not",-556141047,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"has-root-impl","has-root-impl",-288948659,null),null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(null,"v__70995__auto__","v__70995__auto__",-915358637,null),null,(1),null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,"def","def",597100991,null),null,(1),null)),(new cljs.core.List(null,name,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,expr,null,(1),null))], 0)))),null,(1),null))], 0)))),null,(1),null))], 0))));
});
sci.impl.namespaces.while_STAR_ = (function sci$impl$namespaces$while_STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72797 = arguments.length;
var i__4865__auto___72798 = (0);
while(true){
if((i__4865__auto___72798 < len__4864__auto___72797)){
args__4870__auto__.push((arguments[i__4865__auto___72798]));

var G__72799 = (i__4865__auto___72798 + (1));
i__4865__auto___72798 = G__72799;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.while_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);
});

(sci.impl.namespaces.while_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,test,body){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","loop","cljs.core/loop",-1829423021,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$0()))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","when","cljs.core/when",120293186,null),null,(1),null)),(new cljs.core.List(null,test,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body,(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,new cljs.core.Symbol(null,"recur","recur",1202958259,null),null,(1),null))))),null,(1),null))], 0)))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.while_STAR_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.while_STAR_.cljs$lang$applyTo = (function (seq70998){
var G__70999 = cljs.core.first(seq70998);
var seq70998__$1 = cljs.core.next(seq70998);
var G__71000 = cljs.core.first(seq70998__$1);
var seq70998__$2 = cljs.core.next(seq70998__$1);
var G__71001 = cljs.core.first(seq70998__$2);
var seq70998__$3 = cljs.core.next(seq70998__$2);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__70999,G__71000,G__71001,seq70998__$3);
}));

sci.impl.namespaces.double_dot = (function sci$impl$namespaces$double_dot(var_args){
var G__71037 = arguments.length;
switch (G__71037) {
case 4:
return sci.impl.namespaces.double_dot.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
default:
var args_arr__4885__auto__ = [];
var len__4864__auto___72802 = arguments.length;
var i__4865__auto___72804 = (0);
while(true){
if((i__4865__auto___72804 < len__4864__auto___72802)){
args_arr__4885__auto__.push((arguments[i__4865__auto___72804]));

var G__72805 = (i__4865__auto___72804 + (1));
i__4865__auto___72804 = G__72805;
continue;
} else {
}
break;
}

var argseq__4886__auto__ = (new cljs.core.IndexedSeq(args_arr__4885__auto__.slice((4)),(0),null));
return sci.impl.namespaces.double_dot.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),argseq__4886__auto__);

}
});

(sci.impl.namespaces.double_dot.cljs$core$IFn$_invoke$arity$4 = (function (_,___$1,x,form){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,".",".",1975675962,null),null,(1),null)),(new cljs.core.List(null,x,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,form,null,(1),null))], 0))));
}));

(sci.impl.namespaces.double_dot.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,x,form,more){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,"..","..",-300507420,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,".",".",1975675962,null),null,(1),null)),(new cljs.core.List(null,x,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,form,null,(1),null))], 0)))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([more], 0))));
}));

/** @this {Function} */
(sci.impl.namespaces.double_dot.cljs$lang$applyTo = (function (seq71032){
var G__71033 = cljs.core.first(seq71032);
var seq71032__$1 = cljs.core.next(seq71032);
var G__71034 = cljs.core.first(seq71032__$1);
var seq71032__$2 = cljs.core.next(seq71032__$1);
var G__71035 = cljs.core.first(seq71032__$2);
var seq71032__$3 = cljs.core.next(seq71032__$2);
var G__71036 = cljs.core.first(seq71032__$3);
var seq71032__$4 = cljs.core.next(seq71032__$3);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__71033,G__71034,G__71035,G__71036,seq71032__$4);
}));

(sci.impl.namespaces.double_dot.cljs$lang$maxFixedArity = (4));

sci.impl.namespaces.lazy_cat_STAR_ = (function sci$impl$namespaces$lazy_cat_STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72817 = arguments.length;
var i__4865__auto___72818 = (0);
while(true){
if((i__4865__auto___72818 < len__4864__auto___72817)){
args__4870__auto__.push((arguments[i__4865__auto___72818]));

var G__72819 = (i__4865__auto___72818 + (1));
i__4865__auto___72818 = G__72819;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((2) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((2)),(0),null)):null);
return sci.impl.namespaces.lazy_cat_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4871__auto__);
});

(sci.impl.namespaces.lazy_cat_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,colls){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","concat","cljs.core/concat",-1133584918,null),null,(1),null)),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__71041_SHARP_){
return (new cljs.core.List(null,new cljs.core.Symbol("cljs.core","lazy-seq","cljs.core/lazy-seq",627681297,null),(new cljs.core.List(null,p1__71041_SHARP_,null,(1),null)),(2),null));
}),colls))));
}));

(sci.impl.namespaces.lazy_cat_STAR_.cljs$lang$maxFixedArity = (2));

/** @this {Function} */
(sci.impl.namespaces.lazy_cat_STAR_.cljs$lang$applyTo = (function (seq71042){
var G__71043 = cljs.core.first(seq71042);
var seq71042__$1 = cljs.core.next(seq71042);
var G__71044 = cljs.core.first(seq71042__$1);
var seq71042__$2 = cljs.core.next(seq71042__$1);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__71043,G__71044,seq71042__$2);
}));

sci.impl.namespaces.has_root_impl = (function sci$impl$namespaces$has_root_impl(sci_var){
return sci.impl.vars.hasRoot(sci_var);
});
sci.impl.namespaces.sci_ns_name = (function sci$impl$namespaces$sci_ns_name(ns){
return ns.sci$impl$types$HasName$getName$arity$1(null);
});
sci.impl.namespaces.sci_alias = (function sci$impl$namespaces$sci_alias(ctx,alias_sym,ns_sym){
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,"env","env",-1815813235).cljs$core$IFn$_invoke$arity$1(ctx),(function (env){
var current_ns = sci.impl.utils.current_ns_name();
return cljs.core.assoc_in(env,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"namespaces","namespaces",-1444157469),current_ns,new cljs.core.Keyword(null,"aliases","aliases",1346874714),alias_sym], null),ns_sym);
}));

return null;
});
sci.impl.namespaces.sci_create_ns = (function sci$impl$namespaces$sci_create_ns(ctx,ns_sym){
return sci.impl.utils.namespace_object(new cljs.core.Keyword(null,"env","env",-1815813235).cljs$core$IFn$_invoke$arity$1(ctx),ns_sym,true,null);
});
sci.impl.namespaces.sci_find_ns = (function sci$impl$namespaces$sci_find_ns(ctx,ns_sym){
if((ns_sym instanceof cljs.core.Symbol)){
} else {
throw (new Error("Assert failed: (symbol? ns-sym)"));
}

return sci.impl.utils.namespace_object(new cljs.core.Keyword(null,"env","env",-1815813235).cljs$core$IFn$_invoke$arity$1(ctx),ns_sym,false,null);
});
sci.impl.namespaces.sci_the_ns = (function sci$impl$namespaces$sci_the_ns(ctx,x){
if((x instanceof sci.lang.Namespace)){
return x;
} else {
var or__4253__auto__ = sci.impl.namespaces.sci_find_ns(ctx,x);
if(cljs.core.truth_(or__4253__auto__)){
return or__4253__auto__;
} else {
throw (new Error(["No namespace: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(x)," found"].join('')));
}
}
});
sci.impl.namespaces.sci_ns_aliases = (function sci$impl$namespaces$sci_ns_aliases(ctx,sci_ns){
var sci_ns__$1 = sci.impl.namespaces.sci_the_ns(ctx,sci_ns);
var name = sci.impl.namespaces.sci_ns_name(sci_ns__$1);
var aliases = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(new cljs.core.Keyword(null,"env","env",-1815813235).cljs$core$IFn$_invoke$arity$1(ctx)),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"namespaces","namespaces",-1444157469),name,new cljs.core.Keyword(null,"aliases","aliases",1346874714)], null));
return cljs.core.zipmap(cljs.core.keys(aliases),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (sym){
return sci.lang.__GT_Namespace(sym,null);
}),cljs.core.vals(aliases)));
});
sci.impl.namespaces.clean_ns = (function sci$impl$namespaces$clean_ns(m){
return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(m,new cljs.core.Keyword(null,"aliases","aliases",1346874714),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,"imports","imports",-1249933394),new cljs.core.Keyword(null,"obj","obj",981763962),new cljs.core.Keyword(null,"refer","refer",-964295553),new cljs.core.Keyword(null,"refers","refers",158076809)], 0));
});
sci.impl.namespaces.sci_ns_interns = (function sci$impl$namespaces$sci_ns_interns(ctx,sci_ns){
var sci_ns__$1 = sci.impl.namespaces.sci_the_ns(ctx,sci_ns);
var name = sci.impl.namespaces.sci_ns_name(sci_ns__$1);
var m = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(new cljs.core.Keyword(null,"env","env",-1815813235).cljs$core$IFn$_invoke$arity$1(ctx)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"namespaces","namespaces",-1444157469),name], null));
var m__$1 = sci.impl.namespaces.clean_ns(m);
return m__$1;
});
sci.impl.namespaces.sci_ns_publics = (function sci$impl$namespaces$sci_ns_publics(ctx,sci_ns){
var sci_ns__$1 = sci.impl.namespaces.sci_the_ns(ctx,sci_ns);
var name = sci.impl.namespaces.sci_ns_name(sci_ns__$1);
var m = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(new cljs.core.Keyword(null,"env","env",-1815813235).cljs$core$IFn$_invoke$arity$1(ctx)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"namespaces","namespaces",-1444157469),name], null));
var m__$1 = sci.impl.namespaces.clean_ns(m);
return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.keep.cljs$core$IFn$_invoke$arity$2((function (p__71110){
var vec__71111 = p__71110;
var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__71111,(0),null);
var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__71111,(1),null);
if(cljs.core.truth_(new cljs.core.Keyword(null,"private","private",-558947994).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(v)))){
return null;
} else {
return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,v], null);
}
}),m__$1));
});
sci.impl.namespaces.sci_ns_imports = (function sci$impl$namespaces$sci_ns_imports(ctx,sci_ns){
var sci_ns__$1 = sci.impl.namespaces.sci_the_ns(ctx,sci_ns);
var name = sci.impl.namespaces.sci_ns_name(sci_ns__$1);
var env = cljs.core.deref(new cljs.core.Keyword(null,"env","env",-1815813235).cljs$core$IFn$_invoke$arity$1(ctx));
var global_imports = new cljs.core.Keyword(null,"imports","imports",-1249933394).cljs$core$IFn$_invoke$arity$1(env);
var namespace_imports = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(env,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"namespaces","namespaces",-1444157469),name,new cljs.core.Keyword(null,"imports","imports",-1249933394)], null));
var class_opts = new cljs.core.Keyword(null,"class->opts","class->opts",2061906477).cljs$core$IFn$_invoke$arity$1(env);
var all_aliased = cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.keys(global_imports),cljs.core.keys(namespace_imports));
var all_imports = cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.vals(global_imports),cljs.core.vals(namespace_imports));
return cljs.core.zipmap(all_aliased,cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,"class","class",-2030961996),(function (p1__71114_SHARP_){
return cljs.core.get.cljs$core$IFn$_invoke$arity$2(class_opts,p1__71114_SHARP_);
})),all_imports));
});
sci.impl.namespaces.sci_ns_refers = (function sci$impl$namespaces$sci_ns_refers(ctx,sci_ns){
var sci_ns__$1 = sci.impl.namespaces.sci_the_ns(ctx,sci_ns);
var name = sci.impl.namespaces.sci_ns_name(sci_ns__$1);
var env = cljs.core.deref(new cljs.core.Keyword(null,"env","env",-1815813235).cljs$core$IFn$_invoke$arity$1(ctx));
var refers = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(env,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"namespaces","namespaces",-1444157469),name,new cljs.core.Keyword(null,"refers","refers",158076809)], null));
var clojure_core = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(env,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"namespaces","namespaces",-1444157469),new cljs.core.Symbol(null,"clojure.core","clojure.core",-189332625,null)], null));
var clojure_core__$1 = sci.impl.namespaces.clean_ns(clojure_core);
return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([clojure_core__$1,refers], 0));
});
sci.impl.namespaces.sci_ns_map = (function sci$impl$namespaces$sci_ns_map(ctx,sci_ns){
return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([sci.impl.namespaces.sci_ns_interns(ctx,sci_ns),sci.impl.namespaces.sci_ns_refers(ctx,sci_ns),sci.impl.namespaces.sci_ns_imports(ctx,sci_ns)], 0));
});
sci.impl.namespaces.sci_ns_unmap = (function sci$impl$namespaces$sci_ns_unmap(ctx,sci_ns,sym){
if((sym instanceof cljs.core.Symbol)){
} else {
throw (new Error("Assert failed: (symbol? sym)"));
}

cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,"env","env",-1815813235).cljs$core$IFn$_invoke$arity$1(ctx),(function (env){
var sci_ns__$1 = sci.impl.namespaces.sci_the_ns(ctx,sci_ns);
var name = sci.impl.namespaces.sci_ns_name(sci_ns__$1);
return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(env,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"namespaces","namespaces",-1444157469),name], null),(function (the_ns_map){
if(cljs.core.contains_QMARK_(new cljs.core.Keyword(null,"refers","refers",158076809).cljs$core$IFn$_invoke$arity$1(the_ns_map),sym)){
return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(cljs.core.update.cljs$core$IFn$_invoke$arity$4(the_ns_map,new cljs.core.Keyword(null,"refers","refers",158076809),cljs.core.dissoc,sym),the_ns_map,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([sym], 0));
} else {
if(cljs.core.contains_QMARK_(the_ns_map,sym)){
return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(the_ns_map,sym);
} else {
if(((cljs.core.contains_QMARK_(new cljs.core.Keyword(null,"imports","imports",-1249933394).cljs$core$IFn$_invoke$arity$1(env),sym)) || (cljs.core.contains_QMARK_(new cljs.core.Keyword(null,"imports","imports",-1249933394).cljs$core$IFn$_invoke$arity$1(the_ns_map),sym)))){
return cljs.core.update.cljs$core$IFn$_invoke$arity$5(the_ns_map,new cljs.core.Keyword(null,"imports","imports",-1249933394),cljs.core.assoc,sym,null);
} else {
return the_ns_map;

}
}
}
}));
}));

return null;
});
sci.impl.namespaces.sci_ns_unalias = (function sci$impl$namespaces$sci_ns_unalias(ctx,sci_ns,sym){
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,"env","env",-1815813235).cljs$core$IFn$_invoke$arity$1(ctx),(function (env){
return cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(env,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"namespaces","namespaces",-1444157469),sci.impl.namespaces.sci_ns_name(sci.impl.namespaces.sci_the_ns(ctx,sci_ns)),new cljs.core.Keyword(null,"aliases","aliases",1346874714)], null),cljs.core.dissoc,sym);
}));

return null;
});
sci.impl.namespaces.sci_all_ns = (function sci$impl$namespaces$sci_all_ns(ctx){
var env = new cljs.core.Keyword(null,"env","env",-1815813235).cljs$core$IFn$_invoke$arity$1(ctx);
var namespaces = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(env),new cljs.core.Keyword(null,"namespaces","namespaces",-1444157469));
var public$ = cljs.core.remove.cljs$core$IFn$_invoke$arity$2((function (p__71153){
var vec__71154 = p__71153;
var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__71154,(0),null);
var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__71154,(1),null);
return new cljs.core.Keyword(null,"private","private",-558947994).cljs$core$IFn$_invoke$arity$1(v);
}),namespaces);
return cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__71152_SHARP_){
return sci.impl.utils.namespace_object(env,p1__71152_SHARP_,true,null);
}),cljs.core.keys(public$));
});
sci.impl.namespaces.sci_remove_ns = (function sci$impl$namespaces$sci_remove_ns(ctx,sym){
var env = new cljs.core.Keyword(null,"env","env",-1815813235).cljs$core$IFn$_invoke$arity$1(ctx);
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(env,cljs.core.update,new cljs.core.Keyword(null,"namespaces","namespaces",-1444157469),cljs.core.dissoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([sym], 0));

return null;
});
sci.impl.namespaces.sci_intern = (function sci$impl$namespaces$sci_intern(var_args){
var G__71158 = arguments.length;
switch (G__71158) {
case 3:
return sci.impl.namespaces.sci_intern.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return sci.impl.namespaces.sci_intern.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(sci.impl.namespaces.sci_intern.cljs$core$IFn$_invoke$arity$3 = (function (ctx,ns,var_sym){
var ns__$1 = sci.impl.namespaces.sci_the_ns(ctx,ns);
var ns_name = sci.impl.namespaces.sci_ns_name(ns__$1);
var env = new cljs.core.Keyword(null,"env","env",-1815813235).cljs$core$IFn$_invoke$arity$1(ctx);
var or__4253__auto__ = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(env),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"namespaces","namespaces",-1444157469),ns_name,var_sym], null));
if(cljs.core.truth_(or__4253__auto__)){
return or__4253__auto__;
} else {
var var_name = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name),cljs.core.str.cljs$core$IFn$_invoke$arity$1(var_sym));
var new_var = sci.impl.utils.new_var.cljs$core$IFn$_invoke$arity$3(var_name,null,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(var_sym),new cljs.core.Keyword(null,"ns","ns",441598760),ns__$1));
sci.impl.vars.unbind(new_var);

cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(env,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"namespaces","namespaces",-1444157469),ns_name,var_sym], null),new_var);

return new_var;
}
}));

(sci.impl.namespaces.sci_intern.cljs$core$IFn$_invoke$arity$4 = (function (ctx,ns,var_sym,val){
var ns__$1 = sci.impl.namespaces.sci_the_ns(ctx,ns);
var ns_name = sci.impl.namespaces.sci_ns_name(ns__$1);
var env = new cljs.core.Keyword(null,"env","env",-1815813235).cljs$core$IFn$_invoke$arity$1(ctx);
var or__4253__auto__ = (function (){var temp__5753__auto__ = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(env),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"namespaces","namespaces",-1444157469),ns_name,var_sym], null));
if(cljs.core.truth_(temp__5753__auto__)){
var v = temp__5753__auto__;
sci.impl.vars.bindRoot(v,val);

return v;
} else {
return null;
}
})();
if(cljs.core.truth_(or__4253__auto__)){
return or__4253__auto__;
} else {
var var_name = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name),cljs.core.str.cljs$core$IFn$_invoke$arity$1(var_sym));
var new_var = sci.impl.utils.new_var.cljs$core$IFn$_invoke$arity$3(var_name,val,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(var_sym),new cljs.core.Keyword(null,"ns","ns",441598760),ns__$1));
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(env,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"namespaces","namespaces",-1444157469),ns_name,var_sym], null),new_var);

return new_var;
}
}));

(sci.impl.namespaces.sci_intern.cljs$lang$maxFixedArity = 4);

sci.impl.namespaces.sci_bound_QMARK_ = (function sci$impl$namespaces$sci_bound_QMARK_(sci_var){
var or__4253__auto__ = sci.impl.vars.hasRoot(sci_var);
if(cljs.core.truth_(or__4253__auto__)){
return or__4253__auto__;
} else {
return (((!((sci.impl.vars.get_thread_binding(sci_var) == null)))) || (false));
}
});
sci.impl.namespaces.require = (function sci$impl$namespaces$require(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72862 = arguments.length;
var i__4865__auto___72863 = (0);
while(true){
if((i__4865__auto___72863 < len__4864__auto___72862)){
args__4870__auto__.push((arguments[i__4865__auto___72863]));

var G__72864 = (i__4865__auto___72863 + (1));
i__4865__auto___72863 = G__72864;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((1) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((1)),(0),null)):null);
return sci.impl.namespaces.require.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4871__auto__);
});

(sci.impl.namespaces.require.cljs$core$IFn$_invoke$arity$variadic = (function (sci_ctx,args){
return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(sci.impl.utils.eval_require_state),sci_ctx,args);
}));

(sci.impl.namespaces.require.cljs$lang$maxFixedArity = (1));

/** @this {Function} */
(sci.impl.namespaces.require.cljs$lang$applyTo = (function (seq71192){
var G__71199 = cljs.core.first(seq71192);
var seq71192__$1 = cljs.core.next(seq71192);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__71199,seq71192__$1);
}));

sci.impl.namespaces.use = (function sci$impl$namespaces$use(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72865 = arguments.length;
var i__4865__auto___72866 = (0);
while(true){
if((i__4865__auto___72866 < len__4864__auto___72865)){
args__4870__auto__.push((arguments[i__4865__auto___72866]));

var G__72868 = (i__4865__auto___72866 + (1));
i__4865__auto___72866 = G__72868;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((1) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((1)),(0),null)):null);
return sci.impl.namespaces.use.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4871__auto__);
});

(sci.impl.namespaces.use.cljs$core$IFn$_invoke$arity$variadic = (function (sci_ctx,args){
return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(sci.impl.utils.eval_use_state),sci_ctx,args);
}));

(sci.impl.namespaces.use.cljs$lang$maxFixedArity = (1));

/** @this {Function} */
(sci.impl.namespaces.use.cljs$lang$applyTo = (function (seq71200){
var G__71201 = cljs.core.first(seq71200);
var seq71200__$1 = cljs.core.next(seq71200);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__71201,seq71200__$1);
}));

sci.impl.namespaces.sci_resolve = (function sci$impl$namespaces$sci_resolve(var_args){
var G__71203 = arguments.length;
switch (G__71203) {
case 2:
return sci.impl.namespaces.sci_resolve.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return sci.impl.namespaces.sci_resolve.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(sci.impl.namespaces.sci_resolve.cljs$core$IFn$_invoke$arity$2 = (function (sci_ctx,sym){
var G__71205 = sci_ctx;
var G__71206 = new cljs.core.Keyword(null,"bindings","bindings",1271397192).cljs$core$IFn$_invoke$arity$1(sci_ctx);
var G__71207 = sym;
var fexpr__71204 = cljs.core.deref(sci.impl.utils.eval_resolve_state);
return (fexpr__71204.cljs$core$IFn$_invoke$arity$3 ? fexpr__71204.cljs$core$IFn$_invoke$arity$3(G__71205,G__71206,G__71207) : fexpr__71204.call(null,G__71205,G__71206,G__71207));
}));

(sci.impl.namespaces.sci_resolve.cljs$core$IFn$_invoke$arity$3 = (function (sci_ctx,env,sym){
var G__71209 = sci_ctx;
var G__71210 = new cljs.core.Keyword(null,"bindings","bindings",1271397192).cljs$core$IFn$_invoke$arity$1(sci_ctx);
var G__71211 = env;
var G__71212 = sym;
var fexpr__71208 = cljs.core.deref(sci.impl.utils.eval_resolve_state);
return (fexpr__71208.cljs$core$IFn$_invoke$arity$4 ? fexpr__71208.cljs$core$IFn$_invoke$arity$4(G__71209,G__71210,G__71211,G__71212) : fexpr__71208.call(null,G__71209,G__71210,G__71211,G__71212));
}));

(sci.impl.namespaces.sci_resolve.cljs$lang$maxFixedArity = 3);

sci.impl.namespaces.sci_refer = (function sci$impl$namespaces$sci_refer(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72870 = arguments.length;
var i__4865__auto___72872 = (0);
while(true){
if((i__4865__auto___72872 < len__4864__auto___72870)){
args__4870__auto__.push((arguments[i__4865__auto___72872]));

var G__72873 = (i__4865__auto___72872 + (1));
i__4865__auto___72872 = G__72873;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((1) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((1)),(0),null)):null);
return sci.impl.namespaces.sci_refer.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4871__auto__);
});

(sci.impl.namespaces.sci_refer.cljs$core$IFn$_invoke$arity$variadic = (function (sci_ctx,args){
return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(sci.impl.utils.eval_refer_state),sci_ctx,args);
}));

(sci.impl.namespaces.sci_refer.cljs$lang$maxFixedArity = (1));

/** @this {Function} */
(sci.impl.namespaces.sci_refer.cljs$lang$applyTo = (function (seq71213){
var G__71214 = cljs.core.first(seq71213);
var seq71213__$1 = cljs.core.next(seq71213);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__71214,seq71213__$1);
}));

sci.impl.namespaces.sci_refer_clojure = (function sci$impl$namespaces$sci_refer_clojure(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72888 = arguments.length;
var i__4865__auto___72889 = (0);
while(true){
if((i__4865__auto___72889 < len__4864__auto___72888)){
args__4870__auto__.push((arguments[i__4865__auto___72889]));

var G__72890 = (i__4865__auto___72889 + (1));
i__4865__auto___72889 = G__72890;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((2) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((2)),(0),null)):null);
return sci.impl.namespaces.sci_refer_clojure.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4871__auto__);
});

(sci.impl.namespaces.sci_refer_clojure.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,filters){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","refer","cljs.core/refer",269577817,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"quote","quote",1377916282,null),null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(null,"clojure.core","clojure.core",-189332625,null),null,(1),null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([filters], 0))));
}));

(sci.impl.namespaces.sci_refer_clojure.cljs$lang$maxFixedArity = (2));

/** @this {Function} */
(sci.impl.namespaces.sci_refer_clojure.cljs$lang$applyTo = (function (seq71216){
var G__71218 = cljs.core.first(seq71216);
var seq71216__$1 = cljs.core.next(seq71216);
var G__71219 = cljs.core.first(seq71216__$1);
var seq71216__$2 = cljs.core.next(seq71216__$1);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__71218,G__71219,seq71216__$2);
}));

sci.impl.namespaces.sci_ns_resolve = (function sci$impl$namespaces$sci_ns_resolve(var_args){
var G__71260 = arguments.length;
switch (G__71260) {
case 3:
return sci.impl.namespaces.sci_ns_resolve.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return sci.impl.namespaces.sci_ns_resolve.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(sci.impl.namespaces.sci_ns_resolve.cljs$core$IFn$_invoke$arity$3 = (function (sci_ctx,ns,sym){
sci.impl.vars.push_thread_bindings(cljs.core.PersistentArrayMap.createAsIfByAssoc([sci.impl.utils.current_ns,sci.impl.namespaces.sci_the_ns(sci_ctx,ns)]));

try{return sci.impl.namespaces.sci_resolve.cljs$core$IFn$_invoke$arity$2(sci_ctx,sym);
}finally {sci.impl.vars.pop_thread_bindings();
}}));

(sci.impl.namespaces.sci_ns_resolve.cljs$core$IFn$_invoke$arity$4 = (function (sci_ctx,ns,env,sym){
sci.impl.vars.push_thread_bindings(cljs.core.PersistentArrayMap.createAsIfByAssoc([sci.impl.utils.current_ns,sci.impl.namespaces.sci_the_ns(sci_ctx,ns)]));

try{return sci.impl.namespaces.sci_resolve.cljs$core$IFn$_invoke$arity$3(sci_ctx,env,sym);
}finally {sci.impl.vars.pop_thread_bindings();
}}));

(sci.impl.namespaces.sci_ns_resolve.cljs$lang$maxFixedArity = 4);

sci.impl.namespaces.sci_requiring_resolve = (function sci$impl$namespaces$sci_requiring_resolve(sci_ctx,sym){
if(cljs.core.qualified_symbol_QMARK_(sym)){
var or__4253__auto__ = sci.impl.namespaces.sci_resolve.cljs$core$IFn$_invoke$arity$2(sci_ctx,sym);
if(cljs.core.truth_(or__4253__auto__)){
return or__4253__auto__;
} else {
var namespace = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace(sym));
sci.impl.namespaces.require.cljs$core$IFn$_invoke$arity$variadic(sci_ctx,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([namespace], 0));

return sci.impl.namespaces.sci_resolve.cljs$core$IFn$_invoke$arity$2(sci_ctx,sym);
}
} else {
throw (new Error(["Not a qualified symbol: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym)].join('')));
}
});
sci.impl.namespaces.sci_find_var = (function sci$impl$namespaces$sci_find_var(sci_ctx,sym){
if(cljs.core.qualified_symbol_QMARK_(sym)){
var nsname = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace(sym));
var sym_SINGLEQUOTE_ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.name(sym));
var temp__5751__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,"namespaces","namespaces",-1444157469).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(null,"env","env",-1815813235).cljs$core$IFn$_invoke$arity$1(sci_ctx))),nsname);
if(cljs.core.truth_(temp__5751__auto__)){
var namespace = temp__5751__auto__;
return cljs.core.get.cljs$core$IFn$_invoke$arity$2(namespace,sym_SINGLEQUOTE_);
} else {
throw (new Error(["No such namespace: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(nsname)].join('')));
}
} else {
throw (new Error(["Not a qualified symbol: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym)].join('')));
}
});
/**
 * Takes a map of Var/value pairs. Installs for the given Vars the associated
 *   values as thread-local bindings. Then calls f with the supplied arguments.
 *   Pops the installed bindings after f returned. Returns whatever f returns.
 */
sci.impl.namespaces.with_bindings_STAR_ = (function sci$impl$namespaces$with_bindings_STAR_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72893 = arguments.length;
var i__4865__auto___72894 = (0);
while(true){
if((i__4865__auto___72894 < len__4864__auto___72893)){
args__4870__auto__.push((arguments[i__4865__auto___72894]));

var G__72895 = (i__4865__auto___72894 + (1));
i__4865__auto___72894 = G__72895;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((2) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((2)),(0),null)):null);
return sci.impl.namespaces.with_bindings_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4871__auto__);
});

(sci.impl.namespaces.with_bindings_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (binding_map,f,args){
sci.impl.vars.push_thread_bindings(binding_map);

try{return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,args);
}finally {sci.impl.vars.pop_thread_bindings();
}}));

(sci.impl.namespaces.with_bindings_STAR_.cljs$lang$maxFixedArity = (2));

/** @this {Function} */
(sci.impl.namespaces.with_bindings_STAR_.cljs$lang$applyTo = (function (seq71261){
var G__71262 = cljs.core.first(seq71261);
var seq71261__$1 = cljs.core.next(seq71261);
var G__71263 = cljs.core.first(seq71261__$1);
var seq71261__$2 = cljs.core.next(seq71261__$1);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__71262,G__71263,seq71261__$2);
}));

sci.impl.namespaces.sci_with_bindings = (function sci$impl$namespaces$sci_with_bindings(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72912 = arguments.length;
var i__4865__auto___72913 = (0);
while(true){
if((i__4865__auto___72913 < len__4864__auto___72912)){
args__4870__auto__.push((arguments[i__4865__auto___72913]));

var G__72914 = (i__4865__auto___72913 + (1));
i__4865__auto___72913 = G__72914;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.sci_with_bindings.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);
});

(sci.impl.namespaces.sci_with_bindings.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,binding_map,body){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","with-bindings*","cljs.core/with-bindings*",-768558084,null),null,(1),null)),(new cljs.core.List(null,binding_map,null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","fn","cljs.core/fn",-1065745098,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$0()))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body], 0)))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.sci_with_bindings.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.sci_with_bindings.cljs$lang$applyTo = (function (seq71265){
var G__71266 = cljs.core.first(seq71265);
var seq71265__$1 = cljs.core.next(seq71265);
var G__71267 = cljs.core.first(seq71265__$1);
var seq71265__$2 = cljs.core.next(seq71265__$1);
var G__71268 = cljs.core.first(seq71265__$2);
var seq71265__$3 = cljs.core.next(seq71265__$2);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__71266,G__71267,G__71268,seq71265__$3);
}));

sci.impl.namespaces.sci_binding = (function sci$impl$namespaces$sci_binding(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72915 = arguments.length;
var i__4865__auto___72916 = (0);
while(true){
if((i__4865__auto___72916 < len__4864__auto___72915)){
args__4870__auto__.push((arguments[i__4865__auto___72916]));

var G__72917 = (i__4865__auto___72916 + (1));
i__4865__auto___72916 = G__72917;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.sci_binding.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);
});

(sci.impl.namespaces.sci_binding.cljs$core$IFn$_invoke$arity$variadic = (function (form,_,bindings,body){
if(cljs.core.vector_QMARK_(bindings)){
} else {
sci.impl.utils.throw_error_with_location.cljs$core$IFn$_invoke$arity$2("binding requires a vector for its bindings",form);
}

if(cljs.core.even_QMARK_(cljs.core.count(bindings))){
} else {
sci.impl.utils.throw_error_with_location.cljs$core$IFn$_invoke$arity$2("binding requires an even number of forms in binding vector",form);
}

var var_ize = (function (var_vals){
var ret = cljs.core.PersistentVector.EMPTY;
var vvs = cljs.core.seq(var_vals);
while(true){
if(vvs){
var G__72918 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"var","var",870848730,null),null,(1),null)),(new cljs.core.List(null,cljs.core.first(vvs),null,(1),null)))))),cljs.core.second(vvs));
var G__72919 = cljs.core.next(cljs.core.next(vvs));
ret = G__72918;
vvs = G__72919;
continue;
} else {
return cljs.core.seq(ret);
}
break;
}
});
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","let","cljs.core/let",-308701135,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$0()))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","push-thread-bindings","cljs.core/push-thread-bindings",-703482450,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","hash-map","cljs.core/hash-map",303385767,null),null,(1),null)),var_ize(bindings)))),null,(1),null))))),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(null,"try","try",-1273693247,null),null,(1),null)),body,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"finally","finally",-1065347064,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","pop-thread-bindings","cljs.core/pop-thread-bindings",-1994943347,null),null,(1),null))))),null,(1),null))))),null,(1),null))], 0)))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.sci_binding.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.sci_binding.cljs$lang$applyTo = (function (seq71311){
var G__71312 = cljs.core.first(seq71311);
var seq71311__$1 = cljs.core.next(seq71311);
var G__71313 = cljs.core.first(seq71311__$1);
var seq71311__$2 = cljs.core.next(seq71311__$1);
var G__71314 = cljs.core.first(seq71311__$2);
var seq71311__$3 = cljs.core.next(seq71311__$2);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__71312,G__71313,G__71314,seq71311__$3);
}));

/**
 * Returns a function, which will install the same bindings in effect as in
 *   the thread at the time bound-fn* was called and then call f with any given
 *   arguments. This may be used to define a helper function which runs on a
 *   different thread, but needs the same bindings in place.
 */
sci.impl.namespaces.bound_fn_STAR_ = (function sci$impl$namespaces$bound_fn_STAR_(f){
var bindings = sci.impl.vars.get_thread_bindings();
return (function() { 
var G__72920__delegate = function (args){
return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(sci.impl.namespaces.with_bindings_STAR_,bindings,f,args);
};
var G__72920 = function (var_args){
var args = null;
if (arguments.length > 0) {
var G__72921__i = 0, G__72921__a = new Array(arguments.length -  0);
while (G__72921__i < G__72921__a.length) {G__72921__a[G__72921__i] = arguments[G__72921__i + 0]; ++G__72921__i;}
  args = new cljs.core.IndexedSeq(G__72921__a,0,null);
} 
return G__72920__delegate.call(this,args);};
G__72920.cljs$lang$maxFixedArity = 0;
G__72920.cljs$lang$applyTo = (function (arglist__72922){
var args = cljs.core.seq(arglist__72922);
return G__72920__delegate(args);
});
G__72920.cljs$core$IFn$_invoke$arity$variadic = G__72920__delegate;
return G__72920;
})()
;
});
/**
 * Returns a function defined by the given fntail, which will install the
 *   same bindings in effect as in the thread at the time bound-fn was called.
 *   This may be used to define a helper function which runs on a different
 *   thread, but needs the same bindings in place.
 */
sci.impl.namespaces.sci_bound_fn = (function sci$impl$namespaces$sci_bound_fn(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72923 = arguments.length;
var i__4865__auto___72924 = (0);
while(true){
if((i__4865__auto___72924 < len__4864__auto___72923)){
args__4870__auto__.push((arguments[i__4865__auto___72924]));

var G__72925 = (i__4865__auto___72924 + (1));
i__4865__auto___72924 = G__72925;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((2) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((2)),(0),null)):null);
return sci.impl.namespaces.sci_bound_fn.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4871__auto__);
});

(sci.impl.namespaces.sci_bound_fn.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,fntail){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","bound-fn*","cljs.core/bound-fn*",-556238942,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","fn","cljs.core/fn",-1065745098,null),null,(1),null)),fntail))),null,(1),null)))));
}));

(sci.impl.namespaces.sci_bound_fn.cljs$lang$maxFixedArity = (2));

/** @this {Function} */
(sci.impl.namespaces.sci_bound_fn.cljs$lang$applyTo = (function (seq71315){
var G__71316 = cljs.core.first(seq71315);
var seq71315__$1 = cljs.core.next(seq71315);
var G__71317 = cljs.core.first(seq71315__$1);
var seq71315__$2 = cljs.core.next(seq71315__$1);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__71316,G__71317,seq71315__$2);
}));

sci.impl.namespaces.sci_thread_bound_QMARK_ = (function sci$impl$namespaces$sci_thread_bound_QMARK_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72927 = arguments.length;
var i__4865__auto___72928 = (0);
while(true){
if((i__4865__auto___72928 < len__4864__auto___72927)){
args__4870__auto__.push((arguments[i__4865__auto___72928]));

var G__72929 = (i__4865__auto___72928 + (1));
i__4865__auto___72928 = G__72929;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((0) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((0)),(0),null)):null);
return sci.impl.namespaces.sci_thread_bound_QMARK_.cljs$core$IFn$_invoke$arity$variadic(argseq__4871__auto__);
});

(sci.impl.namespaces.sci_thread_bound_QMARK_.cljs$core$IFn$_invoke$arity$variadic = (function (vars){
return cljs.core.every_QMARK_((function (p1__71320_SHARP_){
return sci.impl.vars.get_thread_binding(p1__71320_SHARP_);
}),vars);
}));

(sci.impl.namespaces.sci_thread_bound_QMARK_.cljs$lang$maxFixedArity = (0));

/** @this {Function} */
(sci.impl.namespaces.sci_thread_bound_QMARK_.cljs$lang$applyTo = (function (seq71321){
var self__4852__auto__ = this;
return self__4852__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq71321));
}));

sci.impl.namespaces.sci_with_redefs_fn = (function sci$impl$namespaces$sci_with_redefs_fn(binding_map,func){
var root_bind = (function (m){
var seq__71325 = cljs.core.seq(m);
var chunk__71326 = null;
var count__71327 = (0);
var i__71328 = (0);
while(true){
if((i__71328 < count__71327)){
var vec__71335 = chunk__71326.cljs$core$IIndexed$_nth$arity$2(null,i__71328);
var a_var = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__71335,(0),null);
var a_val = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__71335,(1),null);
sci.impl.vars.bindRoot(a_var,a_val);


var G__72930 = seq__71325;
var G__72931 = chunk__71326;
var G__72932 = count__71327;
var G__72933 = (i__71328 + (1));
seq__71325 = G__72930;
chunk__71326 = G__72931;
count__71327 = G__72932;
i__71328 = G__72933;
continue;
} else {
var temp__5753__auto__ = cljs.core.seq(seq__71325);
if(temp__5753__auto__){
var seq__71325__$1 = temp__5753__auto__;
if(cljs.core.chunked_seq_QMARK_(seq__71325__$1)){
var c__4679__auto__ = cljs.core.chunk_first(seq__71325__$1);
var G__72934 = cljs.core.chunk_rest(seq__71325__$1);
var G__72935 = c__4679__auto__;
var G__72936 = cljs.core.count(c__4679__auto__);
var G__72937 = (0);
seq__71325 = G__72934;
chunk__71326 = G__72935;
count__71327 = G__72936;
i__71328 = G__72937;
continue;
} else {
var vec__71338 = cljs.core.first(seq__71325__$1);
var a_var = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__71338,(0),null);
var a_val = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__71338,(1),null);
sci.impl.vars.bindRoot(a_var,a_val);


var G__72938 = cljs.core.next(seq__71325__$1);
var G__72939 = null;
var G__72940 = (0);
var G__72941 = (0);
seq__71325 = G__72938;
chunk__71326 = G__72939;
count__71327 = G__72940;
i__71328 = G__72941;
continue;
}
} else {
return null;
}
}
break;
}
});
var old_vals = cljs.core.zipmap(cljs.core.keys(binding_map),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__71324_SHARP_){
return sci.impl.vars.getRawRoot(p1__71324_SHARP_);
}),cljs.core.keys(binding_map)));
try{root_bind(binding_map);

return (func.cljs$core$IFn$_invoke$arity$0 ? func.cljs$core$IFn$_invoke$arity$0() : func.call(null));
}finally {root_bind(old_vals);
}});
sci.impl.namespaces.sci_with_redefs = (function sci$impl$namespaces$sci_with_redefs(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72942 = arguments.length;
var i__4865__auto___72943 = (0);
while(true){
if((i__4865__auto___72943 < len__4864__auto___72942)){
args__4870__auto__.push((arguments[i__4865__auto___72943]));

var G__72945 = (i__4865__auto___72943 + (1));
i__4865__auto___72943 = G__72945;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);
return sci.impl.namespaces.sci_with_redefs.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);
});

(sci.impl.namespaces.sci_with_redefs.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,bindings,body){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","with-redefs-fn","cljs.core/with-redefs-fn",-1271194088,null),null,(1),null)),(new cljs.core.List(null,cljs.core.zipmap(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__71341_SHARP_){
return (new cljs.core.List(null,new cljs.core.Symbol(null,"var","var",870848730,null),(new cljs.core.List(null,p1__71341_SHARP_,null,(1),null)),(2),null));
}),cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2((2),bindings)),cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2((2),cljs.core.next(bindings))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","fn","cljs.core/fn",-1065745098,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$0()))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([body], 0)))),null,(1),null))], 0))));
}));

(sci.impl.namespaces.sci_with_redefs.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(sci.impl.namespaces.sci_with_redefs.cljs$lang$applyTo = (function (seq71342){
var G__71343 = cljs.core.first(seq71342);
var seq71342__$1 = cljs.core.next(seq71342);
var G__71344 = cljs.core.first(seq71342__$1);
var seq71342__$2 = cljs.core.next(seq71342__$1);
var G__71345 = cljs.core.first(seq71342__$2);
var seq71342__$3 = cljs.core.next(seq71342__$2);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__71343,G__71344,G__71345,seq71342__$3);
}));

/**
 * Returns a Symbol with the given namespace and name. Arity-1 works
 *   on strings, keywords, and vars.
 */
sci.impl.namespaces.symbol_STAR_ = (function sci$impl$namespaces$symbol_STAR_(var_args){
var G__71352 = arguments.length;
switch (G__71352) {
case 1:
return sci.impl.namespaces.symbol_STAR_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return sci.impl.namespaces.symbol_STAR_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(sci.impl.namespaces.symbol_STAR_.cljs$core$IFn$_invoke$arity$1 = (function (name){
if(sci.impl.utils.var_QMARK_(name)){
var m = cljs.core.meta(name);
var ns = new cljs.core.Keyword(null,"ns","ns",441598760).cljs$core$IFn$_invoke$arity$1(m);
var nm = new cljs.core.Keyword(null,"name","name",1843675177).cljs$core$IFn$_invoke$arity$1(m);
if(cljs.core.truth_((function (){var and__4251__auto__ = ns;
if(cljs.core.truth_(and__4251__auto__)){
return nm;
} else {
return and__4251__auto__;
}
})())){
return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(sci.impl.namespaces.sci_ns_name(ns)),cljs.core.name(nm));
} else {
return null;
}
} else {
return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(name);
}
}));

(sci.impl.namespaces.symbol_STAR_.cljs$core$IFn$_invoke$arity$2 = (function (ns,name){
return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(ns,name);
}));

(sci.impl.namespaces.symbol_STAR_.cljs$lang$maxFixedArity = 2);

sci.impl.namespaces.macroexpand_STAR_ = (function sci$impl$namespaces$macroexpand_STAR_(ctx,expr){
var fexpr__71360 = cljs.core.deref(sci.impl.utils.macroexpand_STAR_);
return (fexpr__71360.cljs$core$IFn$_invoke$arity$2 ? fexpr__71360.cljs$core$IFn$_invoke$arity$2(ctx,expr) : fexpr__71360.call(null,ctx,expr));
});
sci.impl.namespaces.macroexpand_1_STAR_ = (function sci$impl$namespaces$macroexpand_1_STAR_(ctx,expr){
var fexpr__71362 = cljs.core.deref(sci.impl.utils.macroexpand_1_STAR_);
return (fexpr__71362.cljs$core$IFn$_invoke$arity$2 ? fexpr__71362.cljs$core$IFn$_invoke$arity$2(ctx,expr) : fexpr__71362.call(null,ctx,expr));
});
sci.impl.namespaces._create_type = (function sci$impl$namespaces$_create_type(data){
return (new sci.lang.Type(data,null,null));
});
sci.impl.namespaces.sci_impl_records = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"obj","obj",981763962),sci.lang.__GT_Namespace(new cljs.core.Symbol(null,"sci.impl.records","sci.impl.records",-393424368,null),null),new cljs.core.Keyword(null,"private","private",-558947994),true,new cljs.core.Symbol(null,"toString","toString",-95766347,null),sci.impl.records.to_string,new cljs.core.Symbol(null,"-create-record-type","-create-record-type",-1472918739,null),sci.impl.namespaces._create_type,new cljs.core.Symbol(null,"->record-impl","->record-impl",1274709757,null),sci.impl.records.__GT_record_impl], null);
sci.impl.namespaces.sci_impl_deftype = new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,"obj","obj",981763962),sci.lang.__GT_Namespace(new cljs.core.Symbol(null,"sci.impl.deftype","sci.impl.deftype",959784924,null),null),new cljs.core.Keyword(null,"private","private",-558947994),true,new cljs.core.Symbol(null,"toString","toString",-95766347,null),sci.impl.deftype.to_string,new cljs.core.Symbol(null,"-create-type","-create-type",805234013,null),sci.impl.namespaces._create_type,new cljs.core.Symbol(null,"->type-impl","->type-impl",483401048,null),sci.impl.deftype.__GT_type_impl,new cljs.core.Symbol(null,"-inner-impl","-inner-impl",-1295431849,null),sci.impl.types.getVal,new cljs.core.Symbol(null,"-mutate","-mutate",-795549165,null),sci.impl.types._mutate,new cljs.core.Symbol(null,"type","type",-1480165421,null),sci.impl.types.type_impl], null);
sci.impl.namespaces.sci_impl_protocols = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"obj","obj",981763962),sci.lang.__GT_Namespace(new cljs.core.Symbol(null,"sci.impl.protocols","sci.impl.protocols",-697012432,null),null),new cljs.core.Keyword(null,"private","private",-558947994),true,new cljs.core.Symbol(null,"type->str","type->str",360030041,null),sci.impl.protocols.type__GT_str], null);
sci.impl.namespaces._STAR_1 = sci.impl.utils.dynamic_var.cljs$core$IFn$_invoke$arity$3(new cljs.core.Symbol(null,"*1","*1",2110258092,null),null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null));
sci.impl.namespaces._STAR_2 = sci.impl.utils.dynamic_var.cljs$core$IFn$_invoke$arity$3(new cljs.core.Symbol(null,"*2","*2",1728229926,null),null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null));
sci.impl.namespaces._STAR_3 = sci.impl.utils.dynamic_var.cljs$core$IFn$_invoke$arity$3(new cljs.core.Symbol(null,"*3","*3",105062009,null),null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null));
sci.impl.namespaces._STAR_e = sci.impl.utils.dynamic_var.cljs$core$IFn$_invoke$arity$3(new cljs.core.Symbol(null,"*e","*e",329170866,null),null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null));
sci.impl.namespaces.type = (function sci$impl$namespaces$type(x){
var or__4253__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.meta(x),new cljs.core.Keyword(null,"type","type",1174270348));
if(cljs.core.truth_(or__4253__auto__)){
return or__4253__auto__;
} else {
return cljs.core.type(x);
}
});
/**
 * Atomically sets the metadata for a namespace/var/ref/agent/atom to be:
 * 
 *   (apply f its-current-meta args)
 * 
 *   f must be free of side-effects
 */
sci.impl.namespaces.alter_meta_BANG_ = (function sci$impl$namespaces$alter_meta_BANG_(var_args){
var args__4870__auto__ = [];
var len__4864__auto___72964 = arguments.length;
var i__4865__auto___72965 = (0);
while(true){
if((i__4865__auto___72965 < len__4864__auto___72964)){
args__4870__auto__.push((arguments[i__4865__auto___72965]));

var G__72966 = (i__4865__auto___72965 + (1));
i__4865__auto___72965 = G__72966;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((2) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((2)),(0),null)):null);
return sci.impl.namespaces.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4871__auto__);
});

(sci.impl.namespaces.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (iref,f,args){
var m = cljs.core.meta(iref);
if(cljs.core.not(new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599).cljs$core$IFn$_invoke$arity$1(m))){
return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.alter_meta_BANG_,iref,f,args);
} else {
throw cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(["Built-in var ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(iref)," is read-only."].join(''),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"var","var",-769682797),iref], null));
}
}));

(sci.impl.namespaces.alter_meta_BANG_.cljs$lang$maxFixedArity = (2));

/** @this {Function} */
(sci.impl.namespaces.alter_meta_BANG_.cljs$lang$applyTo = (function (seq71366){
var G__71367 = cljs.core.first(seq71366);
var seq71366__$1 = cljs.core.next(seq71366);
var G__71368 = cljs.core.first(seq71366__$1);
var seq71366__$2 = cljs.core.next(seq71366__$1);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__71367,G__71368,seq71366__$2);
}));

sci.impl.namespaces.core_var = sci.impl.namespaces.ns_new_var(sci.impl.namespaces.clojure_core_ns);
sci.impl.namespaces.clojure_core = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Symbol(null,"unchecked-char","unchecked-char",1662742943,null),new cljs.core.Symbol(null,"*print-fn*","*print-fn*",138509853,null),new cljs.core.Symbol(null,"sorted-set","sorted-set",992325424,null),new cljs.core.Symbol(null,"true?","true?",-1600332395,null),new cljs.core.Symbol(null,"pop!","pop!",-1253383511,null),new cljs.core.Symbol(null,"deftype","deftype",1980826088,null),new cljs.core.Symbol(null,"unchecked-byte","unchecked-byte",1091664664,null),new cljs.core.Symbol(null,"*2","*2",1728229926,null),new cljs.core.Symbol(null,"doto","doto",1252536074,null),new cljs.core.Symbol(null,"reduce-kv","reduce-kv",1856296400,null),new cljs.core.Symbol(null,"defmethod","defmethod",-579171823,null),new cljs.core.Symbol(null,"update-in","update-in",-1445516941,null),new cljs.core.Symbol(null,"prefer-method","prefer-method",-876100205,null),new cljs.core.Symbol(null,"derive","derive",1727397303,null),new cljs.core.Symbol(null,"nfirst","nfirst",-554736533,null),new cljs.core.Symbol(null,"sort-by","sort-by",1317932224,null),new cljs.core.Symbol(null,"*data-readers*","*data-readers*",1269051058,null),new cljs.core.Symbol(null,"keys","keys",-1586012071,null),new cljs.core.Symbol(null,"ancestors","ancestors",864486103,null),new cljs.core.Symbol(null,"first","first",996428481,null),new cljs.core.Symbol(null,"butlast","butlast",1573039585,null),new cljs.core.Symbol(null,"with-out-str","with-out-str",-140201577,null),new cljs.core.Symbol(null,"partition-by","partition-by",-1329938249,null),new cljs.core.Symbol(null,"uri?","uri?",2029475116,null),new cljs.core.Symbol(null,"map-entry?","map-entry?",1140615277,null),new cljs.core.Symbol(null,"simple-keyword?","simple-keyword?",-367134735,null),new cljs.core.Symbol(null,"into-array","into-array",-1875808354,null),new cljs.core.Symbol(null,"ns-refers","ns-refers",-2030918515,null),new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"seq","seq",-177272256,null),new cljs.core.Symbol(null,"unchecked-inc-int","unchecked-inc-int",1402783397,null),new cljs.core.Symbol(null,"hash-combine","hash-combine",1136881997,null),new cljs.core.Symbol(null,"ns-unalias","ns-unalias",445102632,null),new cljs.core.Symbol(null,"odd?","odd?",-1458588199,null),new cljs.core.Symbol(null,"partition","partition",-1479695018,null),new cljs.core.Symbol(null,">=",">=",1016916022,null),new cljs.core.Symbol(null,"fnext","fnext",1424835295,null),new cljs.core.Symbol(null,"when-first","when-first",821699168,null),new cljs.core.Symbol(null,"bit-or","bit-or",-1144943723,null),new cljs.core.Symbol(null,"disj","disj",-1076545178,null),new cljs.core.Symbol(null,"with-redefs-fn","with-redefs-fn",-595725379,null),new cljs.core.Symbol(null,"-new-var","-new-var",1200468147,null),new cljs.core.Symbol(null,"unchecked-short","unchecked-short",27848057,null),new cljs.core.Symbol(null,"ffirst","ffirst",-694902000,null),new cljs.core.Symbol(null,"condp","condp",1054325175,null),new cljs.core.Symbol(null,"munge","munge",-174396700,null),new cljs.core.Symbol(null,"*file*","*file*",624866474,null),new cljs.core.Symbol(null,"unchecked-negate-int","unchecked-negate-int",-825297602,null),new cljs.core.Symbol(null,"print-str","print-str",-699700354,null),new cljs.core.Symbol(null,"vreset!","vreset!",1237177091,null),new cljs.core.Symbol(null,"uuid?","uuid?",400077689,null),new cljs.core.Symbol(null,"reset!","reset!",527275632,null),new cljs.core.Symbol(null,"IRecord","IRecord",-903221169,null),new cljs.core.Symbol(null,"memfn","memfn",-881453486,null),new cljs.core.Symbol(null,"atom","atom",1243487874,null),new cljs.core.Symbol(null,"select-keys","select-keys",-708556589,null),new cljs.core.Symbol(null,"reverse","reverse",752076261,null),new cljs.core.Symbol(null,"ex-message","ex-message",-1128293394,null),new cljs.core.Symbol(null,"special-symbol?","special-symbol?",-731144617,null),new cljs.core.Symbol(null,"merge","merge",-163787882,null),new cljs.core.Symbol(null,"inst-ms","inst-ms",-653961375,null),new cljs.core.Symbol(null,"newline","newline",-864364446,null),new cljs.core.Symbol(null,"unchecked-multiply","unchecked-multiply",-1019161490,null),new cljs.core.Symbol(null,"*print-readably*","*print-readably*",-761361221,null),new cljs.core.Symbol(null,"..","..",-300507420,null),new cljs.core.Symbol(null,"chunked-seq?","chunked-seq?",1044846168,null),new cljs.core.Symbol(null,"inst?","inst?",1614698981,null),new cljs.core.Symbol(null,"random-sample","random-sample",-914181101,null),new cljs.core.Symbol(null,">",">",1085014381,null),new cljs.core.Symbol(null,"*read-eval*","*read-eval*",1122065414,null),new cljs.core.Symbol(null,"count","count",-514511684,null),new cljs.core.Symbol(null,"simple-ident?","simple-ident?",194189851,null),new cljs.core.Symbol(null,"ns-name","ns-name",-436814796,null),new cljs.core.Symbol(null,"*1","*1",2110258092,null),new cljs.core.Symbol(null,"last","last",-1548700637,null),new cljs.core.Symbol(null,"bit-shift-left","bit-shift-left",-1814765981,null),new cljs.core.Symbol(null,"int","int",-100885395,null),new cljs.core.Symbol(null,"unchecked-negate","unchecked-negate",-1669067451,null),new cljs.core.Symbol(null,"multi-fn-impl","multi-fn-impl",187651105,null),new cljs.core.Symbol(null,"unchecked-remainder-int","unchecked-remainder-int",1427188224,null),new cljs.core.Symbol(null,"byte","byte",-1970660549,null),new cljs.core.Symbol(null,"conj!","conj!",-841007895,null),new cljs.core.Symbol(null,"println","println",-733595439,null),new cljs.core.Symbol(null,"defprotocol","defprotocol",1388695348,null),new cljs.core.Symbol(null,"int?","int?",1799729645,null),new cljs.core.Symbol(null,"long-array","long-array",217579190,null),new cljs.core.Symbol(null,"find","find",2136810983,null),new cljs.core.Symbol(null,"vals","vals",-1886377036,null),new cljs.core.Symbol(null,"nil?","nil?",1612038930,null),new cljs.core.Symbol(null,"flush","flush",501820328,null),new cljs.core.Symbol(null,"hash","hash",1626749931,null),new cljs.core.Symbol(null,"pr","pr",1056937027,null),new cljs.core.Symbol(null,"unchecked-subtract","unchecked-subtract",-2137458667,null),new cljs.core.Symbol(null,"comment","comment",-2122229700,null),new cljs.core.Symbol(null,"with-redefs","with-redefs",-1143728263,null),new cljs.core.Symbol(null,"js-delete","js-delete",170306730,null),new cljs.core.Symbol(null,"float?","float?",673884616,null),new cljs.core.Symbol(null,"second","second",1195829517,null),new cljs.core.Symbol(null,"extend-protocol","extend-protocol",306378578,null),new cljs.core.Symbol(null,"*err*","*err*",2070937226,null),new cljs.core.Symbol(null,"array?","array?",-1249008197,null),new cljs.core.Symbol(null,"chunk-first","chunk-first",1379046752,null),new cljs.core.Symbol(null,"alias","alias",-399220103,null),new cljs.core.Symbol(null,"-write","-write",1999625154,null),new cljs.core.Symbol(null,"unchecked-add-int","unchecked-add-int",-1821763285,null),new cljs.core.Symbol(null,"ifn?","ifn?",-2106461064,null),new cljs.core.Symbol(null,"ex-info","ex-info",-539875240,null),new cljs.core.Symbol(null,"inc","inc",324505433,null),new cljs.core.Symbol(null,"/","/",-1371932971,null),new cljs.core.Symbol(null,"amap","amap",635923055,null),new cljs.core.Symbol(null,"volatile!","volatile!",919368405,null),new cljs.core.Symbol(null,"with-meta","with-meta",73674707,null),new cljs.core.Symbol(null,"map?","map?",-1780568534,null),new cljs.core.Symbol(null,"vector?","vector?",-61367869,null),new cljs.core.Symbol(null,"->>","->>",-1874332161,null),new cljs.core.Symbol(null,"quot","quot",-1125214196,null),new cljs.core.Symbol(null,"any?","any?",-318999933,null),new cljs.core.Symbol(null,"*print-newline*","*print-newline*",1478078956,null),new cljs.core.Symbol(null,"unchecked-add","unchecked-add",-2030665965,null),new cljs.core.Symbol(null,"floats","floats",513591110,null),new cljs.core.Symbol(null,"drop-while","drop-while",719206685,null),new cljs.core.Symbol(null,"bounded-count","bounded-count",1030640883,null),new cljs.core.Symbol(null,"take-while","take-while",2007268328,null),new cljs.core.Symbol(null,"extends?","extends?",-2012201234,null),new cljs.core.Symbol(null,"sort","sort",-1700969851,null),new cljs.core.Symbol(null,"false?","false?",-1522377573,null),new cljs.core.Symbol(null,"cat","cat",182721320,null),new cljs.core.Symbol(null,"extend-type","extend-type",1123355921,null),new cljs.core.Symbol(null,"*print-level*","*print-level*",-634488505,null),new cljs.core.Symbol(null,"replace","replace",853943757,null),new cljs.core.Symbol(null,"doseq","doseq",221164135,null),new cljs.core.Symbol(null,"drop","drop",2005013138,null),new cljs.core.Symbol(null,"push-thread-bindings","push-thread-bindings",1054019843,null),new cljs.core.Symbol(null,"not","not",1044554643,null),new cljs.core.Symbol(null,"keep","keep",-492807003,null),new cljs.core.Symbol(null,"cons","cons",755448454,null),new cljs.core.Symbol(null,"*e","*e",329170866,null),new cljs.core.Symbol(null,"bit-shift-right","bit-shift-right",884046498,null),new cljs.core.Symbol(null,"associative?","associative?",-141666771,null),new cljs.core.Symbol(null,"read","read",-1514377108,null),new cljs.core.Symbol(null,"unquote","unquote",-1004694737,null),new cljs.core.Symbol(null,"macroexpand","macroexpand",1509933344,null),new cljs.core.Symbol(null,"create-ns","create-ns",-782886354,null),new cljs.core.Symbol(null,"*print-err-fn*","*print-err-fn*",1241679298,null),new cljs.core.Symbol(null,"*print-length*","*print-length*",-687693654,null),new cljs.core.Symbol(null,"if-not","if-not",-265415609,null),new cljs.core.Symbol(null,"chunk-next","chunk-next",-547810434,null),new cljs.core.Symbol(null,"var-set","var-set",-1361408121,null),new cljs.core.Symbol(null,"bit-flip","bit-flip",809639606,null),new cljs.core.Symbol(null,"aset","aset",900773178,null),new cljs.core.Symbol(null,"-deref","-deref",-283116853,null),new cljs.core.Symbol(null,"*ns*","*ns*",740153818,null),new cljs.core.Symbol(null,"some-fn","some-fn",-490044165,null),new cljs.core.Symbol(null,"var?","var?",230455531,null),new cljs.core.Symbol(null,"*print-meta*","*print-meta*",-919406644,null),new cljs.core.Symbol(null,"when-not","when-not",-1223136340,null),new cljs.core.Symbol(null,"unchecked-multiply-int","unchecked-multiply-int",-788546068,null),new cljs.core.Symbol(null,"identity","identity",-1007039734,null),new cljs.core.Symbol(null,"-reset!","-reset!",1965723739,null),new cljs.core.Symbol(null,"to-array","to-array",-585705189,null),new cljs.core.Symbol(null,"double-array","double-array",257035726,null),new cljs.core.Symbol(null,"sorted-map","sorted-map",-521216771,null),new cljs.core.Symbol(null,"-reified-methods","-reified-methods",1702712518,null),new cljs.core.Symbol(null,"concat","concat",-467652465,null),new cljs.core.Symbol(null,"char","char",998943941,null),new cljs.core.Symbol(null,"ident?","ident?",-2061359468,null),new cljs.core.Symbol(null,"make-array","make-array",-1135103906,null),new cljs.core.Symbol(null,"chunk-buffer","chunk-buffer",789680287,null),new cljs.core.Symbol(null,"peek","peek",1349135202,null),new cljs.core.Symbol(null,"hash-unordered-coll","hash-unordered-coll",-240471618,null),new cljs.core.Symbol(null,"when","when",1064114221,null),new cljs.core.Symbol(null,"clj->js","clj->js",-1880244676,null),new cljs.core.Symbol(null,"sequence","sequence",-1727628355,null),new cljs.core.Symbol(null,"group-by","group-by",1261391725,null),new cljs.core.Symbol(null,"re-seq","re-seq",-2105554076,null),new cljs.core.Symbol(null,"-swap!","-swap!",-535359318,null),new cljs.core.Symbol(null,"when-some","when-some",1700415903,null),new cljs.core.Symbol(null,"unchecked-subtract-int","unchecked-subtract-int",-1899147615,null),new cljs.core.Symbol(null,"<=","<=",1244895369,null),new cljs.core.Symbol(null,"prefers","prefers",-374265406,null),new cljs.core.Symbol(null,"vary-meta","vary-meta",-1580067831,null),new cljs.core.Symbol(null,"=","=",-1501502141,null),new cljs.core.Symbol(null,"intern","intern",1664352151,null),new cljs.core.Symbol(null,"keep-indexed","keep-indexed",-2020916352,null),new cljs.core.Symbol(null,"js-obj","js-obj",342383250,null),new cljs.core.Symbol(null,"every?","every?",2083724064,null),new cljs.core.Symbol(null,"comp","comp",-1462482139,null),new cljs.core.Symbol(null,"bit-set","bit-set",-910710655,null),new cljs.core.Symbol(null,"dissoc","dissoc",1039760994,null),new cljs.core.Symbol(null,"min","min",2085523049,null),new cljs.core.Symbol(null,"char?","char?",-1072221244,null),new cljs.core.Symbol(null,"with-open","with-open",172119667,null),new cljs.core.Symbol(null,"interleave","interleave",165488106,null),new cljs.core.Symbol(null,"declare","declare",654042991,null),new cljs.core.Symbol(null,"with-local-vars","with-local-vars",837642072,null),new cljs.core.Symbol(null,"bound?","bound?",767722602,null),new cljs.core.Symbol(null,"all-ns","all-ns",1571857784,null),new cljs.core.Symbol(null,"split-at","split-at",-60953742,null),new cljs.core.Symbol(null,"neg-int?","neg-int?",-1610409390,null),new cljs.core.Symbol(null,"mapv","mapv",-241595241,null),new cljs.core.Symbol(null,"defonce","defonce",-1681484013,null),new cljs.core.Symbol(null,"prn","prn",1561684909,null),new cljs.core.Symbol(null,"drop-last","drop-last",-1123611530,null),new cljs.core.Symbol(null,"with-bindings*","with-bindings*",-93186207,null),new cljs.core.Symbol(null,"fnil","fnil",-187395162,null),new cljs.core.Symbol(null,"cond->>","cond->>",348844960,null),new cljs.core.Symbol(null,"pop-thread-bindings","pop-thread-bindings",-1312224790,null),new cljs.core.Symbol(null,"satisfies?","satisfies?",-433227199,null),new cljs.core.Symbol(null,"next","next",1522830042,null),new cljs.core.Symbol(null,"+","+",-740910886,null),new cljs.core.Symbol(null,"load-string","load-string",-403739145,null),new cljs.core.Symbol(null,"name","name",-810760592,null),new cljs.core.Symbol(null,"unchecked-double","unchecked-double",-1593778036,null),new cljs.core.Symbol(null,"when-let","when-let",-1383043480,null),new cljs.core.Symbol(null,"symbol?","symbol?",1820680511,null),new cljs.core.Symbol(null,"chunk-cons","chunk-cons",433801405,null),new cljs.core.Symbol(null,"disj!","disj!",-1383872088,null),new cljs.core.Symbol(null,"->Eduction","->Eduction",-188511967,null),new cljs.core.Symbol(null,"ns-imports","ns-imports",1111168888,null),new cljs.core.Symbol(null,"methods","methods",2094462393,null),new cljs.core.Symbol(null,"reset-meta!","reset-meta!",1699493291,null),new cljs.core.Symbol(null,"areduce","areduce",-1873477878,null),new cljs.core.Symbol(null,"js->clj","js->clj",1544462432,null),new cljs.core.Symbol(null,"dotimes","dotimes",-818708397,null),new cljs.core.Symbol(null,"rand-int","rand-int",-495012157,null),new cljs.core.Symbol(null,"complement","complement",-913606051,null),new cljs.core.Symbol(null,"list?","list?",-1494629,null),new cljs.core.Symbol(null,"aget","aget",1491056546,null),new cljs.core.Symbol(null,"zipmap","zipmap",-690049687,null),new cljs.core.Symbol(null,"find-var","find-var",-497901917,null),new cljs.core.Symbol(null,"for","for",316745208,null),new cljs.core.Symbol(null,"run!","run!",-2055483725,null),new cljs.core.Symbol(null,"==","==",-234118149,null),new cljs.core.Symbol(null,"chars","chars",545901210,null),new cljs.core.Symbol(null,"iterate","iterate",694501410,null),new cljs.core.Symbol(null,"boolean","boolean",-278886877,null),new cljs.core.Symbol(null,"hash-map","hash-map",-439030950,null),new cljs.core.Symbol(null,"unchecked-inc","unchecked-inc",-1170131490,null),new cljs.core.Symbol(null,"max-key","max-key",-2132814732,null),new cljs.core.Symbol(null,"qualified-ident?","qualified-ident?",-928894763,null),new cljs.core.Symbol(null,"dissoc!","dissoc!",333592624,null),new cljs.core.Symbol(null,"coll?","coll?",-1874821441,null),new cljs.core.Symbol(null,"reversible?","reversible?",314107817,null),new cljs.core.Symbol(null,"ns-unmap","ns-unmap",1255260993,null),new cljs.core.Symbol(null,"apply","apply",-1334050276,null),new cljs.core.Symbol(null,"*in*","*in*",1130010229,null),new cljs.core.Symbol(null,"subvec","subvec",364611032,null),new cljs.core.Symbol(null,"isa?","isa?",1358492324,null),new cljs.core.Symbol(null,"not-every?","not-every?",-729672558,null),new cljs.core.Symbol(null,"ex-cause","ex-cause",95392590,null),new cljs.core.Symbol(null,"keyword?","keyword?",1917797069,null),new cljs.core.Symbol(null,"ex-data","ex-data",1331491268,null),new cljs.core.Symbol(null,"*print-namespace-maps*","*print-namespace-maps*",-1759108415,null),new cljs.core.Symbol(null,"compare","compare",1109853757,null),new cljs.core.Symbol(null,"underive","underive",-242982950,null),new cljs.core.Symbol(null,"transduce","transduce",-2083619734,null),new cljs.core.Symbol(null,"*flush-on-newline*","*flush-on-newline*",-737526501,null),new cljs.core.Symbol(null,"range","range",-1014743483,null),new cljs.core.Symbol(null,"IDeref","IDeref",1738423197,null),new cljs.core.Symbol(null,"sorted?","sorted?",892797714,null),new cljs.core.Symbol(null,"frequencies","frequencies",1757430425,null),new cljs.core.Symbol(null,"cycle","cycle",-1944070485,null),new cljs.core.Symbol(null,"max","max",1701898075,null),new cljs.core.Symbol(null,"simple-symbol?","simple-symbol?",1408454822,null),new cljs.core.Symbol(null,"reify","reify",1885539699,null),new cljs.core.Symbol(null,"empty?","empty?",76408555,null),new cljs.core.Symbol(null,"into","into",1489695498,null),new cljs.core.Symbol(null,"integer?","integer?",1303791671,null),new cljs.core.Symbol(null,"*","*",345799209,null),new cljs.core.Symbol(null,"some->>","some->>",-1499987794,null),new cljs.core.Symbol(null,"unsigned-bit-shift-right","unsigned-bit-shift-right",-1953076601,null),new cljs.core.Symbol(null,"pr-str","pr-str",-2066912145,null),new cljs.core.Symbol(null,"some->","some->",-1011172200,null),new cljs.core.Symbol(null,"bound-fn","bound-fn",125411266,null),new cljs.core.Symbol(null,"chunk","chunk",449371907,null),new cljs.core.Symbol(null,"cond","cond",1606708055,null),new cljs.core.Symbol(null,"distinct","distinct",-148347594,null),new cljs.core.Symbol(null,"ensure-reduced","ensure-reduced",-1606421005,null),new cljs.core.Symbol(null,"object-array","object-array",206434647,null),new cljs.core.Symbol(null,"juxt","juxt",671085604,null),new cljs.core.Symbol(null,"some","some",-310548046,null),new cljs.core.Symbol(null,"interpose","interpose",-2078295140,null),new cljs.core.Symbol(null,"the-ns","the-ns",1016317907,null),new cljs.core.Symbol(null,"instance?","instance?",1075939923,null),new cljs.core.Symbol(null,"descendants","descendants",-829549738,null),new cljs.core.Symbol(null,"get-in","get-in",-1965644065,null),new cljs.core.Symbol(null,"meta","meta",-1154898805,null),new cljs.core.Symbol(null,"reify*","reify*",1646945123,null),new cljs.core.Symbol(null,"defrecord","defrecord",273038109,null),new cljs.core.Symbol(null,"val","val",1769233139,null),new cljs.core.Symbol(null,"read-string","read-string",-558384455,null),new cljs.core.Symbol(null,"aclone","aclone",722978531,null),new cljs.core.Symbol(null,"assoc-in","assoc-in",-113585743,null),new cljs.core.Symbol(null,"zero?","zero?",325758897,null),new cljs.core.Symbol(null,"transient","transient",899115069,null),new cljs.core.Symbol(null,"letfn","letfn",-480490827,null),new cljs.core.Symbol(null,"realized?","realized?",207229341,null),new cljs.core.Symbol(null,"list*","list*",765415731,null),new cljs.core.Symbol(null,"ns-interns","ns-interns",535532824,null),new cljs.core.Symbol(null,"memoize","memoize",2019341169,null),new cljs.core.Symbol(null,"subseq","subseq",-1558995241,null),new cljs.core.Symbol(null,"delay?","delay?",-1528239209,null),new cljs.core.Symbol(null,"completing","completing",565832990,null),new cljs.core.Symbol(null,"unchecked-divide-int","unchecked-divide-int",1613116468,null),new cljs.core.Symbol(null,"shuffle","shuffle",-1393023609,null),new cljs.core.Symbol(null,"ns-map","ns-map",-434605548,null),new cljs.core.Symbol(null,"prn-str","prn-str",-145225943,null),new cljs.core.Symbol(null,"defn-","defn-",1097765044,null),new cljs.core.Symbol(null,"compare-and-set!","compare-and-set!",-1997299382,null),new cljs.core.Symbol(null,"use","use",-205850897,null),new cljs.core.Symbol(null,"longs","longs",-1017696020,null),new cljs.core.Symbol(null,"remove-ns","remove-ns",-1915058781,null),new cljs.core.Symbol(null,"unchecked-int","unchecked-int",1672898125,null),new cljs.core.Symbol(null,"nthrest","nthrest",1219890118,null),new cljs.core.Symbol(null,"thread-bound?","thread-bound?",2075334115,null),new cljs.core.Symbol(null,"*reader-resolver*","*reader-resolver*",309718590,null),new cljs.core.Symbol(null,"doubles","doubles",-1517872169,null),new cljs.core.Symbol(null,"force","force",-1872478483,null),new cljs.core.Symbol(null,"remove-method","remove-method",72923733,null),new cljs.core.Symbol(null,"extend","extend",-817951763,null),new cljs.core.Symbol(null,"nnext","nnext",-2065435598,null),new cljs.core.Symbol(null,"dec","dec",-766002333,null),new cljs.core.Symbol(null,"qualified-keyword?","qualified-keyword?",375456001,null),new cljs.core.Symbol(null,"comparator","comparator",-509539107,null),new cljs.core.Symbol(null,"take-last","take-last",-41013151,null),new cljs.core.Symbol(null,"find-ns","find-ns",-884829568,null),new cljs.core.Symbol(null,"string?","string?",-1129175764,null),new cljs.core.Symbol(null,"print","print",-1354873355,null),new cljs.core.Symbol(null,"*assert*","*assert*",1479636474,null),new cljs.core.Symbol(null,"bit-xor","bit-xor",-1334295033,null),new cljs.core.Symbol(null,"map","map",-1282745308,null),new cljs.core.Symbol(null,"float","float",-91857841,null),new cljs.core.Symbol(null,"chunk-append","chunk-append",-1447349559,null),new cljs.core.Symbol(null,"deref","deref",1494944732,null),new cljs.core.Symbol(null,"re-pattern","re-pattern",1047705161,null),new cljs.core.Symbol(null,"repeat","repeat",-1821743682,null),new cljs.core.Symbol(null,"reduce","reduce",1358839360,null),new cljs.core.Symbol(null,"qualified-symbol?","qualified-symbol?",98763807,null),new cljs.core.Symbol(null,"eval","eval",536963622,null),new cljs.core.Symbol(null,"vector","vector",-751469611,null),new cljs.core.Symbol(null,"doall","doall",988520834,null),new cljs.core.Symbol(null,"assoc!","assoc!",-847603280,null),new cljs.core.Symbol(null,"not=","not=",1466536204,null),new cljs.core.Symbol(null,"alter-meta!","alter-meta!",1510444945,null),new cljs.core.Symbol(null,"constantly","constantly",-271143939,null),new cljs.core.Symbol(null,"seq?","seq?",-1951934719,null),new cljs.core.Symbol(null,"js-keys","js-keys",-1388365203,null),new cljs.core.Symbol(null,"get","get",-971253014,null),new cljs.core.Symbol(null,"require","require",1172530194,null),new cljs.core.Symbol(null,"key","key",124488940,null),new cljs.core.Symbol(null,"bit-and-not","bit-and-not",-254338837,null),new cljs.core.Symbol(null,"mapcat","mapcat",-601348859,null),new cljs.core.Symbol(null,"cond->","cond->",561741875,null),new cljs.core.Symbol(null,"nat-int?","nat-int?",-1879663400,null),new cljs.core.Symbol(null,"demunge","demunge",-1865491845,null),new cljs.core.Symbol(null,"get-method","get-method",185754457,null),new cljs.core.Symbol(null,"*out*","*out*",1277591796,null),new cljs.core.Symbol(null,"str","str",-1564826950,null),new cljs.core.Symbol(null,"empty","empty",-1886564811,null),new cljs.core.Symbol(null,"counted?","counted?",1703071664,null),new cljs.core.Symbol(null,"set?","set?",1636014792,null),new cljs.core.Symbol(null,"alength","alength",-1268305401,null),new cljs.core.Symbol(null,"filterv","filterv",1977739179,null),new cljs.core.Symbol(null,"reductions","reductions",549963952,null),new cljs.core.Symbol(null,"booleans","booleans",756846088,null),new cljs.core.Symbol(null,"<","<",993667236,null),new cljs.core.Symbol(null,"reduced","reduced",-1189224808,null),new cljs.core.Symbol(null,"halt-when","halt-when",-140999689,null),new cljs.core.Symbol(null,"namespace","namespace",1263021155,null),new cljs.core.Symbol(null,"keyword","keyword",-1843046022,null),new cljs.core.Symbol(null,"bound-fn*","bound-fn*",102308621,null),new cljs.core.Symbol(null,"record?","record?",-1305224237,null),new cljs.core.Symbol(null,"tagged-literal?","tagged-literal?",1117865390,null),new cljs.core.Symbol(null,"-","-",-471816912,null),new cljs.core.Symbol(null,"bit-and","bit-and",-479352589,null),new cljs.core.Symbol(null,"unreduced","unreduced",780976083,null),new cljs.core.Symbol(null,"assoc","assoc",2071440380,null),new cljs.core.Symbol(null,"defmulti","defmulti",1936112154,null),new cljs.core.Symbol(null,"partition-all","partition-all",-1985005385,null),new cljs.core.Symbol(null,"bit-not","bit-not",1508529851,null),new cljs.core.Symbol(null,"some?","some?",234752293,null),new cljs.core.Symbol(null,"pos?","pos?",-244377722,null),new cljs.core.Symbol(null,"trampoline","trampoline",-71368916,null),new cljs.core.Symbol(null,"rand","rand",-1745930995,null),new cljs.core.Symbol(null,"re-matches","re-matches",-1865705768,null),new cljs.core.Symbol(null,"boolean?","boolean?",1790940868,null),new cljs.core.Symbol(null,"every-pred","every-pred",-1346958247,null),new cljs.core.Symbol(null,"fn?","fn?",1820990818,null),new cljs.core.Symbol(null,"sequential?","sequential?",1102351463,null),new cljs.core.Symbol(null,"list","list",-1889078086,null),new cljs.core.Symbol(null,"sorted-set-by","sorted-set-by",899099765,null),new cljs.core.Symbol(null,"nthnext","nthnext",1677356670,null),new cljs.core.Symbol(null,"eduction","eduction",1445227968,null),new cljs.core.Symbol(null,"rand-nth","rand-nth",-1227719931,null),new cljs.core.Symbol(null,"delay","delay",1066306308,null),new cljs.core.Symbol(null,"partial","partial",1881673272,null),new cljs.core.Symbol(null,"with-bindings","with-bindings",-1197589787,null),new cljs.core.Symbol(null,"rsubseq","rsubseq",-710070471,null),new cljs.core.Symbol(null,"contains?","contains?",-1676812576,null),new cljs.core.Symbol(null,"->","->",-2139605430,null),new cljs.core.Symbol(null,"shorts","shorts",107738238,null),new cljs.core.Symbol(null,"random-uuid","random-uuid",-1574409597,null),new cljs.core.Symbol(null,"ISwap","ISwap",484378193,null),new cljs.core.Symbol(null,"as->","as->",1430690540,null),new cljs.core.Symbol(null,"hash-set","hash-set",-1145168432,null),new cljs.core.Symbol(null,"take","take",871646627,null),new cljs.core.Symbol(null,"if-let","if-let",1803593690,null),new cljs.core.Symbol(null,"macroexpand-1","macroexpand-1",659241329,null),new cljs.core.Symbol(null,"split-with","split-with",1853047034,null),new cljs.core.Symbol(null,"refer","refer",676235974,null),new cljs.core.Symbol(null,"binding-conveyor-fn","binding-conveyor-fn",2076077877,null),new cljs.core.Symbol(null,"make-hierarchy","make-hierarchy",-241558556,null),new cljs.core.Symbol(null,"tagged-literal","tagged-literal",-896422703,null),new cljs.core.Symbol(null,"has-root-impl","has-root-impl",-288948659,null),new cljs.core.Symbol(null,"parents","parents",-387007364,null),new cljs.core.Symbol(null,"test","test",-2076896892,null),new cljs.core.Symbol(null,"vec","vec",982683596,null),new cljs.core.Symbol(null,"nth","nth",1529209554,null),new cljs.core.Keyword(null,"obj","obj",981763962),new cljs.core.Symbol(null,"lazy-cat","lazy-cat",-89906116,null),new cljs.core.Symbol(null,"if-some","if-some",1960677609,null),new cljs.core.Symbol(null,"subs","subs",1453849536,null),new cljs.core.Symbol(null,"*default-data-reader-fn*","*default-data-reader-fn*",758795499,null),new cljs.core.Symbol(null,"to-array-2d","to-array-2d",-1563270737,null),new cljs.core.Symbol(null,"symbol","symbol",601958831,null),new cljs.core.Symbol(null,"mod","mod",1510044207,null),new cljs.core.Symbol(null,"number?","number?",-1747282210,null),new cljs.core.Symbol(null,"reduced?","reduced?",1361797384,null),new cljs.core.Symbol(null,"-new-dynamic-var","-new-dynamic-var",-1029088918,null),new cljs.core.Symbol(null,"object?","object?",327472310,null),new cljs.core.Symbol(null,"conj","conj",-1127293942,null),new cljs.core.Symbol(null,"bytes","bytes",-1478569089,null),new cljs.core.Symbol(null,"unchecked-float","unchecked-float",1485658216,null),new cljs.core.Symbol(null,"bit-test","bit-test",543456753,null),new cljs.core.Symbol(null,"sorted-map-by","sorted-map-by",218894812,null),new cljs.core.Symbol(null,"double?","double?",-2146564276,null),new cljs.core.Symbol(null,"rseq","rseq",-1719353554,null),new cljs.core.Symbol(null,"unchecked-long","unchecked-long",1306610949,null),new cljs.core.Symbol(null,"binding","binding",-2114503176,null),new cljs.core.Symbol(null,"double","double",-1769548886,null),new cljs.core.Symbol(null,"unchecked-dec","unchecked-dec",2095823150,null),new cljs.core.Symbol(null,"tree-seq","tree-seq",-1800921632,null),new cljs.core.Symbol(null,"multi-fn-add-method-impl","multi-fn-add-method-impl",-523930142,null),new cljs.core.Symbol(null,"seqable?","seqable?",72462495,null),new cljs.core.Symbol(null,"swap!","swap!",-655677516,null),new cljs.core.Symbol(null,"vswap!","vswap!",-574070781,null),new cljs.core.Symbol(null,"array-map","array-map",1555038968,null),new cljs.core.Symbol(null,"reset-thread-binding-frame-impl","reset-thread-binding-frame-impl",-826674194,null),new cljs.core.Symbol(null,"dedupe","dedupe",-461856254,null),new cljs.core.Symbol(null,"short","short",-725675253,null),new cljs.core.Symbol(null,"update","update",-1608859373,null),new cljs.core.Symbol(null,"filter","filter",691993593,null),new cljs.core.Symbol(null,"unchecked-dec-int","unchecked-dec-int",1339067442,null),new cljs.core.Symbol(null,"*3","*3",105062009,null),new cljs.core.Symbol(null,"requiring-resolve","requiring-resolve",-1888505231,null),new cljs.core.Symbol(null,"rem","rem",664046770,null),new cljs.core.Symbol(null,"pop","pop",-94247249,null),new cljs.core.Symbol(null,"merge-with","merge-with",1025434534,null),new cljs.core.Symbol(null,"long","long",1469079434,null),new cljs.core.Symbol(null,"assert","assert",677428501,null),new cljs.core.Symbol(null,"refer-clojure","refer-clojure",-1840651329,null),new cljs.core.Symbol(null,"flatten","flatten",-1441633353,null),new cljs.core.Symbol(null,"distinct?","distinct?",-1684357959,null),new cljs.core.Symbol(null,"map-indexed","map-indexed",-1391025435,null),new cljs.core.Symbol(null,"ns-publics","ns-publics",903350436,null),new cljs.core.Symbol(null,"protocol-type-impl","protocol-type-impl",561934718,null),new cljs.core.Symbol(null,"even?","even?",-1827825394,null),new cljs.core.Symbol(null,"var-get","var-get",-767472097,null),new cljs.core.Symbol(null,"multi-fn?-impl","multi-fn?-impl",1372639302,null),new cljs.core.Symbol(null,"alter-var-root","alter-var-root",-1749458519,null),new cljs.core.Symbol(null,"type","type",-1480165421,null),new cljs.core.Symbol(null,"neg?","neg?",-1902175577,null),new cljs.core.Symbol(null,"gensym","gensym",-1693147401,null),new cljs.core.Symbol(null,"resolve","resolve",56086045,null),new cljs.core.Symbol(null,"add-watch","add-watch",1389887634,null),new cljs.core.Symbol(null,"not-any?","not-any?",-2114707554,null),new cljs.core.Symbol(null,"take-nth","take-nth",1378204353,null),new cljs.core.Symbol(null,"dorun","dorun",560426022,null),new cljs.core.Symbol(null,"remove-all-methods","remove-all-methods",-728267092,null),new cljs.core.Symbol(null,"not-empty","not-empty",2029453590,null),new cljs.core.Symbol(null,"ns-aliases","ns-aliases",-1364180948,null),new cljs.core.Symbol(null,"*print-dup*","*print-dup*",103854877,null),new cljs.core.Symbol(null,"ns-resolve","ns-resolve",1788675756,null),new cljs.core.Symbol(null,"get-thread-binding-frame-impl","get-thread-binding-frame-impl",-701667726,null),new cljs.core.Symbol(null,"chunk-rest","chunk-rest",-1853526420,null),new cljs.core.Symbol(null,"remove-watch","remove-watch",-1105301448,null),new cljs.core.Symbol(null,"int-array","int-array",459176616,null),new cljs.core.Symbol(null,"pos-int?","pos-int?",-1205815015,null),new cljs.core.Symbol(null,"undefined?","undefined?",1356377224,null),new cljs.core.Symbol(null,"ints","ints",-1761239845,null),new cljs.core.Symbol(null,"identical?","identical?",-745864205,null),new cljs.core.Symbol(null,"persistent!","persistent!",1286555698,null),new cljs.core.Symbol(null,"IReset","IReset",-1893729426,null),new cljs.core.Symbol(null,"indexed?","indexed?",1234610384,null),new cljs.core.Symbol(null,"min-key","min-key",246826648,null),new cljs.core.Symbol(null,"repeatedly","repeatedly",1199964457,null),new cljs.core.Symbol(null,"set","set",1945134081,null),new cljs.core.Symbol(null,"remove","remove",1509103113,null),new cljs.core.Symbol(null,"keyword-identical?","keyword-identical?",931555714,null),new cljs.core.Symbol(null,"while","while",-1691317983,null),new cljs.core.Symbol(null,"re-find","re-find",1143444147,null)],[(new sci.lang.Var(cljs.core.unchecked_char,new cljs.core.Symbol(null,"unchecked-char","unchecked-char",1662742943,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"unchecked-char","unchecked-char",1662742943,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.unchecked_char], null),false,false)),sci.impl.io.print_fn,(new sci.lang.Var(cljs.core.sorted_set,new cljs.core.Symbol(null,"sorted-set","sorted-set",992325424,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"sorted-set","sorted-set",992325424,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"keys","keys",-1586012071,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a new sorted set with supplied keys.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.true_QMARK_,new cljs.core.Symbol(null,"true?","true?",-1600332395,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"true?","true?",-1600332395,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if x is the value true, false otherwise.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.pop_BANG_,new cljs.core.Symbol(null,"pop!","pop!",-1253383511,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"pop!","pop!",-1253383511,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"tcoll","tcoll",-1341294481,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns tcoll",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$4(new cljs.core.Symbol(null,"deftype","deftype",1980826088,null),sci.impl.deftype.deftype,sci.impl.namespaces.clojure_core_ns,true),(new sci.lang.Var(cljs.core.unchecked_byte,new cljs.core.Symbol(null,"unchecked-byte","unchecked-byte",1091664664,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"unchecked-byte","unchecked-byte",1091664664,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.unchecked_byte], null),false,false)),sci.impl.namespaces._STAR_2,sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"doto","doto",1252536074,null),sci.impl.namespaces.doto_STAR_),(new sci.lang.Var(cljs.core.reduce_kv,new cljs.core.Symbol(null,"reduce-kv","reduce-kv",1856296400,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"reduce-kv","reduce-kv",1856296400,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"init","init",-234949907,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"defmethod","defmethod",-579171823,null),sci.impl.multimethods.defmethod),(new sci.lang.Var(cljs.core.update_in,new cljs.core.Symbol(null,"update-in","update-in",-1445516941,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"update-in","update-in",-1445516941,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"m","m",-1021758608,null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"k","k",-505765866,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"ks","ks",-754231827,null)], null),new cljs.core.Symbol(null,"f","f",43394975,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"m","m",-1021758608,null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"k","k",-505765866,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"ks","ks",-754231827,null)], null),new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"a","a",-482876059,null)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"m","m",-1021758608,null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"k","k",-505765866,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"ks","ks",-754231827,null)], null),new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"a","a",-482876059,null),new cljs.core.Symbol(null,"b","b",-1172211299,null)], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"m","m",-1021758608,null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"k","k",-505765866,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"ks","ks",-754231827,null)], null),new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"a","a",-482876059,null),new cljs.core.Symbol(null,"b","b",-1172211299,null),new cljs.core.Symbol(null,"c","c",-122660552,null)], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"m","m",-1021758608,null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"k","k",-505765866,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"ks","ks",-754231827,null)], null),new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"a","a",-482876059,null),new cljs.core.Symbol(null,"b","b",-1172211299,null),new cljs.core.Symbol(null,"c","c",-122660552,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"args","args",-1338879193,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.prefer_method,new cljs.core.Symbol(null,"prefer-method","prefer-method",-876100205,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"prefer-method","prefer-method",-876100205,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"multifn","multifn",-1904313150,null),new cljs.core.Symbol(null,"dispatch-val-x","dispatch-val-x",-1545100153,null),new cljs.core.Symbol(null,"dispatch-val-y","dispatch-val-y",1016388320,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"derive","derive",1727397303,null),sci.impl.hierarchies.derive_STAR_,true),(new sci.lang.Var(cljs.core.nfirst,new cljs.core.Symbol(null,"nfirst","nfirst",-554736533,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"nfirst","nfirst",-554736533,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Same as (next (first x))",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.sort_by,new cljs.core.Symbol(null,"sort-by","sort-by",1317932224,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"sort-by","sort-by",1317932224,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"keyfn","keyfn",-1874375437,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"keyfn","keyfn",-1874375437,null),new cljs.core.Symbol(null,"comp","comp",-1462482139,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison function, or a -/0/+ valued comparator.\n   Comp defaults to compare.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.parser.data_readers,(new sci.lang.Var(cljs.core.keys,new cljs.core.Symbol(null,"keys","keys",-1586012071,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"keys","keys",-1586012071,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"map","map",-1282745308,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a sequence of the map's keys, in the same order as (seq map).",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"ancestors","ancestors",864486103,null),sci.impl.hierarchies.ancestors_STAR_,true),(new sci.lang.Var(cljs.core.first,new cljs.core.Symbol(null,"first","first",996428481,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"first","first",996428481,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.butlast,new cljs.core.Symbol(null,"butlast","butlast",1573039585,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"butlast","butlast",1573039585,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return a seq of all but the last item in coll, in linear time",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"with-out-str","with-out-str",-140201577,null),sci.impl.io.with_out_str),(new sci.lang.Var(cljs.core.partition_by,new cljs.core.Symbol(null,"partition-by","partition-by",-1329938249,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"partition-by","partition-by",-1329938249,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.uri_QMARK_,new cljs.core.Symbol(null,"uri?","uri?",2029475116,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"uri?","uri?",2029475116,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true x is a goog.Uri instance.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.map_entry_QMARK_,new cljs.core.Symbol(null,"map-entry?","map-entry?",1140615277,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"map-entry?","map-entry?",1140615277,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if x satisfies IMapEntry",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.simple_keyword_QMARK_,new cljs.core.Symbol(null,"simple-keyword?","simple-keyword?",-367134735,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"simple-keyword?","simple-keyword?",-367134735,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return true if x is a keyword without a namespace",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.into_array,new cljs.core.Symbol(null,"into-array","into-array",-1875808354,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"into-array","into-array",-1875808354,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"aseq","aseq",-1865515628,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"type","type",-1480165421,null),new cljs.core.Symbol(null,"aseq","aseq",-1865515628,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns an array with components set to the values in aseq. Optional type\n  argument accepted for compatibility with Clojure.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"ns-refers","ns-refers",-2030918515,null),sci.impl.namespaces.sci_ns_refers,true),(new sci.lang.Var(cljs.core.rest,new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.seq,new cljs.core.Symbol(null,"seq","seq",-177272256,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"seq","seq",-177272256,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.unchecked_inc_int,new cljs.core.Symbol(null,"unchecked-inc-int","unchecked-inc-int",1402783397,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"unchecked-inc-int","unchecked-inc-int",1402783397,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.unchecked_inc_int], null),false,false)),(new sci.lang.Var(cljs.core.hash_combine,new cljs.core.Symbol(null,"hash-combine","hash-combine",1136881997,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"hash-combine","hash-combine",1136881997,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"seed","seed",1709144854,null),new cljs.core.Symbol(null,"hash","hash",1626749931,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"ns-unalias","ns-unalias",445102632,null),sci.impl.namespaces.sci_ns_unalias,true),(new sci.lang.Var(cljs.core.odd_QMARK_,new cljs.core.Symbol(null,"odd?","odd?",-1458588199,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"odd?","odd?",-1458588199,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if n is odd, throws an exception if n is not an integer",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.partition,new cljs.core.Symbol(null,"partition","partition",-1479695018,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"partition","partition",-1479695018,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null),new cljs.core.Symbol(null,"step","step",-1365547645,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null),new cljs.core.Symbol(null,"step","step",-1365547645,null),new cljs.core.Symbol(null,"pad","pad",1603796986,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition up to n items. In case there are\n  not enough padding elements, return a partition with less than n items.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core._GT__EQ_,new cljs.core.Symbol(null,">=",">=",1016916022,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,">=",">=",1016916022,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core._GT__EQ_], null),false,false)),(new sci.lang.Var(cljs.core.fnext,new cljs.core.Symbol(null,"fnext","fnext",1424835295,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"fnext","fnext",1424835295,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Same as (first (next x))",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"when-first","when-first",821699168,null),sci.impl.namespaces.when_first_STAR_),(new sci.lang.Var(cljs.core.bit_or,new cljs.core.Symbol(null,"bit-or","bit-or",-1144943723,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"bit-or","bit-or",-1144943723,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Bitwise or",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.bit_or], null),false,false)),(new sci.lang.Var(cljs.core.disj,new cljs.core.Symbol(null,"disj","disj",-1076545178,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"disj","disj",-1076545178,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null),new cljs.core.Symbol(null,"k","k",-505765866,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null),new cljs.core.Symbol(null,"k","k",-505765866,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"ks","ks",-754231827,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"with-redefs-fn","with-redefs-fn",-595725379,null),sci.impl.namespaces.sci_with_redefs_fn),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"-new-var","-new-var",1200468147,null),(function (){
return sci.impl.utils.new_var.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym.cljs$core$IFn$_invoke$arity$0(),null);
})),(new sci.lang.Var(cljs.core.unchecked_short,new cljs.core.Symbol(null,"unchecked-short","unchecked-short",27848057,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"unchecked-short","unchecked-short",27848057,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.unchecked_short], null),false,false)),(new sci.lang.Var(cljs.core.ffirst,new cljs.core.Symbol(null,"ffirst","ffirst",-694902000,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"ffirst","ffirst",-694902000,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Same as (first (first x))",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"condp","condp",1054325175,null),sci.impl.namespaces.condp_STAR_),(new sci.lang.Var(cljs.core.munge,new cljs.core.Symbol(null,"munge","munge",-174396700,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"munge","munge",-174396700,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"name","name",-810760592,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.utils.current_file,(new sci.lang.Var(cljs.core.unchecked_negate_int,new cljs.core.Symbol(null,"unchecked-negate-int","unchecked-negate-int",-825297602,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"unchecked-negate-int","unchecked-negate-int",-825297602,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.unchecked_negate_int], null),false,false)),(new sci.lang.Var(sci.impl.io.print_str,new cljs.core.Symbol(null,"print-str","print-str",-699700354,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"print-str","print-str",-699700354,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"objs","objs",-170194107,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"print to a string, returning it",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.vreset_BANG_,new cljs.core.Symbol(null,"vreset!","vreset!",1237177091,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"vreset!","vreset!",1237177091,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"vol","vol",1137570949,null),new cljs.core.Symbol(null,"newval","newval",717803975,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Sets the value of volatile to newval without regard for the\n   current value. Returns newval.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.uuid_QMARK_,new cljs.core.Symbol(null,"uuid?","uuid?",400077689,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"uuid?","uuid?",400077689,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"reset!","reset!",527275632,null),sci.impl.core_protocols.reset_BANG__STAR_),sci.impl.utils.new_var.cljs$core$IFn$_invoke$arity$3(new cljs.core.Symbol(null,"IRecord","IRecord",-903221169,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"protocol","protocol",652470118),cljs.core.IRecord,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null)),(new sci.lang.Var(sci.impl.namespaces.memfn,new cljs.core.Symbol(null,"memfn","memfn",-881453486,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"memfn","memfn",-881453486,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),null,new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword(null,"macro","macro",-867863404),true], null),false,false)),(new sci.lang.Var(cljs.core.atom,new cljs.core.Symbol(null,"atom","atom",1243487874,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"atom","atom",1243487874,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"keys","keys",1068423698),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"meta","meta",-1154898805,null),new cljs.core.Symbol(null,"validator","validator",-325659154,null)], null)], null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will become the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.select_keys,new cljs.core.Symbol(null,"select-keys","select-keys",-708556589,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"select-keys","select-keys",-708556589,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"map","map",-1282745308,null),new cljs.core.Symbol(null,"keyseq","keyseq",-1822150828,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a map containing only those entries in map whose key is in keys",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.reverse,new cljs.core.Symbol(null,"reverse","reverse",752076261,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"reverse","reverse",752076261,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a seq of the items in coll in reverse order. Not lazy.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(sci.impl.namespaces.ex_message,new cljs.core.Symbol(null,"ex-message","ex-message",-1128293394,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"ex-message","ex-message",-1128293394,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"ex","ex",226760186,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.special_symbol_QMARK_,new cljs.core.Symbol(null,"special-symbol?","special-symbol?",-731144617,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"special-symbol?","special-symbol?",-731144617,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if x names a special form",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.merge,new cljs.core.Symbol(null,"merge","merge",-163787882,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"merge","merge",-163787882,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"maps","maps",-71029607,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.inst_ms,new cljs.core.Symbol(null,"inst-ms","inst-ms",-653961375,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"inst-ms","inst-ms",-653961375,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"inst","inst",-2008473268,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return the number of milliseconds since January 1, 1970, 00:00:00 GMT",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(sci.impl.io.newline,new cljs.core.Symbol(null,"newline","newline",-864364446,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"newline","newline",-864364446,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.unchecked_multiply,new cljs.core.Symbol(null,"unchecked-multiply","unchecked-multiply",-1019161490,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"unchecked-multiply","unchecked-multiply",-1019161490,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the product of nums. (*) returns 1.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.unchecked_multiply], null),false,false)),sci.impl.io.print_readably,sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"..","..",-300507420,null),sci.impl.namespaces.double_dot),(new sci.lang.Var(cljs.core.chunked_seq_QMARK_,new cljs.core.Symbol(null,"chunked-seq?","chunked-seq?",1044846168,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"chunked-seq?","chunked-seq?",1044846168,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return true if x satisfies IChunkedSeq.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.inst_QMARK_,new cljs.core.Symbol(null,"inst?","inst?",1614698981,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"inst?","inst?",1614698981,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return true if x satisfies Inst",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.random_sample,new cljs.core.Symbol(null,"random-sample","random-sample",-914181101,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"random-sample","random-sample",-914181101,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"prob","prob",1133230269,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"prob","prob",1133230269,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core._GT_,new cljs.core.Symbol(null,">",">",1085014381,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,">",">",1085014381,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core._GT_], null),false,false)),sci.impl.parser.read_eval,(new sci.lang.Var(cljs.core.count,new cljs.core.Symbol(null,"count","count",-514511684,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"count","count",-514511684,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.count], null),false,false)),(new sci.lang.Var(cljs.core.simple_ident_QMARK_,new cljs.core.Symbol(null,"simple-ident?","simple-ident?",194189851,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"simple-ident?","simple-ident?",194189851,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return true if x is a symbol or keyword without a namespace",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"ns-name","ns-name",-436814796,null),sci.impl.namespaces.sci_ns_name),sci.impl.namespaces._STAR_1,(new sci.lang.Var(cljs.core.last,new cljs.core.Symbol(null,"last","last",-1548700637,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"last","last",-1548700637,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return the last item in coll, in linear time",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.bit_shift_left,new cljs.core.Symbol(null,"bit-shift-left","bit-shift-left",-1814765981,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"bit-shift-left","bit-shift-left",-1814765981,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"n","n",-2092305744,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Bitwise shift left",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.bit_shift_left], null),false,false)),(new sci.lang.Var(cljs.core.int$,new cljs.core.Symbol(null,"int","int",-100885395,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"int","int",-100885395,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Coerce to int by stripping decimal places.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.int$], null),false,false)),(new sci.lang.Var(cljs.core.unchecked_negate,new cljs.core.Symbol(null,"unchecked-negate","unchecked-negate",-1669067451,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"unchecked-negate","unchecked-negate",-1669067451,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.unchecked_negate], null),false,false)),(new sci.lang.Var(sci.impl.multimethods.multi_fn_impl,new cljs.core.Symbol(null,"multi-fn-impl","multi-fn-impl",187651105,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"multi-fn-impl","multi-fn-impl",187651105,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"name","name",-810760592,null),new cljs.core.Symbol(null,"dispatch-fn","dispatch-fn",-1401088155,null),new cljs.core.Symbol(null,"default","default",-347290801,null),new cljs.core.Symbol(null,"hierarchy","hierarchy",587061186,null),new cljs.core.Symbol(null,"method-table","method-table",-1878263165,null),new cljs.core.Symbol(null,"prefer-table","prefer-table",462168584,null),new cljs.core.Symbol(null,"method-cache","method-cache",1230193905,null),new cljs.core.Symbol(null,"cached-hierarchy","cached-hierarchy",-1085460203,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.unchecked_remainder_int,new cljs.core.Symbol(null,"unchecked-remainder-int","unchecked-remainder-int",1427188224,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"unchecked-remainder-int","unchecked-remainder-int",1427188224,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"n","n",-2092305744,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.unchecked_remainder_int], null),false,false)),(new sci.lang.Var(cljs.core.byte$,new cljs.core.Symbol(null,"byte","byte",-1970660549,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"byte","byte",-1970660549,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.byte$], null),false,false)),(new sci.lang.Var(cljs.core.conj_BANG_,new cljs.core.Symbol(null,"conj!","conj!",-841007895,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"conj!","conj!",-841007895,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"tcoll","tcoll",-1341294481,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"tcoll","tcoll",-1341294481,null),new cljs.core.Symbol(null,"val","val",1769233139,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"tcoll","tcoll",-1341294481,null),new cljs.core.Symbol(null,"val","val",1769233139,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"vals","vals",-1886377036,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Adds val to the transient collection, and return tcoll. The 'addition'\n  may happen at different 'places' depending on the concrete type.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(sci.impl.io.println,new cljs.core.Symbol(null,"println","println",-733595439,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"println","println",-733595439,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"objs","objs",-170194107,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$4(new cljs.core.Symbol(null,"defprotocol","defprotocol",1388695348,null),sci.impl.protocols.defprotocol,sci.impl.namespaces.clojure_core_ns,true),(new sci.lang.Var(cljs.core.int_QMARK_,new cljs.core.Symbol(null,"int?","int?",1799729645,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"int?","int?",1799729645,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return true if x satisfies integer? or is an instance of goog.math.Integer\n   or goog.math.Long.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.long_array,new cljs.core.Symbol(null,"long-array","long-array",217579190,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"long-array","long-array",217579190,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"size-or-seq","size-or-seq",-2062823589,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"size","size",-1555742762,null),new cljs.core.Symbol(null,"init-val-or-seq","init-val-or-seq",-1168783320,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Creates an array of longs. Does not coerce array, provided for compatibility\n  with Clojure.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.long_array], null),false,false)),(new sci.lang.Var(cljs.core.find,new cljs.core.Symbol(null,"find","find",2136810983,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"find","find",2136810983,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null),new cljs.core.Symbol(null,"k","k",-505765866,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the map entry for key, or nil if key not present.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.vals,new cljs.core.Symbol(null,"vals","vals",-1886377036,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"vals","vals",-1886377036,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"map","map",-1282745308,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a sequence of the map's values, in the same order as (seq map).",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.nil_QMARK_,new cljs.core.Symbol(null,"nil?","nil?",1612038930,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"nil?","nil?",1612038930,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if x is nil, false otherwise.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.nil_QMARK_], null),false,false)),(new sci.lang.Var(sci.impl.io.flush,new cljs.core.Symbol(null,"flush","flush",501820328,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"flush","flush",501820328,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.hash,new cljs.core.Symbol(null,"hash","hash",1626749931,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"hash","hash",1626749931,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"o","o",290524299,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the hash code of its argument. Note this is the hash code\n   consistent with =.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(sci.impl.io.pr,new cljs.core.Symbol(null,"pr","pr",1056937027,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"pr","pr",1056937027,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"objs","objs",-170194107,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.unchecked_subtract,new cljs.core.Symbol(null,"unchecked-subtract","unchecked-subtract",-2137458667,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"unchecked-subtract","unchecked-subtract",-2137458667,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.unchecked_subtract], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"comment","comment",-2122229700,null),sci.impl.namespaces.comment_STAR_),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"with-redefs","with-redefs",-1143728263,null),sci.impl.namespaces.sci_with_redefs),(new sci.lang.Var(cljs.core.js_delete,new cljs.core.Symbol(null,"js-delete","js-delete",170306730,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"js-delete","js-delete",170306730,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"obj","obj",-1672671807,null),new cljs.core.Symbol(null,"key","key",124488940,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Delete a property from a JavaScript object.\n  Returns true upon success, false otherwise.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.float_QMARK_,new cljs.core.Symbol(null,"float?","float?",673884616,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"float?","float?",673884616,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true for JavaScript numbers, false otherwise.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.second,new cljs.core.Symbol(null,"second","second",1195829517,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"second","second",1195829517,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Same as (first (next x))",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$4(new cljs.core.Symbol(null,"extend-protocol","extend-protocol",306378578,null),sci.impl.protocols.extend_protocol,sci.impl.namespaces.clojure_core_ns,true),sci.impl.io.err,(new sci.lang.Var(cljs.core.array_QMARK_,new cljs.core.Symbol(null,"array?","array?",-1249008197,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"array?","array?",-1249008197,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if x is a JavaScript array.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.chunk_first,new cljs.core.Symbol(null,"chunk-first","chunk-first",1379046752,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"chunk-first","chunk-first",1379046752,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"alias","alias",-399220103,null),sci.impl.namespaces.sci_alias,true),(new sci.lang.Var(cljs.core._write,new cljs.core.Symbol(null,"-write","-write",1999625154,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"-write","-write",1999625154,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"writer","writer",1362963291,null),new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Writes s with writer and returns the result.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.unchecked_add_int,new cljs.core.Symbol(null,"unchecked-add-int","unchecked-add-int",-1821763285,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"unchecked-add-int","unchecked-add-int",-1821763285,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the sum of nums. (+) returns 0.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.unchecked_add_int], null),false,false)),(new sci.lang.Var(cljs.core.ifn_QMARK_,new cljs.core.Symbol(null,"ifn?","ifn?",-2106461064,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"ifn?","ifn?",-2106461064,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if f returns true for fn? or satisfies IFn.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.ex_info,new cljs.core.Symbol(null,"ex-info","ex-info",-539875240,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"ex-info","ex-info",-539875240,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"msg","msg",254428083,null),new cljs.core.Symbol(null,"data","data",1407862150,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"msg","msg",254428083,null),new cljs.core.Symbol(null,"data","data",1407862150,null),new cljs.core.Symbol(null,"cause","cause",1872432779,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.inc,new cljs.core.Symbol(null,"inc","inc",324505433,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"inc","inc",324505433,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a number one greater than num.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.inc], null),false,false)),(new sci.lang.Var(cljs.core._SLASH_,new cljs.core.Symbol(null,"/","/",-1371932971,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"/","/",-1371932971,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core._SLASH_], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"amap","amap",635923055,null),sci.impl.namespaces.amap_STAR_),(new sci.lang.Var(cljs.core.volatile_BANG_,new cljs.core.Symbol(null,"volatile!","volatile!",919368405,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"volatile!","volatile!",919368405,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"val","val",1769233139,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Creates and returns a Volatile with an initial value of val.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.with_meta,new cljs.core.Symbol(null,"with-meta","with-meta",73674707,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"with-meta","with-meta",73674707,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"o","o",290524299,null),new cljs.core.Symbol(null,"meta","meta",-1154898805,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns an object of the same type and value as obj, with\n  map m as its metadata.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.map_QMARK_,new cljs.core.Symbol(null,"map?","map?",-1780568534,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"map?","map?",-1780568534,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return true if x satisfies IMap",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.vector_QMARK_,new cljs.core.Symbol(null,"vector?","vector?",-61367869,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"vector?","vector?",-61367869,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return true if x satisfies IVector",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"->>","->>",-1874332161,null),sci.impl.namespaces.__GT__GT__STAR_),(new sci.lang.Var(cljs.core.quot,new cljs.core.Symbol(null,"quot","quot",-1125214196,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"quot","quot",-1125214196,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null),new cljs.core.Symbol(null,"d","d",-682293345,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"quot[ient] of dividing numerator by denominator.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.quot], null),false,false)),(new sci.lang.Var(cljs.core.any_QMARK_,new cljs.core.Symbol(null,"any?","any?",-318999933,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"any?","any?",-318999933,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if given any argument.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.io.print_newline,(new sci.lang.Var(cljs.core.unchecked_add,new cljs.core.Symbol(null,"unchecked-add","unchecked-add",-2030665965,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"unchecked-add","unchecked-add",-2030665965,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the sum of nums. (+) returns 0.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.unchecked_add], null),false,false)),(new sci.lang.Var(cljs.core.floats,new cljs.core.Symbol(null,"floats","floats",513591110,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"floats","floats",513591110,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.floats], null),false,false)),(new sci.lang.Var(cljs.core.drop_while,new cljs.core.Symbol(null,"drop-while","drop-while",719206685,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"drop-while","drop-while",719206685,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"pred","pred",-727012372,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"pred","pred",-727012372,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.bounded_count,new cljs.core.Symbol(null,"bounded-count","bounded-count",1030640883,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"bounded-count","bounded-count",1030640883,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"If coll is counted? returns its count, else will count at most the first n\n   elements of coll using its seq",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.take_while,new cljs.core.Symbol(null,"take-while","take-while",2007268328,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"take-while","take-while",2007268328,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"pred","pred",-727012372,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"pred","pred",-727012372,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy sequence of successive items from coll while\n  (pred item) returns logical true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(sci.impl.protocols.extends_QMARK_,new cljs.core.Symbol(null,"extends?","extends?",-2012201234,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"extends?","extends?",-2012201234,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"protocol","protocol",-2001965651,null),new cljs.core.Symbol(null,"atype","atype",-782388665,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if atype extends protocol",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.sort,new cljs.core.Symbol(null,"sort","sort",-1700969851,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"sort","sort",-1700969851,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"comp","comp",-1462482139,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison function, or a -/0/+ valued comparator.\n   Comp defaults to compare.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.false_QMARK_,new cljs.core.Symbol(null,"false?","false?",-1522377573,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"false?","false?",-1522377573,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if x is the value false, false otherwise.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.cat,new cljs.core.Symbol(null,"cat","cat",182721320,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"cat","cat",182721320,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"rf","rf",-651557526,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"A transducer which concatenates the contents of each input, which must be a\n  collection, into the reduction.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$4(new cljs.core.Symbol(null,"extend-type","extend-type",1123355921,null),sci.impl.protocols.extend_type,sci.impl.namespaces.clojure_core_ns,true),sci.impl.io.print_level,(new sci.lang.Var(cljs.core.replace,new cljs.core.Symbol(null,"replace","replace",853943757,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"replace","replace",853943757,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"smap","smap",-2041991975,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"smap","smap",-2041991975,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"doseq","doseq",221164135,null),sci.impl.doseq_macro.expand_doseq),(new sci.lang.Var(cljs.core.drop,new cljs.core.Symbol(null,"drop","drop",2005013138,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"drop","drop",2005013138,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"pre","pre",2118456869),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(null,"number?","number?",-1747282210,null),new cljs.core.Symbol(null,"n","n",-2092305744,null))], null)], null)),cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"pre","pre",2118456869),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(null,"number?","number?",-1747282210,null),new cljs.core.Symbol(null,"n","n",-2092305744,null))], null)], null))),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(sci.impl.vars.push_thread_bindings,new cljs.core.Symbol(null,"push-thread-bindings","push-thread-bindings",1054019843,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"push-thread-bindings","push-thread-bindings",1054019843,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"bindings","bindings",-1383038577,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.not,new cljs.core.Symbol(null,"not","not",1044554643,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"not","not",1044554643,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if x is logical false, false otherwise.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.keep,new cljs.core.Symbol(null,"keep","keep",-492807003,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"keep","keep",-492807003,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.cons,new cljs.core.Symbol(null,"cons","cons",755448454,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"cons","cons",755448454,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a new seq where x is the first element and coll is the rest.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces._STAR_e,(new sci.lang.Var(cljs.core.bit_shift_right,new cljs.core.Symbol(null,"bit-shift-right","bit-shift-right",884046498,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"bit-shift-right","bit-shift-right",884046498,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"n","n",-2092305744,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Bitwise shift right",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.bit_shift_right], null),false,false)),(new sci.lang.Var(cljs.core.associative_QMARK_,new cljs.core.Symbol(null,"associative?","associative?",-141666771,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"associative?","associative?",-141666771,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if coll implements IAssociative",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"read","read",-1514377108,null),sci.impl.read.read,true),(function (){var G__71945 = sci.impl.utils.new_var.cljs$core$IFn$_invoke$arity$3(new cljs.core.Symbol(null,"unquote","unquote",-1004694737,null),null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null));
sci.impl.vars.unbind(G__71945);

return G__71945;
})(),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"macroexpand","macroexpand",1509933344,null),sci.impl.namespaces.macroexpand_STAR_,true),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"create-ns","create-ns",-782886354,null),sci.impl.namespaces.sci_create_ns,true),sci.impl.io.print_err_fn,sci.impl.io.print_length,sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"if-not","if-not",-265415609,null),sci.impl.namespaces.if_not_STAR_),(new sci.lang.Var(cljs.core.chunk_next,new cljs.core.Symbol(null,"chunk-next","chunk-next",-547810434,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"chunk-next","chunk-next",-547810434,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(sci.impl.vars.var_set,new cljs.core.Symbol(null,"var-set","var-set",-1361408121,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"var-set","var-set",-1361408121,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"v","v",1661996586,null),new cljs.core.Symbol(null,"val","val",1769233139,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.bit_flip,new cljs.core.Symbol(null,"bit-flip","bit-flip",809639606,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"bit-flip","bit-flip",809639606,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"n","n",-2092305744,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Flip bit at index n",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.aset,new cljs.core.Symbol(null,"aset","aset",900773178,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"aset","aset",900773178,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"array","array",-440182315,null),new cljs.core.Symbol(null,"idx","idx",-1600747296,null),new cljs.core.Symbol(null,"val","val",1769233139,null)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"array","array",-440182315,null),new cljs.core.Symbol(null,"idx","idx",-1600747296,null),new cljs.core.Symbol(null,"idx2","idx2",195459820,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"idxv","idxv",-1163260636,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Sets the value at the index/indices. Works on JavaScript arrays.\n  Returns val.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.aset], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"-deref","-deref",-283116853,null),sci.impl.core_protocols._deref),sci.impl.utils.current_ns,(new sci.lang.Var(cljs.core.some_fn,new cljs.core.Symbol(null,"some-fn","some-fn",-490044165,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"some-fn","some-fn",-490044165,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"p","p",1791580836,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"p1","p1",703771573,null),new cljs.core.Symbol(null,"p2","p2",-1748935128,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"p1","p1",703771573,null),new cljs.core.Symbol(null,"p2","p2",-1748935128,null),new cljs.core.Symbol(null,"p3","p3",-923395030,null)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"p1","p1",703771573,null),new cljs.core.Symbol(null,"p2","p2",-1748935128,null),new cljs.core.Symbol(null,"p3","p3",-923395030,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"ps","ps",1932889573,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(sci.impl.utils.var_QMARK_,new cljs.core.Symbol(null,"var?","var?",230455531,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"var?","var?",230455531,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.io.print_meta,sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"when-not","when-not",-1223136340,null),sci.impl.namespaces.when_not_STAR_),(new sci.lang.Var(cljs.core.unchecked_multiply_int,new cljs.core.Symbol(null,"unchecked-multiply-int","unchecked-multiply-int",-788546068,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"unchecked-multiply-int","unchecked-multiply-int",-788546068,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the product of nums. (*) returns 1.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.unchecked_multiply_int], null),false,false)),(new sci.lang.Var(cljs.core.identity,new cljs.core.Symbol(null,"identity","identity",-1007039734,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"identity","identity",-1007039734,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns its argument.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"-reset!","-reset!",1965723739,null),sci.impl.core_protocols._reset_BANG_),(new sci.lang.Var(cljs.core.to_array,new cljs.core.Symbol(null,"to-array","to-array",-585705189,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"to-array","to-array",-585705189,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns an array containing the contents of coll.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.double_array,new cljs.core.Symbol(null,"double-array","double-array",257035726,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"double-array","double-array",257035726,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"size-or-seq","size-or-seq",-2062823589,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"size","size",-1555742762,null),new cljs.core.Symbol(null,"init-val-or-seq","init-val-or-seq",-1168783320,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Creates an array of doubles. Does not coerce array, provided for compatibility\n  with Clojure.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.double_array], null),false,false)),(new sci.lang.Var(cljs.core.sorted_map,new cljs.core.Symbol(null,"sorted-map","sorted-map",-521216771,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"sorted-map","sorted-map",-521216771,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"keyvals","keyvals",-2067234787,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"keyval => key val\n  Returns a new sorted map with supplied mappings.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"-reified-methods","-reified-methods",1702712518,null),(function (p1__71451_SHARP_){
return sci.impl.types.getMethods(p1__71451_SHARP_);
})),(new sci.lang.Var(cljs.core.concat,new cljs.core.Symbol(null,"concat","concat",-467652465,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"concat","concat",-467652465,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"zs","zs",-257004521,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy seq representing the concatenation of the elements in the supplied colls.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.char$,new cljs.core.Symbol(null,"char","char",998943941,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"char","char",998943941,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Coerce to char",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.char$], null),false,false)),(new sci.lang.Var(cljs.core.ident_QMARK_,new cljs.core.Symbol(null,"ident?","ident?",-2061359468,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"ident?","ident?",-2061359468,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return true if x is a symbol or keyword",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.make_array,new cljs.core.Symbol(null,"make-array","make-array",-1135103906,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"make-array","make-array",-1135103906,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"size","size",-1555742762,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"type","type",-1480165421,null),new cljs.core.Symbol(null,"size","size",-1555742762,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"type","type",-1480165421,null),new cljs.core.Symbol(null,"size","size",-1555742762,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more-sizes","more-sizes",-763736162,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Construct a JavaScript array of the specified dimensions. Accepts ignored\n  type argument for compatibility with Clojure. Note that there is no efficient\n  way to allocate multi-dimensional arrays in JavaScript; as such, this function\n  will run in polynomial time when called with 3 or more arguments.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.chunk_buffer,new cljs.core.Symbol(null,"chunk-buffer","chunk-buffer",789680287,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"chunk-buffer","chunk-buffer",789680287,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"capacity","capacity",1713221261,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.peek,new cljs.core.Symbol(null,"peek","peek",1349135202,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"peek","peek",1349135202,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.hash_unordered_coll,new cljs.core.Symbol(null,"hash-unordered-coll","hash-unordered-coll",-240471618,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"hash-unordered-coll","hash-unordered-coll",-240471618,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"when","when",1064114221,null),sci.impl.namespaces.when_STAR_),(new sci.lang.Var(cljs.core.clj__GT_js,new cljs.core.Symbol(null,"clj->js","clj->js",-1880244676,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"clj->js","clj->js",-1880244676,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"keys","keys",1068423698),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"keyword-fn","keyword-fn",1575964852,null)], null),new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null,"keyword-fn","keyword-fn",1575964852,null),new cljs.core.Symbol(null,"name","name",-810760592,null)], null),new cljs.core.Keyword(null,"as","as",1148689641),new cljs.core.Symbol(null,"options","options",1740170016,null)], null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Recursively transforms ClojureScript values to JavaScript.\n  sets/vectors/lists become Arrays, Keywords and Symbol become Strings,\n  Maps become Objects. Arbitrary keys are encoded to by `key->js`.\n  Options is a key-value pair, where the only valid key is\n  :keyword-fn, which should point to a single-argument function to be\n  called on keyword keys. Default to `name`.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.sequence,new cljs.core.Symbol(null,"sequence","sequence",-1727628355,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"sequence","sequence",-1727628355,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"xform","xform",-85179481,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"xform","xform",-85179481,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"colls","colls",-397642425,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.group_by,new cljs.core.Symbol(null,"group-by","group-by",1261391725,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"group-by","group-by",1261391725,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.re_seq,new cljs.core.Symbol(null,"re-seq","re-seq",-2105554076,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"re-seq","re-seq",-2105554076,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"re","re",1869207729,null),new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy sequence of successive matches of re in s.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"-swap!","-swap!",-535359318,null),sci.impl.core_protocols._swap_BANG_),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"when-some","when-some",1700415903,null),sci.impl.namespaces.when_some_STAR_),(new sci.lang.Var(cljs.core.unchecked_subtract_int,new cljs.core.Symbol(null,"unchecked-subtract-int","unchecked-subtract-int",-1899147615,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"unchecked-subtract-int","unchecked-subtract-int",-1899147615,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.unchecked_subtract_int], null),false,false)),(new sci.lang.Var(cljs.core._LT__EQ_,new cljs.core.Symbol(null,"<=","<=",1244895369,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"<=","<=",1244895369,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core._LT__EQ_], null),false,false)),(new sci.lang.Var(cljs.core.prefers,new cljs.core.Symbol(null,"prefers","prefers",-374265406,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"prefers","prefers",-374265406,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"multifn","multifn",-1904313150,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Given a multimethod, returns a map of preferred value -> set of other values",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.vary_meta,new cljs.core.Symbol(null,"vary-meta","vary-meta",-1580067831,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"vary-meta","vary-meta",-1580067831,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"obj","obj",-1672671807,null),new cljs.core.Symbol(null,"f","f",43394975,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"obj","obj",-1672671807,null),new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"a","a",-482876059,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"obj","obj",-1672671807,null),new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"a","a",-482876059,null),new cljs.core.Symbol(null,"b","b",-1172211299,null)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"obj","obj",-1672671807,null),new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"a","a",-482876059,null),new cljs.core.Symbol(null,"b","b",-1172211299,null),new cljs.core.Symbol(null,"c","c",-122660552,null)], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"obj","obj",-1672671807,null),new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"a","a",-482876059,null),new cljs.core.Symbol(null,"b","b",-1172211299,null),new cljs.core.Symbol(null,"c","c",-122660552,null),new cljs.core.Symbol(null,"d","d",-682293345,null)], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"obj","obj",-1672671807,null),new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"a","a",-482876059,null),new cljs.core.Symbol(null,"b","b",-1172211299,null),new cljs.core.Symbol(null,"c","c",-122660552,null),new cljs.core.Symbol(null,"d","d",-682293345,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"args","args",-1338879193,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core._EQ_,new cljs.core.Symbol(null,"=","=",-1501502141,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"=","=",-1501502141,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core._EQ_], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"intern","intern",1664352151,null),sci.impl.namespaces.sci_intern,true),(new sci.lang.Var(cljs.core.keep_indexed,new cljs.core.Symbol(null,"keep-indexed","keep-indexed",-2020916352,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"keep-indexed","keep-indexed",-2020916352,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.js_obj,new cljs.core.Symbol(null,"js-obj","js-obj",342383250,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"js-obj","js-obj",342383250,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"keyvals","keyvals",-2067234787,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Create JavaSript object from an even number arguments representing\n  interleaved keys and values.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.every_QMARK_,new cljs.core.Symbol(null,"every?","every?",2083724064,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"every?","every?",2083724064,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"pred","pred",-727012372,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if (pred x) is logical true for every x in coll, else\n  false.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.comp,new cljs.core.Symbol(null,"comp","comp",-1462482139,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"comp","comp",-1462482139,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"g","g",-916345864,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"g","g",-916345864,null),new cljs.core.Symbol(null,"h","h",-1544777029,null)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f1","f1",-939903380,null),new cljs.core.Symbol(null,"f2","f2",2036700123,null),new cljs.core.Symbol(null,"f3","f3",-699606726,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"fs","fs",-482394717,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.bit_set,new cljs.core.Symbol(null,"bit-set","bit-set",-910710655,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"bit-set","bit-set",-910710655,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"n","n",-2092305744,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Set bit at index n",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.dissoc,new cljs.core.Symbol(null,"dissoc","dissoc",1039760994,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"dissoc","dissoc",1039760994,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null),new cljs.core.Symbol(null,"k","k",-505765866,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null),new cljs.core.Symbol(null,"k","k",-505765866,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"ks","ks",-754231827,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.min,new cljs.core.Symbol(null,"min","min",2085523049,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"min","min",2085523049,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the least of the nums.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.min], null),false,false)),(new sci.lang.Var(cljs.core.char_QMARK_,new cljs.core.Symbol(null,"char?","char?",-1072221244,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"char?","char?",-1072221244,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if x is a JavaScript string of length one.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"with-open","with-open",172119667,null),sci.impl.namespaces.with_open_STAR_),(new sci.lang.Var(cljs.core.interleave,new cljs.core.Symbol(null,"interleave","interleave",165488106,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"interleave","interleave",165488106,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"c1","c1",-1521904966,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"c1","c1",-1521904966,null),new cljs.core.Symbol(null,"c2","c2",78651156,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"c1","c1",-1521904966,null),new cljs.core.Symbol(null,"c2","c2",78651156,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"colls","colls",-397642425,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy seq of the first item in each coll, then the second etc.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"declare","declare",654042991,null),sci.impl.namespaces.declare_STAR_),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"with-local-vars","with-local-vars",837642072,null),sci.impl.namespaces.with_local_vars_STAR_),(new sci.lang.Var(sci.impl.namespaces.sci_bound_QMARK_,new cljs.core.Symbol(null,"bound?","bound?",767722602,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"bound?","bound?",767722602,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),null,new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"all-ns","all-ns",1571857784,null),sci.impl.namespaces.sci_all_ns,true),(new sci.lang.Var(cljs.core.split_at,new cljs.core.Symbol(null,"split-at","split-at",-60953742,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"split-at","split-at",-60953742,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a vector of [(take n coll) (drop n coll)]",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.neg_int_QMARK_,new cljs.core.Symbol(null,"neg-int?","neg-int?",-1610409390,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"neg-int?","neg-int?",-1610409390,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return true if x satisfies int? and is negative.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.mapv,new cljs.core.Symbol(null,"mapv","mapv",-241595241,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"mapv","mapv",-241595241,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"c1","c1",-1521904966,null),new cljs.core.Symbol(null,"c2","c2",78651156,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"c1","c1",-1521904966,null),new cljs.core.Symbol(null,"c2","c2",78651156,null),new cljs.core.Symbol(null,"c3","c3",468715789,null)], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"c1","c1",-1521904966,null),new cljs.core.Symbol(null,"c2","c2",78651156,null),new cljs.core.Symbol(null,"c3","c3",468715789,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"colls","colls",-397642425,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"defonce","defonce",-1681484013,null),sci.impl.namespaces.defonce_STAR_),(new sci.lang.Var(sci.impl.io.prn,new cljs.core.Symbol(null,"prn","prn",1561684909,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"prn","prn",1561684909,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"objs","objs",-170194107,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.drop_last,new cljs.core.Symbol(null,"drop-last","drop-last",-1123611530,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"drop-last","drop-last",-1123611530,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null),new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return a lazy sequence of all but the last n (default 1) items in coll",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(sci.impl.namespaces.with_bindings_STAR_,new cljs.core.Symbol(null,"with-bindings*","with-bindings*",-93186207,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"with-bindings*","with-bindings*",-93186207,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),null,new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.fnil,new cljs.core.Symbol(null,"fnil","fnil",-187395162,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"fnil","fnil",-187395162,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"z","z",851004344,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"cond->>","cond->>",348844960,null),sci.impl.namespaces.cond__GT__GT__STAR_),(new sci.lang.Var(sci.impl.vars.pop_thread_bindings,new cljs.core.Symbol(null,"pop-thread-bindings","pop-thread-bindings",-1312224790,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"pop-thread-bindings","pop-thread-bindings",-1312224790,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(sci.impl.protocols.satisfies_QMARK_,new cljs.core.Symbol(null,"satisfies?","satisfies?",-433227199,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"satisfies?","satisfies?",-433227199,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"protocol","protocol",-2001965651,null),new cljs.core.Symbol(null,"obj","obj",-1672671807,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.next,new cljs.core.Symbol(null,"next","next",1522830042,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"next","next",1522830042,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core._PLUS_,new cljs.core.Symbol(null,"+","+",-740910886,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"+","+",-740910886,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the sum of nums. (+) returns 0.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core._PLUS_], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"load-string","load-string",-403739145,null),sci.impl.read.load_string,true),(new sci.lang.Var(cljs.core.name,new cljs.core.Symbol(null,"name","name",-810760592,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"name","name",-810760592,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the name String of a string, symbol or keyword.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.unchecked_double,new cljs.core.Symbol(null,"unchecked-double","unchecked-double",-1593778036,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"unchecked-double","unchecked-double",-1593778036,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.unchecked_double], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"when-let","when-let",-1383043480,null),sci.impl.namespaces.when_let_STAR_),(new sci.lang.Var(cljs.core.symbol_QMARK_,new cljs.core.Symbol(null,"symbol?","symbol?",1820680511,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"symbol?","symbol?",1820680511,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return true if x is a Symbol",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.chunk_cons,new cljs.core.Symbol(null,"chunk-cons","chunk-cons",433801405,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"chunk-cons","chunk-cons",433801405,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"chunk","chunk",449371907,null),new cljs.core.Symbol(null,"rest","rest",398835108,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.disj_BANG_,new cljs.core.Symbol(null,"disj!","disj!",-1383872088,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"disj!","disj!",-1383872088,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"tcoll","tcoll",-1341294481,null),new cljs.core.Symbol(null,"val","val",1769233139,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"tcoll","tcoll",-1341294481,null),new cljs.core.Symbol(null,"val","val",1769233139,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"vals","vals",-1886377036,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.__GT_Eduction,new cljs.core.Symbol(null,"->Eduction","->Eduction",-188511967,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"->Eduction","->Eduction",-188511967,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"xform","xform",-85179481,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Positional factory function for cljs.core/Eduction.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"ns-imports","ns-imports",1111168888,null),sci.impl.namespaces.sci_ns_imports,true),(new sci.lang.Var(cljs.core.methods$,new cljs.core.Symbol(null,"methods","methods",2094462393,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"methods","methods",2094462393,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"multifn","multifn",-1904313150,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Given a multimethod, returns a map of dispatch values -> dispatch fns",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.reset_meta_BANG_,new cljs.core.Symbol(null,"reset-meta!","reset-meta!",1699493291,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"reset-meta!","reset-meta!",1699493291,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"iref","iref",-647796531,null),new cljs.core.Symbol(null,"m","m",-1021758608,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Atomically resets the metadata for an atom",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"areduce","areduce",-1873477878,null),sci.impl.namespaces.areduce_STAR_),(new sci.lang.Var(cljs.core.js__GT_clj,new cljs.core.Symbol(null,"js->clj","js->clj",1544462432,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"js->clj","js->clj",1544462432,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"opts","opts",1795607228,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"dotimes","dotimes",-818708397,null),sci.impl.namespaces.dotimes_STAR_),(new sci.lang.Var(cljs.core.rand_int,new cljs.core.Symbol(null,"rand-int","rand-int",-495012157,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"rand-int","rand-int",-495012157,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a random integer between 0 (inclusive) and n (exclusive).",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.complement,new cljs.core.Symbol(null,"complement","complement",-913606051,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"complement","complement",-913606051,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.list_QMARK_,new cljs.core.Symbol(null,"list?","list?",-1494629,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"list?","list?",-1494629,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if x implements IList",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.aget,new cljs.core.Symbol(null,"aget","aget",1491056546,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"aget","aget",1491056546,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"array","array",-440182315,null),new cljs.core.Symbol(null,"idx","idx",-1600747296,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"array","array",-440182315,null),new cljs.core.Symbol(null,"idx","idx",-1600747296,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"idxs","idxs",-2145941206,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the value at the index/indices. Works on JavaScript arrays.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.aget], null),false,false)),(new sci.lang.Var(cljs.core.zipmap,new cljs.core.Symbol(null,"zipmap","zipmap",-690049687,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"zipmap","zipmap",-690049687,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"keys","keys",-1586012071,null),new cljs.core.Symbol(null,"vals","vals",-1886377036,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a map with the keys mapped to the corresponding vals.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"find-var","find-var",-497901917,null),sci.impl.namespaces.sci_find_var,true),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"for","for",316745208,null),sci.impl.for_macro.expand_for),(new sci.lang.Var(cljs.core.run_BANG_,new cljs.core.Symbol(null,"run!","run!",-2055483725,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"run!","run!",-2055483725,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"proc","proc",-643106804,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core._EQ__EQ_,new cljs.core.Symbol(null,"==","==",-234118149,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"==","==",-234118149,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core._EQ__EQ_], null),false,false)),(new sci.lang.Var(cljs.core.chars,new cljs.core.Symbol(null,"chars","chars",545901210,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"chars","chars",545901210,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.chars], null),false,false)),(new sci.lang.Var(cljs.core.iterate,new cljs.core.Symbol(null,"iterate","iterate",694501410,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"iterate","iterate",694501410,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.boolean$,new cljs.core.Symbol(null,"boolean","boolean",-278886877,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"boolean","boolean",-278886877,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Coerce to boolean",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.boolean$], null),false,false)),(new sci.lang.Var(cljs.core.hash_map,new cljs.core.Symbol(null,"hash-map","hash-map",-439030950,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"hash-map","hash-map",-439030950,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"keyvals","keyvals",-2067234787,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"keyval => key val\n  Returns a new hash map with supplied mappings.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.unchecked_inc,new cljs.core.Symbol(null,"unchecked-inc","unchecked-inc",-1170131490,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"unchecked-inc","unchecked-inc",-1170131490,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.unchecked_inc], null),false,false)),(new sci.lang.Var(cljs.core.max_key,new cljs.core.Symbol(null,"max-key","max-key",-2132814732,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"max-key","max-key",-2132814732,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"k","k",-505765866,null),new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"k","k",-505765866,null),new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"k","k",-505765866,null),new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the x for which (k x), a number, is greatest.\n\n  If there are multiple such xs, the last one is returned.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.qualified_ident_QMARK_,new cljs.core.Symbol(null,"qualified-ident?","qualified-ident?",-928894763,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"qualified-ident?","qualified-ident?",-928894763,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return true if x is a symbol or keyword with a namespace",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.dissoc_BANG_,new cljs.core.Symbol(null,"dissoc!","dissoc!",333592624,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"dissoc!","dissoc!",333592624,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"tcoll","tcoll",-1341294481,null),new cljs.core.Symbol(null,"key","key",124488940,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"tcoll","tcoll",-1341294481,null),new cljs.core.Symbol(null,"key","key",124488940,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"ks","ks",-754231827,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a transient map that doesn't contain a mapping for key(s).",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.coll_QMARK_,new cljs.core.Symbol(null,"coll?","coll?",-1874821441,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"coll?","coll?",-1874821441,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if x satisfies ICollection",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.reversible_QMARK_,new cljs.core.Symbol(null,"reversible?","reversible?",314107817,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"reversible?","reversible?",314107817,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if coll satisfies? IReversible.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"ns-unmap","ns-unmap",1255260993,null),sci.impl.namespaces.sci_ns_unmap,true),(new sci.lang.Var(cljs.core.apply,new cljs.core.Symbol(null,"apply","apply",-1334050276,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"apply","apply",-1334050276,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"args","args",-1338879193,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"args","args",-1338879193,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"args","args",-1338879193,null)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"z","z",851004344,null),new cljs.core.Symbol(null,"args","args",-1338879193,null)], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"a","a",-482876059,null),new cljs.core.Symbol(null,"b","b",-1172211299,null),new cljs.core.Symbol(null,"c","c",-122660552,null),new cljs.core.Symbol(null,"d","d",-682293345,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"args","args",-1338879193,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Applies fn f to the argument list formed by prepending intervening arguments to args.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.io.in$,(new sci.lang.Var(cljs.core.subvec,new cljs.core.Symbol(null,"subvec","subvec",364611032,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"subvec","subvec",364611032,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"v","v",1661996586,null),new cljs.core.Symbol(null,"start","start",1285322546,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"v","v",1661996586,null),new cljs.core.Symbol(null,"start","start",1285322546,null),new cljs.core.Symbol(null,"end","end",1372345569,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"isa?","isa?",1358492324,null),sci.impl.hierarchies.isa_QMARK__STAR_,true),(new sci.lang.Var(cljs.core.not_every_QMARK_,new cljs.core.Symbol(null,"not-every?","not-every?",-729672558,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"not-every?","not-every?",-729672558,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"pred","pred",-727012372,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns false if (pred x) is logical true for every x in\n  coll, else true.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(sci.impl.namespaces.ex_cause,new cljs.core.Symbol(null,"ex-cause","ex-cause",95392590,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"ex-cause","ex-cause",95392590,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"ex","ex",226760186,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.keyword_QMARK_,new cljs.core.Symbol(null,"keyword?","keyword?",1917797069,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"keyword?","keyword?",1917797069,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return true if x is a Keyword",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.ex_data,new cljs.core.Symbol(null,"ex-data","ex-data",1331491268,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"ex-data","ex-data",1331491268,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"ex","ex",226760186,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.io.print_namespace_maps,(new sci.lang.Var(cljs.core.compare,new cljs.core.Symbol(null,"compare","compare",1109853757,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"compare","compare",1109853757,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.compare], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"underive","underive",-242982950,null),sci.impl.hierarchies.underive_STAR_,true),(new sci.lang.Var(cljs.core.transduce,new cljs.core.Symbol(null,"transduce","transduce",-2083619734,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"transduce","transduce",-2083619734,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"xform","xform",-85179481,null),new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"xform","xform",-85179481,null),new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"init","init",-234949907,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.io.flush_on_newline,(new sci.lang.Var(cljs.core.range,new cljs.core.Symbol(null,"range","range",-1014743483,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"range","range",-1014743483,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"end","end",1372345569,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"start","start",1285322546,null),new cljs.core.Symbol(null,"end","end",1372345569,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"start","start",1285322546,null),new cljs.core.Symbol(null,"end","end",1372345569,null),new cljs.core.Symbol(null,"step","step",-1365547645,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.core_protocols.deref_protocol,(new sci.lang.Var(cljs.core.sorted_QMARK_,new cljs.core.Symbol(null,"sorted?","sorted?",892797714,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"sorted?","sorted?",892797714,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if coll satisfies ISorted",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.frequencies,new cljs.core.Symbol(null,"frequencies","frequencies",1757430425,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"frequencies","frequencies",1757430425,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a map from distinct items in coll to the number of times\n  they appear.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.cycle,new cljs.core.Symbol(null,"cycle","cycle",-1944070485,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"cycle","cycle",-1944070485,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy (infinite!) sequence of repetitions of the items in coll.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.max,new cljs.core.Symbol(null,"max","max",1701898075,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"max","max",1701898075,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the greatest of the nums.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.max], null),false,false)),(new sci.lang.Var(cljs.core.simple_symbol_QMARK_,new cljs.core.Symbol(null,"simple-symbol?","simple-symbol?",1408454822,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"simple-symbol?","simple-symbol?",1408454822,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return true if x is a symbol without a namespace",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$4(new cljs.core.Symbol(null,"reify","reify",1885539699,null),sci.impl.reify.reify,sci.impl.namespaces.clojure_core_ns,true),(new sci.lang.Var(cljs.core.empty_QMARK_,new cljs.core.Symbol(null,"empty?","empty?",76408555,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"empty?","empty?",76408555,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.into,new cljs.core.Symbol(null,"into","into",1489695498,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"into","into",1489695498,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"to","to",1832630534,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"to","to",1832630534,null),new cljs.core.Symbol(null,"from","from",-839142725,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"to","to",1832630534,null),new cljs.core.Symbol(null,"xform","xform",-85179481,null),new cljs.core.Symbol(null,"from","from",-839142725,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.integer_QMARK_,new cljs.core.Symbol(null,"integer?","integer?",1303791671,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"integer?","integer?",1303791671,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if n is a JavaScript number with no decimal part.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core._STAR_,new cljs.core.Symbol(null,"*","*",345799209,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"*","*",345799209,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the product of nums. (*) returns 1.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core._STAR_], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"some->>","some->>",-1499987794,null),sci.impl.namespaces.some__GT__GT__STAR_),(new sci.lang.Var(cljs.core.unsigned_bit_shift_right,new cljs.core.Symbol(null,"unsigned-bit-shift-right","unsigned-bit-shift-right",-1953076601,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"unsigned-bit-shift-right","unsigned-bit-shift-right",-1953076601,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"n","n",-2092305744,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Bitwise shift right with zero fill",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.unsigned_bit_shift_right], null),false,false)),(new sci.lang.Var(sci.impl.io.pr_str,new cljs.core.Symbol(null,"pr-str","pr-str",-2066912145,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"pr-str","pr-str",-2066912145,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"objs","objs",-170194107,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"pr to a string, returning it",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"some->","some->",-1011172200,null),sci.impl.namespaces.some__GT__STAR_),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"bound-fn","bound-fn",125411266,null),sci.impl.namespaces.sci_bound_fn),(new sci.lang.Var(cljs.core.chunk,new cljs.core.Symbol(null,"chunk","chunk",449371907,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"chunk","chunk",449371907,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"b","b",-1172211299,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"cond","cond",1606708055,null),sci.impl.namespaces.cond_STAR_),(new sci.lang.Var(cljs.core.distinct,new cljs.core.Symbol(null,"distinct","distinct",-148347594,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"distinct","distinct",-148347594,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy sequence of the elements of coll with duplicates removed.\n  Returns a stateful transducer when no collection is provided.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.ensure_reduced,new cljs.core.Symbol(null,"ensure-reduced","ensure-reduced",-1606421005,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"ensure-reduced","ensure-reduced",-1606421005,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"If x is already reduced?, returns it, else returns (reduced x)",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.object_array,new cljs.core.Symbol(null,"object-array","object-array",206434647,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"object-array","object-array",206434647,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"size-or-seq","size-or-seq",-2062823589,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"size","size",-1555742762,null),new cljs.core.Symbol(null,"init-val-or-seq","init-val-or-seq",-1168783320,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Creates an array of objects. Does not coerce array, provided for compatibility\n  with Clojure.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.object_array], null),false,false)),(new sci.lang.Var(cljs.core.juxt,new cljs.core.Symbol(null,"juxt","juxt",671085604,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"juxt","juxt",671085604,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"g","g",-916345864,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"g","g",-916345864,null),new cljs.core.Symbol(null,"h","h",-1544777029,null)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"g","g",-916345864,null),new cljs.core.Symbol(null,"h","h",-1544777029,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"fs","fs",-482394717,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.some,new cljs.core.Symbol(null,"some","some",-310548046,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"some","some",-310548046,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"pred","pred",-727012372,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.interpose,new cljs.core.Symbol(null,"interpose","interpose",-2078295140,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"interpose","interpose",-2078295140,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"sep","sep",-684005239,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"sep","sep",-684005239,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy seq of the elements of coll separated by sep.\n  Returns a stateful transducer when no collection is provided.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"the-ns","the-ns",1016317907,null),sci.impl.namespaces.sci_the_ns,true),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"instance?","instance?",1075939923,null),sci.impl.protocols.instance_impl),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"descendants","descendants",-829549738,null),sci.impl.hierarchies.descendants_STAR_,true),(new sci.lang.Var(cljs.core.get_in,new cljs.core.Symbol(null,"get-in","get-in",-1965644065,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"get-in","get-in",-1965644065,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"m","m",-1021758608,null),new cljs.core.Symbol(null,"ks","ks",-754231827,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"m","m",-1021758608,null),new cljs.core.Symbol(null,"ks","ks",-754231827,null),new cljs.core.Symbol(null,"not-found","not-found",1011451547,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.meta,new cljs.core.Symbol(null,"meta","meta",-1154898805,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"meta","meta",-1154898805,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"o","o",290524299,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the metadata of obj, returns nil if there is no metadata.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"reify*","reify*",1646945123,null),sci.impl.reify.reify_STAR_,true),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$4(new cljs.core.Symbol(null,"defrecord","defrecord",273038109,null),sci.impl.records.defrecord,sci.impl.namespaces.clojure_core_ns,true),(new sci.lang.Var(cljs.core.val,new cljs.core.Symbol(null,"val","val",1769233139,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"val","val",1769233139,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"map-entry","map-entry",329617471,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the value in the map entry.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"read-string","read-string",-558384455,null),sci.impl.read.read_string,true),(new sci.lang.Var(cljs.core.aclone,new cljs.core.Symbol(null,"aclone","aclone",722978531,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"aclone","aclone",722978531,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"arr","arr",2115492975,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a javascript array, cloned from the passed in array",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.aclone], null),false,false)),(new sci.lang.Var(cljs.core.assoc_in,new cljs.core.Symbol(null,"assoc-in","assoc-in",-113585743,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"assoc-in","assoc-in",-113585743,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"m","m",-1021758608,null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"k","k",-505765866,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"ks","ks",-754231827,null)], null),new cljs.core.Symbol(null,"v","v",1661996586,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.zero_QMARK_,new cljs.core.Symbol(null,"zero?","zero?",325758897,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"zero?","zero?",325758897,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if num is zero, else false",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.zero_QMARK_], null),false,false)),(new sci.lang.Var(cljs.core.transient$,new cljs.core.Symbol(null,"transient","transient",899115069,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"transient","transient",899115069,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a new, transient version of the collection, in constant time.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"letfn","letfn",-480490827,null),sci.impl.namespaces.letfn_STAR_),(new sci.lang.Var(cljs.core.realized_QMARK_,new cljs.core.Symbol(null,"realized?","realized?",207229341,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"realized?","realized?",207229341,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if a value has been produced for a delay or lazy sequence.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.list_STAR_,new cljs.core.Symbol(null,"list*","list*",765415731,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"list*","list*",765415731,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"args","args",-1338879193,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"a","a",-482876059,null),new cljs.core.Symbol(null,"args","args",-1338879193,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"a","a",-482876059,null),new cljs.core.Symbol(null,"b","b",-1172211299,null),new cljs.core.Symbol(null,"args","args",-1338879193,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"a","a",-482876059,null),new cljs.core.Symbol(null,"b","b",-1172211299,null),new cljs.core.Symbol(null,"c","c",-122660552,null),new cljs.core.Symbol(null,"args","args",-1338879193,null)], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"a","a",-482876059,null),new cljs.core.Symbol(null,"b","b",-1172211299,null),new cljs.core.Symbol(null,"c","c",-122660552,null),new cljs.core.Symbol(null,"d","d",-682293345,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"ns-interns","ns-interns",535532824,null),sci.impl.namespaces.sci_ns_interns,true),(new sci.lang.Var(cljs.core.memoize,new cljs.core.Symbol(null,"memoize","memoize",2019341169,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"memoize","memoize",2019341169,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.subseq,new cljs.core.Symbol(null,"subseq","subseq",-1558995241,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"subseq","subseq",-1558995241,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"sc","sc",-1506412737,null),new cljs.core.Symbol(null,"test","test",-2076896892,null),new cljs.core.Symbol(null,"key","key",124488940,null)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"sc","sc",-1506412737,null),new cljs.core.Symbol(null,"start-test","start-test",687547962,null),new cljs.core.Symbol(null,"start-key","start-key",790225477,null),new cljs.core.Symbol(null,"end-test","end-test",2122505254,null),new cljs.core.Symbol(null,"end-key","end-key",-1592097336,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.delay_QMARK_,new cljs.core.Symbol(null,"delay?","delay?",-1528239209,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"delay?","delay?",-1528239209,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"returns true if x is a Delay created with delay",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.completing,new cljs.core.Symbol(null,"completing","completing",565832990,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"completing","completing",565832990,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"cf","cf",-1173699459,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Takes a reducing function f of 2 args and returns a fn suitable for\n  transduce by adding an arity-1 signature that calls cf (default -\n  identity) on the result argument.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.unchecked_divide_int,new cljs.core.Symbol(null,"unchecked-divide-int","unchecked-divide-int",1613116468,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"unchecked-divide-int","unchecked-divide-int",1613116468,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.unchecked_divide_int], null),false,false)),(new sci.lang.Var(cljs.core.shuffle,new cljs.core.Symbol(null,"shuffle","shuffle",-1393023609,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"shuffle","shuffle",-1393023609,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return a random permutation of coll",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"ns-map","ns-map",-434605548,null),sci.impl.namespaces.sci_ns_map,true),(new sci.lang.Var(sci.impl.io.prn_str,new cljs.core.Symbol(null,"prn-str","prn-str",-145225943,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"prn-str","prn-str",-145225943,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"objs","objs",-170194107,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"prn to a string, returning it",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"defn-","defn-",1097765044,null),sci.impl.namespaces.defn__STAR_),(new sci.lang.Var(cljs.core.compare_and_set_BANG_,new cljs.core.Symbol(null,"compare-and-set!","compare-and-set!",-1997299382,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"compare-and-set!","compare-and-set!",-1997299382,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null,"a","a",-482876059,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"tag","tag",-1290361223),new cljs.core.Symbol(null,"not-native","not-native",-236392494,null)], null)),new cljs.core.Symbol(null,"oldval","oldval",-221475803,null),new cljs.core.Symbol(null,"newval","newval",717803975,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Atomically sets the value of atom to newval if and only if the\n  current value of the atom is equal to oldval. Returns true if\n  set happened, else false.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"use","use",-205850897,null),sci.impl.namespaces.use,true),(new sci.lang.Var(cljs.core.longs,new cljs.core.Symbol(null,"longs","longs",-1017696020,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"longs","longs",-1017696020,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.longs], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"remove-ns","remove-ns",-1915058781,null),sci.impl.namespaces.sci_remove_ns,true),(new sci.lang.Var(cljs.core.unchecked_int,new cljs.core.Symbol(null,"unchecked-int","unchecked-int",1672898125,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"unchecked-int","unchecked-int",1672898125,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Coerce to int by stripping decimal places.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.unchecked_int], null),false,false)),(new sci.lang.Var(cljs.core.nthrest,new cljs.core.Symbol(null,"nthrest","nthrest",1219890118,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"nthrest","nthrest",1219890118,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null),new cljs.core.Symbol(null,"n","n",-2092305744,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the nth rest of coll, coll when n is 0.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(sci.impl.namespaces.sci_thread_bound_QMARK_,new cljs.core.Symbol(null,"thread-bound?","thread-bound?",2075334115,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"thread-bound?","thread-bound?",2075334115,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),null,new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.parser.reader_resolver,(new sci.lang.Var(cljs.core.doubles,new cljs.core.Symbol(null,"doubles","doubles",-1517872169,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"doubles","doubles",-1517872169,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.doubles], null),false,false)),(new sci.lang.Var(cljs.core.force,new cljs.core.Symbol(null,"force","force",-1872478483,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"force","force",-1872478483,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"If x is a Delay, returns the (possibly cached) value of its expression, else returns x",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.remove_method,new cljs.core.Symbol(null,"remove-method","remove-method",72923733,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"remove-method","remove-method",72923733,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"multifn","multifn",-1904313150,null),new cljs.core.Symbol(null,"dispatch-val","dispatch-val",69061000,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Removes the method of multimethod associated with dispatch-value.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"extend","extend",-817951763,null),sci.impl.protocols.extend,true),(new sci.lang.Var(cljs.core.nnext,new cljs.core.Symbol(null,"nnext","nnext",-2065435598,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"nnext","nnext",-2065435598,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Same as (next (next x))",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.dec,new cljs.core.Symbol(null,"dec","dec",-766002333,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"dec","dec",-766002333,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a number one less than num.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.dec], null),false,false)),(new sci.lang.Var(cljs.core.qualified_keyword_QMARK_,new cljs.core.Symbol(null,"qualified-keyword?","qualified-keyword?",375456001,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"qualified-keyword?","qualified-keyword?",375456001,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return true if x is a keyword with a namespace",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.comparator,new cljs.core.Symbol(null,"comparator","comparator",-509539107,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"comparator","comparator",-509539107,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"pred","pred",-727012372,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns an JavaScript compatible comparator based upon pred.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.take_last,new cljs.core.Symbol(null,"take-last","take-last",-41013151,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"take-last","take-last",-41013151,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"find-ns","find-ns",-884829568,null),sci.impl.namespaces.sci_find_ns,true),(new sci.lang.Var(cljs.core.string_QMARK_,new cljs.core.Symbol(null,"string?","string?",-1129175764,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"string?","string?",-1129175764,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if x is a JavaScript string.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(sci.impl.io.print,new cljs.core.Symbol(null,"print","print",-1354873355,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"print","print",-1354873355,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"objs","objs",-170194107,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.assert_var,(new sci.lang.Var(cljs.core.bit_xor,new cljs.core.Symbol(null,"bit-xor","bit-xor",-1334295033,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"bit-xor","bit-xor",-1334295033,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Bitwise exclusive or",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.bit_xor], null),false,false)),(new sci.lang.Var(cljs.core.map,new cljs.core.Symbol(null,"map","map",-1282745308,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"map","map",-1282745308,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"c1","c1",-1521904966,null),new cljs.core.Symbol(null,"c2","c2",78651156,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"c1","c1",-1521904966,null),new cljs.core.Symbol(null,"c2","c2",78651156,null),new cljs.core.Symbol(null,"c3","c3",468715789,null)], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"c1","c1",-1521904966,null),new cljs.core.Symbol(null,"c2","c2",78651156,null),new cljs.core.Symbol(null,"c3","c3",468715789,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"colls","colls",-397642425,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.float$,new cljs.core.Symbol(null,"float","float",-91857841,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"float","float",-91857841,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.float$], null),false,false)),(new sci.lang.Var(cljs.core.chunk_append,new cljs.core.Symbol(null,"chunk-append","chunk-append",-1447349559,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"chunk-append","chunk-append",-1447349559,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"b","b",-1172211299,null),new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"deref","deref",1494944732,null),sci.impl.core_protocols.deref_STAR_),(new sci.lang.Var(cljs.core.re_pattern,new cljs.core.Symbol(null,"re-pattern","re-pattern",1047705161,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"re-pattern","re-pattern",1047705161,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns an instance of RegExp which has compiled the provided string.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.repeat,new cljs.core.Symbol(null,"repeat","repeat",-1821743682,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"repeat","repeat",-1821743682,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null),new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy (infinite!, or length n if supplied) sequence of xs.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.reduce,new cljs.core.Symbol(null,"reduce","reduce",1358839360,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"reduce","reduce",1358839360,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"val","val",1769233139,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.qualified_symbol_QMARK_,new cljs.core.Symbol(null,"qualified-symbol?","qualified-symbol?",98763807,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"qualified-symbol?","qualified-symbol?",98763807,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return true if x is a symbol with a namespace",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"eval","eval",536963622,null),sci.impl.utils.eval,true),(new sci.lang.Var(cljs.core.vector,new cljs.core.Symbol(null,"vector","vector",-751469611,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"vector","vector",-751469611,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"args","args",-1338879193,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Creates a new vector containing the args.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.doall,new cljs.core.Symbol(null,"doall","doall",988520834,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"doall","doall",988520834,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.assoc_BANG_,new cljs.core.Symbol(null,"assoc!","assoc!",-847603280,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"assoc!","assoc!",-847603280,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"tcoll","tcoll",-1341294481,null),new cljs.core.Symbol(null,"key","key",124488940,null),new cljs.core.Symbol(null,"val","val",1769233139,null)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"tcoll","tcoll",-1341294481,null),new cljs.core.Symbol(null,"key","key",124488940,null),new cljs.core.Symbol(null,"val","val",1769233139,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"kvs","kvs",-1695980277,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.not_EQ_,new cljs.core.Symbol(null,"not=","not=",1466536204,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"not=","not=",1466536204,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Same as (not (= obj1 obj2))",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(sci.impl.namespaces.alter_meta_BANG_,new cljs.core.Symbol(null,"alter-meta!","alter-meta!",1510444945,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"alter-meta!","alter-meta!",1510444945,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"iref","iref",-647796531,null),new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"args","args",-1338879193,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.constantly,new cljs.core.Symbol(null,"constantly","constantly",-271143939,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"constantly","constantly",-271143939,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a function that takes any number of arguments and returns x.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.seq_QMARK_,new cljs.core.Symbol(null,"seq?","seq?",-1951934719,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"seq?","seq?",-1951934719,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return true if s satisfies ISeq",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.js_keys,new cljs.core.Symbol(null,"js-keys","js-keys",-1388365203,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"js-keys","js-keys",-1388365203,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"obj","obj",-1672671807,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return the JavaScript keys for an object.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.get,new cljs.core.Symbol(null,"get","get",-971253014,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"get","get",-971253014,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"o","o",290524299,null),new cljs.core.Symbol(null,"k","k",-505765866,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"o","o",290524299,null),new cljs.core.Symbol(null,"k","k",-505765866,null),new cljs.core.Symbol(null,"not-found","not-found",1011451547,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the value mapped to key, not-found or nil if key not present.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.get], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"require","require",1172530194,null),sci.impl.namespaces.require,true),(new sci.lang.Var(cljs.core.key,new cljs.core.Symbol(null,"key","key",124488940,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"key","key",124488940,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"map-entry","map-entry",329617471,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the key of the map entry.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.bit_and_not,new cljs.core.Symbol(null,"bit-and-not","bit-and-not",-254338837,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"bit-and-not","bit-and-not",-254338837,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Bitwise and with complement",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.bit_and_not], null),false,false)),(new sci.lang.Var(cljs.core.mapcat,new cljs.core.Symbol(null,"mapcat","mapcat",-601348859,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"mapcat","mapcat",-601348859,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"colls","colls",-397642425,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"cond->","cond->",561741875,null),sci.impl.namespaces.cond__GT__STAR_),(new sci.lang.Var(cljs.core.nat_int_QMARK_,new cljs.core.Symbol(null,"nat-int?","nat-int?",-1879663400,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"nat-int?","nat-int?",-1879663400,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return true if x satisfies int? and is a natural integer value.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.demunge,new cljs.core.Symbol(null,"demunge","demunge",-1865491845,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"demunge","demunge",-1865491845,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"name","name",-810760592,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.get_method,new cljs.core.Symbol(null,"get-method","get-method",185754457,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"get-method","get-method",185754457,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"multifn","multifn",-1904313150,null),new cljs.core.Symbol(null,"dispatch-val","dispatch-val",69061000,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.io.out,(new sci.lang.Var(cljs.core.str,new cljs.core.Symbol(null,"str","str",-1564826950,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"str","str",-1564826950,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"ys","ys",1606115702,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.empty,new cljs.core.Symbol(null,"empty","empty",-1886564811,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"empty","empty",-1886564811,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns an empty collection of the same category as coll, or nil",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.counted_QMARK_,new cljs.core.Symbol(null,"counted?","counted?",1703071664,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"counted?","counted?",1703071664,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if coll implements count in constant time",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.set_QMARK_,new cljs.core.Symbol(null,"set?","set?",1636014792,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"set?","set?",1636014792,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if x satisfies ISet",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.alength,new cljs.core.Symbol(null,"alength","alength",-1268305401,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"alength","alength",-1268305401,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"array","array",-440182315,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the length of the array. Works on arrays of all types.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.alength], null),false,false)),(new sci.lang.Var(cljs.core.filterv,new cljs.core.Symbol(null,"filterv","filterv",1977739179,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"filterv","filterv",1977739179,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"pred","pred",-727012372,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a vector of the items in coll for which\n  (pred item) returns logical true. pred must be free of side-effects.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.reductions,new cljs.core.Symbol(null,"reductions","reductions",549963952,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"reductions","reductions",549963952,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"init","init",-234949907,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.booleans,new cljs.core.Symbol(null,"booleans","booleans",756846088,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"booleans","booleans",756846088,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.booleans], null),false,false)),(new sci.lang.Var(cljs.core._LT_,new cljs.core.Symbol(null,"<","<",993667236,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"<","<",993667236,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core._LT_], null),false,false)),(new sci.lang.Var(cljs.core.reduced,new cljs.core.Symbol(null,"reduced","reduced",-1189224808,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"reduced","reduced",-1189224808,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Wraps x in a way such that a reduce will terminate with the value x",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.halt_when,new cljs.core.Symbol(null,"halt-when","halt-when",-140999689,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"halt-when","halt-when",-140999689,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"pred","pred",-727012372,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"pred","pred",-727012372,null),new cljs.core.Symbol(null,"retf","retf",73249638,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a transducer that ends transduction when pred returns true\n  for an input. When retf is supplied it must be a fn of 2 arguments -\n  it will be passed the (completed) result so far and the input that\n  triggered the predicate, and its return value (if it does not throw\n  an exception) will be the return value of the transducer. If retf\n  is not supplied, the input that triggered the predicate will be\n  returned. If the predicate never returns true the transduction is\n  unaffected.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.namespace,new cljs.core.Symbol(null,"namespace","namespace",1263021155,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"namespace","namespace",1263021155,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the namespace String of a symbol or keyword, or nil if not present.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.keyword,new cljs.core.Symbol(null,"keyword","keyword",-1843046022,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"keyword","keyword",-1843046022,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"name","name",-810760592,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"ns","ns",2082130287,null),new cljs.core.Symbol(null,"name","name",-810760592,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(sci.impl.namespaces.bound_fn_STAR_,new cljs.core.Symbol(null,"bound-fn*","bound-fn*",102308621,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"bound-fn*","bound-fn*",102308621,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),null,new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"record?","record?",-1305224237,null),sci.impl.records.sci_record_QMARK_),(new sci.lang.Var(cljs.core.tagged_literal_QMARK_,new cljs.core.Symbol(null,"tagged-literal?","tagged-literal?",1117865390,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"tagged-literal?","tagged-literal?",1117865390,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"value","value",1946509744,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return true if the value is the data representation of a tagged literal",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core._,new cljs.core.Symbol(null,"-","-",-471816912,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"-","-",-471816912,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core._], null),false,false)),(new sci.lang.Var(cljs.core.bit_and,new cljs.core.Symbol(null,"bit-and","bit-and",-479352589,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"bit-and","bit-and",-479352589,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Bitwise and",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.bit_and], null),false,false)),(new sci.lang.Var(cljs.core.unreduced,new cljs.core.Symbol(null,"unreduced","unreduced",780976083,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"unreduced","unreduced",780976083,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"If x is reduced?, returns (deref x), else returns x",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.assoc,new cljs.core.Symbol(null,"assoc","assoc",2071440380,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"assoc","assoc",2071440380,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null),new cljs.core.Symbol(null,"k","k",-505765866,null),new cljs.core.Symbol(null,"v","v",1661996586,null)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null),new cljs.core.Symbol(null,"k","k",-505765866,null),new cljs.core.Symbol(null,"v","v",1661996586,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"kvs","kvs",-1695980277,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index. Note - index must be <= (count vector).",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$4(new cljs.core.Symbol(null,"defmulti","defmulti",1936112154,null),sci.impl.multimethods.defmulti,sci.impl.namespaces.clojure_core_ns,true),(new sci.lang.Var(cljs.core.partition_all,new cljs.core.Symbol(null,"partition-all","partition-all",-1985005385,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"partition-all","partition-all",-1985005385,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null),new cljs.core.Symbol(null,"step","step",-1365547645,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.bit_not,new cljs.core.Symbol(null,"bit-not","bit-not",1508529851,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"bit-not","bit-not",1508529851,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Bitwise complement",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.bit_not], null),false,false)),(new sci.lang.Var(cljs.core.some_QMARK_,new cljs.core.Symbol(null,"some?","some?",234752293,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"some?","some?",234752293,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if x is not nil, false otherwise.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.pos_QMARK_,new cljs.core.Symbol(null,"pos?","pos?",-244377722,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"pos?","pos?",-244377722,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if num is greater than zero, else false",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.pos_QMARK_], null),false,false)),(new sci.lang.Var(cljs.core.trampoline,new cljs.core.Symbol(null,"trampoline","trampoline",-71368916,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"trampoline","trampoline",-71368916,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"args","args",-1338879193,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.rand,new cljs.core.Symbol(null,"rand","rand",-1745930995,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"rand","rand",-1745930995,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.re_matches,new cljs.core.Symbol(null,"re-matches","re-matches",-1865705768,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"re-matches","re-matches",-1865705768,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"re","re",1869207729,null),new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the result of (re-find re s) if re fully matches s.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.boolean_QMARK_,new cljs.core.Symbol(null,"boolean?","boolean?",1790940868,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"boolean?","boolean?",1790940868,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return true if x is a Boolean",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.every_pred,new cljs.core.Symbol(null,"every-pred","every-pred",-1346958247,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"every-pred","every-pred",-1346958247,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"p","p",1791580836,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"p1","p1",703771573,null),new cljs.core.Symbol(null,"p2","p2",-1748935128,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"p1","p1",703771573,null),new cljs.core.Symbol(null,"p2","p2",-1748935128,null),new cljs.core.Symbol(null,"p3","p3",-923395030,null)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"p1","p1",703771573,null),new cljs.core.Symbol(null,"p2","p2",-1748935128,null),new cljs.core.Symbol(null,"p3","p3",-923395030,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"ps","ps",1932889573,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.fn_QMARK_,new cljs.core.Symbol(null,"fn?","fn?",1820990818,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"fn?","fn?",1820990818,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return true if f is a JavaScript function or satisfies the Fn protocol.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.sequential_QMARK_,new cljs.core.Symbol(null,"sequential?","sequential?",1102351463,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"sequential?","sequential?",1102351463,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if coll satisfies ISequential",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.list,new cljs.core.Symbol(null,"list","list",-1889078086,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"list","list",-1889078086,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"xs","xs",-2004992428,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Creates a new list containing the items.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.sorted_set_by,new cljs.core.Symbol(null,"sorted-set-by","sorted-set-by",899099765,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"sorted-set-by","sorted-set-by",899099765,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"comparator","comparator",-509539107,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"keys","keys",-1586012071,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a new sorted set with supplied keys, using the supplied comparator.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.nthnext,new cljs.core.Symbol(null,"nthnext","nthnext",1677356670,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"nthnext","nthnext",1677356670,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null),new cljs.core.Symbol(null,"n","n",-2092305744,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the nth next of coll, (seq coll) when n is 0.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.eduction,new cljs.core.Symbol(null,"eduction","eduction",1445227968,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"eduction","eduction",1445227968,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"xform*","xform*",264470622,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a reducible/iterable application of the transducers\n  to the items in coll. Transducers are applied in order as if\n  combined with comp. Note that these applications will be\n  performed every time reduce/iterator is called.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.rand_nth,new cljs.core.Symbol(null,"rand-nth","rand-nth",-1227719931,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"rand-nth","rand-nth",-1227719931,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"delay","delay",1066306308,null),sci.impl.namespaces.delay_STAR_),(new sci.lang.Var(cljs.core.partial,new cljs.core.Symbol(null,"partial","partial",1881673272,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"partial","partial",1881673272,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"arg1","arg1",-1702536411,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"arg1","arg1",-1702536411,null),new cljs.core.Symbol(null,"arg2","arg2",-924884852,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"arg1","arg1",-1702536411,null),new cljs.core.Symbol(null,"arg2","arg2",-924884852,null),new cljs.core.Symbol(null,"arg3","arg3",153709031,null)], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"arg1","arg1",-1702536411,null),new cljs.core.Symbol(null,"arg2","arg2",-924884852,null),new cljs.core.Symbol(null,"arg3","arg3",153709031,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"with-bindings","with-bindings",-1197589787,null),sci.impl.namespaces.sci_with_bindings),(new sci.lang.Var(cljs.core.rsubseq,new cljs.core.Symbol(null,"rsubseq","rsubseq",-710070471,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"rsubseq","rsubseq",-710070471,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"sc","sc",-1506412737,null),new cljs.core.Symbol(null,"test","test",-2076896892,null),new cljs.core.Symbol(null,"key","key",124488940,null)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"sc","sc",-1506412737,null),new cljs.core.Symbol(null,"start-test","start-test",687547962,null),new cljs.core.Symbol(null,"start-key","start-key",790225477,null),new cljs.core.Symbol(null,"end-test","end-test",2122505254,null),new cljs.core.Symbol(null,"end-key","end-key",-1592097336,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.contains_QMARK_,new cljs.core.Symbol(null,"contains?","contains?",-1676812576,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"contains?","contains?",-1676812576,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null),new cljs.core.Symbol(null,"v","v",1661996586,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"->","->",-2139605430,null),sci.impl.namespaces.__GT__STAR_),(new sci.lang.Var(cljs.core.shorts,new cljs.core.Symbol(null,"shorts","shorts",107738238,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"shorts","shorts",107738238,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.shorts], null),false,false)),(new sci.lang.Var(cljs.core.random_uuid,new cljs.core.Symbol(null,"random-uuid","random-uuid",-1574409597,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"random-uuid","random-uuid",-1574409597,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.core_protocols.swap_protocol,sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"as->","as->",1430690540,null),sci.impl.namespaces.as__GT__STAR_),(new sci.lang.Var(cljs.core.hash_set,new cljs.core.Symbol(null,"hash-set","hash-set",-1145168432,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"hash-set","hash-set",-1145168432,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"keys","keys",-1586012071,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a new hash set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.take,new cljs.core.Symbol(null,"take","take",871646627,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"take","take",871646627,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"pre","pre",2118456869),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(null,"number?","number?",-1747282210,null),new cljs.core.Symbol(null,"n","n",-2092305744,null))], null)], null)),cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"pre","pre",2118456869),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(null,"number?","number?",-1747282210,null),new cljs.core.Symbol(null,"n","n",-2092305744,null))], null)], null))),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"if-let","if-let",1803593690,null),sci.impl.namespaces.if_let_STAR_),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"macroexpand-1","macroexpand-1",659241329,null),sci.impl.namespaces.macroexpand_1_STAR_,true),(new sci.lang.Var(cljs.core.split_with,new cljs.core.Symbol(null,"split-with","split-with",1853047034,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"split-with","split-with",1853047034,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"pred","pred",-727012372,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a vector of [(take-while pred coll) (drop-while pred coll)]",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"refer","refer",676235974,null),sci.impl.namespaces.sci_refer,true),(new sci.lang.Var(sci.impl.vars.binding_conveyor_fn,new cljs.core.Symbol(null,"binding-conveyor-fn","binding-conveyor-fn",2076077877,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"binding-conveyor-fn","binding-conveyor-fn",2076077877,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.make_hierarchy,new cljs.core.Symbol(null,"make-hierarchy","make-hierarchy",-241558556,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"make-hierarchy","make-hierarchy",-241558556,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY),new cljs.core.Keyword(null,"doc","doc",1913296891),"Creates a hierarchy object for use with derive, isa? etc.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.tagged_literal,new cljs.core.Symbol(null,"tagged-literal","tagged-literal",-896422703,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"tagged-literal","tagged-literal",-896422703,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"tag","tag",350170304,null),new cljs.core.Symbol(null,"form","form",16469056,null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"pre","pre",2118456869),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(null,"symbol?","symbol?",1820680511,null),new cljs.core.Symbol(null,"tag","tag",350170304,null))], null)], null))),new cljs.core.Keyword(null,"doc","doc",1913296891),"Construct a data representation of a tagged literal from a\n  tag symbol and a form.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(sci.impl.namespaces.has_root_impl,new cljs.core.Symbol(null,"has-root-impl","has-root-impl",-288948659,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"has-root-impl","has-root-impl",-288948659,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),null,new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"parents","parents",-387007364,null),sci.impl.hierarchies.parents_STAR_,true),(new sci.lang.Var(cljs.core.test,new cljs.core.Symbol(null,"test","test",-2076896892,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"test","test",-2076896892,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"v","v",1661996586,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"test [v] finds fn at key :test in var metadata and calls it,\n  presuming failure will throw exception",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.vec,new cljs.core.Symbol(null,"vec","vec",982683596,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"vec","vec",982683596,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Creates a new vector containing the contents of coll. JavaScript arrays\n  will be aliased and should not be modified.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.nth,new cljs.core.Symbol(null,"nth","nth",1529209554,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"nth","nth",1529209554,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null),new cljs.core.Symbol(null,"n","n",-2092305744,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null),new cljs.core.Symbol(null,"n","n",-2092305744,null),new cljs.core.Symbol(null,"not-found","not-found",1011451547,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.nth], null),false,false)),sci.impl.namespaces.clojure_core_ns,sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"lazy-cat","lazy-cat",-89906116,null),sci.impl.namespaces.lazy_cat_STAR_),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"if-some","if-some",1960677609,null),sci.impl.namespaces.if_some_STAR_),(new sci.lang.Var(cljs.core.subs,new cljs.core.Symbol(null,"subs","subs",1453849536,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"subs","subs",1453849536,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null),new cljs.core.Symbol(null,"start","start",1285322546,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null),new cljs.core.Symbol(null,"start","start",1285322546,null),new cljs.core.Symbol(null,"end","end",1372345569,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.parser.default_data_reader_fn,(new sci.lang.Var(cljs.core.to_array_2d,new cljs.core.Symbol(null,"to-array-2d","to-array-2d",-1563270737,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"to-array-2d","to-array-2d",-1563270737,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(sci.impl.namespaces.symbol_STAR_,new cljs.core.Symbol(null,"symbol","symbol",601958831,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"symbol","symbol",601958831,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),null,new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.mod,new cljs.core.Symbol(null,"mod","mod",1510044207,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"mod","mod",1510044207,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null),new cljs.core.Symbol(null,"d","d",-682293345,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Modulus of num and div. Truncates toward negative infinity.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.number_QMARK_,new cljs.core.Symbol(null,"number?","number?",-1747282210,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"number?","number?",-1747282210,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if x is a JavaScript number.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.reduced_QMARK_,new cljs.core.Symbol(null,"reduced?","reduced?",1361797384,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"reduced?","reduced?",1361797384,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"r","r",1169147337,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if x is the result of a call to reduced",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.reduced_QMARK_], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"-new-dynamic-var","-new-dynamic-var",-1029088918,null),(function (){
return sci.impl.utils.new_var.cljs$core$IFn$_invoke$arity$3(cljs.core.gensym.cljs$core$IFn$_invoke$arity$0(),null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"dynamic","dynamic",704819571),true], null));
})),(new sci.lang.Var(cljs.core.object_QMARK_,new cljs.core.Symbol(null,"object?","object?",327472310,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"object?","object?",327472310,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if x's constructor is Object",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.conj,new cljs.core.Symbol(null,"conj","conj",-1127293942,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"conj","conj",-1127293942,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null),new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null),new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"xs","xs",-2004992428,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).\n  (conj coll) returns coll. (conj) returns [].\n  The 'addition' may happen at different 'places' depending\n  on the concrete type.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.bytes,new cljs.core.Symbol(null,"bytes","bytes",-1478569089,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"bytes","bytes",-1478569089,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.bytes], null),false,false)),(new sci.lang.Var(cljs.core.unchecked_float,new cljs.core.Symbol(null,"unchecked-float","unchecked-float",1485658216,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"unchecked-float","unchecked-float",1485658216,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.unchecked_float], null),false,false)),(new sci.lang.Var(cljs.core.bit_test,new cljs.core.Symbol(null,"bit-test","bit-test",543456753,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"bit-test","bit-test",543456753,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"n","n",-2092305744,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Test bit at index n",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.sorted_map_by,new cljs.core.Symbol(null,"sorted-map-by","sorted-map-by",218894812,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"sorted-map-by","sorted-map-by",218894812,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"comparator","comparator",-509539107,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"keyvals","keyvals",-2067234787,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.double_QMARK_,new cljs.core.Symbol(null,"double?","double?",-2146564276,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"double?","double?",-2146564276,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true for JavaScript numbers, false otherwise.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.rseq,new cljs.core.Symbol(null,"rseq","rseq",-1719353554,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"rseq","rseq",-1719353554,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"rev","rev",1653234197,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns, in constant time, a seq of the items in rev (which\n  can be a vector or sorted-map), in reverse order. If rev is empty returns nil",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.unchecked_long,new cljs.core.Symbol(null,"unchecked-long","unchecked-long",1306610949,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"unchecked-long","unchecked-long",1306610949,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Coerce to long by stripping decimal places. Identical to `int'.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.unchecked_long], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"binding","binding",-2114503176,null),sci.impl.namespaces.sci_binding),(new sci.lang.Var(cljs.core.double$,new cljs.core.Symbol(null,"double","double",-1769548886,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"double","double",-1769548886,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.double$], null),false,false)),(new sci.lang.Var(cljs.core.unchecked_dec,new cljs.core.Symbol(null,"unchecked-dec","unchecked-dec",2095823150,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"unchecked-dec","unchecked-dec",2095823150,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a number one less than x, an int.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.unchecked_dec], null),false,false)),(new sci.lang.Var(cljs.core.tree_seq,new cljs.core.Symbol(null,"tree-seq","tree-seq",-1800921632,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"tree-seq","tree-seq",-1800921632,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"branch?","branch?",641208520,null),new cljs.core.Symbol(null,"children","children",699969545,null),new cljs.core.Symbol(null,"root","root",1191874074,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n  branch? must be a fn of one arg that returns true if passed a node\n  that can have children (but may not).  children must be a fn of one\n  arg that returns a sequence of the children. Will only be called on\n  nodes for which branch? returns true. Root is the root node of the\n  tree.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(sci.impl.multimethods.multi_fn_add_method_impl,new cljs.core.Symbol(null,"multi-fn-add-method-impl","multi-fn-add-method-impl",-523930142,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"multi-fn-add-method-impl","multi-fn-add-method-impl",-523930142,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"multifn","multifn",-1904313150,null),new cljs.core.Symbol(null,"dispatch-val","dispatch-val",69061000,null),new cljs.core.Symbol(null,"f","f",43394975,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.seqable_QMARK_,new cljs.core.Symbol(null,"seqable?","seqable?",72462495,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"seqable?","seqable?",72462495,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return true if the seq function is supported for s",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"swap!","swap!",-655677516,null),sci.impl.core_protocols.swap_BANG__STAR_),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"vswap!","vswap!",-574070781,null),sci.impl.namespaces.vswap_BANG_),(new sci.lang.Var(cljs.core.array_map,new cljs.core.Symbol(null,"array-map","array-map",1555038968,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"array-map","array-map",1555038968,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"keyvals","keyvals",-2067234787,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"keyval => key val\n  Returns a new array map with supplied mappings.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"reset-thread-binding-frame-impl","reset-thread-binding-frame-impl",-826674194,null),sci.impl.vars.reset_thread_binding_frame),(new sci.lang.Var(cljs.core.dedupe,new cljs.core.Symbol(null,"dedupe","dedupe",-461856254,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"dedupe","dedupe",-461856254,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.short$,new cljs.core.Symbol(null,"short","short",-725675253,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"short","short",-725675253,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.short$], null),false,false)),(new sci.lang.Var(cljs.core.update,new cljs.core.Symbol(null,"update","update",-1608859373,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"update","update",-1608859373,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"m","m",-1021758608,null),new cljs.core.Symbol(null,"k","k",-505765866,null),new cljs.core.Symbol(null,"f","f",43394975,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"m","m",-1021758608,null),new cljs.core.Symbol(null,"k","k",-505765866,null),new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"m","m",-1021758608,null),new cljs.core.Symbol(null,"k","k",-505765866,null),new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"m","m",-1021758608,null),new cljs.core.Symbol(null,"k","k",-505765866,null),new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"z","z",851004344,null)], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"m","m",-1021758608,null),new cljs.core.Symbol(null,"k","k",-505765866,null),new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"z","z",851004344,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.filter,new cljs.core.Symbol(null,"filter","filter",691993593,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"filter","filter",691993593,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"pred","pred",-727012372,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"pred","pred",-727012372,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy sequence of the items in coll for which\n  (pred item) returns logical true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.unchecked_dec_int,new cljs.core.Symbol(null,"unchecked-dec-int","unchecked-dec-int",1339067442,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"unchecked-dec-int","unchecked-dec-int",1339067442,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a number one less than x, an int.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.unchecked_dec_int], null),false,false)),sci.impl.namespaces._STAR_3,sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"requiring-resolve","requiring-resolve",-1888505231,null),sci.impl.namespaces.sci_requiring_resolve,true),(new sci.lang.Var(cljs.core.rem,new cljs.core.Symbol(null,"rem","rem",664046770,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"rem","rem",664046770,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null),new cljs.core.Symbol(null,"d","d",-682293345,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"remainder of dividing numerator by denominator.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.rem], null),false,false)),(new sci.lang.Var(cljs.core.pop,new cljs.core.Symbol(null,"pop","pop",-94247249,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"pop","pop",-94247249,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.merge_with,new cljs.core.Symbol(null,"merge-with","merge-with",1025434534,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"merge-with","merge-with",1025434534,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"maps","maps",-71029607,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.long$,new cljs.core.Symbol(null,"long","long",1469079434,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"long","long",1469079434,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Coerce to long by stripping decimal places. Identical to `int'.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.long$], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"assert","assert",677428501,null),sci.impl.namespaces.assert_STAR_),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"refer-clojure","refer-clojure",-1840651329,null),sci.impl.namespaces.sci_refer_clojure),(new sci.lang.Var(cljs.core.flatten,new cljs.core.Symbol(null,"flatten","flatten",-1441633353,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"flatten","flatten",-1441633353,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.distinct_QMARK_,new cljs.core.Symbol(null,"distinct?","distinct?",-1684357959,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"distinct?","distinct?",-1684357959,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if no two of the arguments are =",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.map_indexed,new cljs.core.Symbol(null,"map-indexed","map-indexed",-1391025435,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"map-indexed","map-indexed",-1391025435,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item. Returns a stateful transducer when\n  no collection is provided.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"ns-publics","ns-publics",903350436,null),sci.impl.namespaces.sci_ns_publics,true),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"protocol-type-impl","protocol-type-impl",561934718,null),sci.impl.types.type_impl),(new sci.lang.Var(cljs.core.even_QMARK_,new cljs.core.Symbol(null,"even?","even?",-1827825394,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"even?","even?",-1827825394,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if n is even, throws an exception if n is not an integer",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(sci.impl.vars.var_get,new cljs.core.Symbol(null,"var-get","var-get",-767472097,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"var-get","var-get",-767472097,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"v","v",1661996586,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(sci.impl.multimethods.multi_fn_QMARK__impl,new cljs.core.Symbol(null,"multi-fn?-impl","multi-fn?-impl",1372639302,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"multi-fn?-impl","multi-fn?-impl",1372639302,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(sci.impl.vars.alter_var_root,new cljs.core.Symbol(null,"alter-var-root","alter-var-root",-1749458519,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"alter-var-root","alter-var-root",-1749458519,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"v","v",1661996586,null),new cljs.core.Symbol(null,"f","f",43394975,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"v","v",1661996586,null),new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"args","args",-1338879193,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(sci.impl.namespaces.type,new cljs.core.Symbol(null,"type","type",-1480165421,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"type","type",-1480165421,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return x's constructor.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.neg_QMARK_,new cljs.core.Symbol(null,"neg?","neg?",-1902175577,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"neg?","neg?",-1902175577,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if num is less than zero, else false",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.neg_QMARK_], null),false,false)),(new sci.lang.Var(cljs.core.gensym,new cljs.core.Symbol(null,"gensym","gensym",-1693147401,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"gensym","gensym",-1693147401,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"prefix-string","prefix-string",-922371041,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"resolve","resolve",56086045,null),sci.impl.namespaces.sci_resolve,true),(new sci.lang.Var(cljs.core.add_watch,new cljs.core.Symbol(null,"add-watch","add-watch",1389887634,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"add-watch","add-watch",1389887634,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"iref","iref",-647796531,null),new cljs.core.Symbol(null,"key","key",124488940,null),new cljs.core.Symbol(null,"f","f",43394975,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.not_any_QMARK_,new cljs.core.Symbol(null,"not-any?","not-any?",-2114707554,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"not-any?","not-any?",-2114707554,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"pred","pred",-727012372,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns false if (pred x) is logical true for any x in coll,\n  else true.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.take_nth,new cljs.core.Symbol(null,"take-nth","take-nth",1378204353,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"take-nth","take-nth",1378204353,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"pre","pre",2118456869),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(null,"number?","number?",-1747282210,null),new cljs.core.Symbol(null,"n","n",-2092305744,null))], null)], null)),cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"pre","pre",2118456869),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(null,"number?","number?",-1747282210,null),new cljs.core.Symbol(null,"n","n",-2092305744,null))], null)], null))),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.dorun,new cljs.core.Symbol(null,"dorun","dorun",560426022,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"dorun","dorun",560426022,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.remove_all_methods,new cljs.core.Symbol(null,"remove-all-methods","remove-all-methods",-728267092,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"remove-all-methods","remove-all-methods",-728267092,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"multifn","multifn",-1904313150,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Removes all of the methods of multimethod.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.not_empty,new cljs.core.Symbol(null,"not-empty","not-empty",2029453590,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"not-empty","not-empty",2029453590,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"If coll is empty, returns nil, else coll",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"ns-aliases","ns-aliases",-1364180948,null),sci.impl.namespaces.sci_ns_aliases,true),sci.impl.io.print_dup_var,sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"ns-resolve","ns-resolve",1788675756,null),sci.impl.namespaces.sci_ns_resolve,true),sci.impl.namespaces.core_var(new cljs.core.Symbol(null,"get-thread-binding-frame-impl","get-thread-binding-frame-impl",-701667726,null),sci.impl.vars.get_thread_binding_frame),(new sci.lang.Var(cljs.core.chunk_rest,new cljs.core.Symbol(null,"chunk-rest","chunk-rest",-1853526420,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"chunk-rest","chunk-rest",-1853526420,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.remove_watch,new cljs.core.Symbol(null,"remove-watch","remove-watch",-1105301448,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"remove-watch","remove-watch",-1105301448,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"iref","iref",-647796531,null),new cljs.core.Symbol(null,"key","key",124488940,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Removes a watch (set by add-watch) from a reference",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.int_array,new cljs.core.Symbol(null,"int-array","int-array",459176616,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"int-array","int-array",459176616,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"size-or-seq","size-or-seq",-2062823589,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"size","size",-1555742762,null),new cljs.core.Symbol(null,"init-val-or-seq","init-val-or-seq",-1168783320,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Creates an array of ints. Does not coerce array, provided for compatibility\n  with Clojure.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.int_array], null),false,false)),(new sci.lang.Var(cljs.core.pos_int_QMARK_,new cljs.core.Symbol(null,"pos-int?","pos-int?",-1205815015,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"pos-int?","pos-int?",-1205815015,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return true if x satisfies int? and is positive.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.undefined_QMARK_,new cljs.core.Symbol(null,"undefined?","undefined?",1356377224,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"undefined?","undefined?",1356377224,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if x identical to the JavaScript undefined value.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.ints,new cljs.core.Symbol(null,"ints","ints",-1761239845,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"ints","ints",-1761239845,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.ints], null),false,false)),(new sci.lang.Var(cljs.core.identical_QMARK_,new cljs.core.Symbol(null,"identical?","identical?",-745864205,null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"identical?","identical?",-745864205,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Tests if 2 arguments are the same object",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns,new cljs.core.Keyword("sci.impl","inlined","sci.impl/inlined",-478453593),cljs.core.identical_QMARK_], null),false,false)),(new sci.lang.Var(cljs.core.persistent_BANG_,new cljs.core.Symbol(null,"persistent!","persistent!",1286555698,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"persistent!","persistent!",1286555698,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"tcoll","tcoll",-1341294481,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.core_protocols.reset_protocol,(new sci.lang.Var(cljs.core.indexed_QMARK_,new cljs.core.Symbol(null,"indexed?","indexed?",1234610384,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"indexed?","indexed?",1234610384,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns true if coll implements nth in constant time",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.min_key,new cljs.core.Symbol(null,"min-key","min-key",246826648,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"min-key","min-key",246826648,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"k","k",-505765866,null),new cljs.core.Symbol(null,"x","x",-555367584,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"k","k",-505765866,null),new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"k","k",-505765866,null),new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"more","more",-418290273,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the x for which (k x), a number, is least.\n\n  If there are multiple such xs, the last one is returned.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.repeatedly,new cljs.core.Symbol(null,"repeatedly","repeatedly",1199964457,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"repeatedly","repeatedly",1199964457,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"n","n",-2092305744,null),new cljs.core.Symbol(null,"f","f",43394975,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.set,new cljs.core.Symbol(null,"set","set",1945134081,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"set","set",1945134081,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a set of the distinct elements of coll.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.remove,new cljs.core.Symbol(null,"remove","remove",1509103113,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"remove","remove",1509103113,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"pred","pred",-727012372,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"pred","pred",-727012372,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a lazy sequence of the items in coll for which\n  (pred item) returns logical false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),(new sci.lang.Var(cljs.core.keyword_identical_QMARK_,new cljs.core.Symbol(null,"keyword-identical?","keyword-identical?",931555714,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"keyword-identical?","keyword-identical?",931555714,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"x","x",-555367584,null),new cljs.core.Symbol(null,"y","y",-117328249,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Efficient test to determine that two keywords are identical.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false)),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,"while","while",-1691317983,null),sci.impl.namespaces.while_STAR_),(new sci.lang.Var(cljs.core.re_find,new cljs.core.Symbol(null,"re-find","re-find",1143444147,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"re-find","re-find",1143444147,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"re","re",1869207729,null),new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_core_ns], null),false,false))]);
sci.impl.namespaces.dir_fn = (function sci$impl$namespaces$dir_fn(ctx,ns){
var current_ns = sci.impl.utils.current_ns_name();
var the_ns = sci.impl.namespaces.sci_the_ns(ctx,cljs.core.get.cljs$core$IFn$_invoke$arity$3(sci.impl.namespaces.sci_ns_aliases(ctx,current_ns),ns,ns));
return cljs.core.sort.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,sci.impl.namespaces.sci_ns_publics(ctx,the_ns)));
});
sci.impl.namespaces.dir = (function sci$impl$namespaces$dir(_,___$1,nsname){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","doseq","cljs.core/doseq",-169320766,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"v__72331__auto__","v__72331__auto__",2038751371,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("clojure.repl","dir-fn","clojure.repl/dir-fn",901908317,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"quote","quote",1377916282,null),null,(1),null)),(new cljs.core.List(null,nsname,null,(1),null))))),null,(1),null))))),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","println","cljs.core/println",-331834442,null),null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(null,"v__72331__auto__","v__72331__auto__",2038751371,null),null,(1),null))))),null,(1),null))], 0))));
});
sci.impl.namespaces.print_doc = (function sci$impl$namespaces$print_doc(m){
var arglists = new cljs.core.Keyword(null,"arglists","arglists",1661989754).cljs$core$IFn$_invoke$arity$1(m);
var doc = new cljs.core.Keyword(null,"doc","doc",1913296891).cljs$core$IFn$_invoke$arity$1(m);
var macro_QMARK_ = new cljs.core.Keyword(null,"macro","macro",-867863404).cljs$core$IFn$_invoke$arity$1(m);
sci.impl.io.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["-------------------------"], 0));

sci.impl.io.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[(function (){var temp__5753__auto__ = new cljs.core.Keyword(null,"ns","ns",441598760).cljs$core$IFn$_invoke$arity$1(m);
if(cljs.core.truth_(temp__5753__auto__)){
var ns_STAR_ = temp__5753__auto__;
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sci.impl.namespaces.sci_ns_name(ns_STAR_)),"/"].join('');
} else {
return null;
}
})(),cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,"name","name",1843675177).cljs$core$IFn$_invoke$arity$1(m))].join('')], 0));

if(cljs.core.truth_(arglists)){
sci.impl.io.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arglists], 0));
} else {
}

if(cljs.core.truth_(macro_QMARK_)){
sci.impl.io.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["Macro"], 0));
} else {
}

if(cljs.core.truth_(doc)){
return sci.impl.io.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([" ",doc], 0));
} else {
return null;
}
});
sci.impl.namespaces.doc = (function sci$impl$namespaces$doc(_,___$1,sym){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","if-let","cljs.core/if-let",1346583165,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"var__72336__auto__","var__72336__auto__",-1319088095,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","resolve","cljs.core/resolve",1796776582,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"quote","quote",1377916282,null),null,(1),null)),(new cljs.core.List(null,sym,null,(1),null))))),null,(1),null))))),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","when","cljs.core/when",120293186,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","var?","cljs.core/var?",1711182854,null),null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(null,"var__72336__auto__","var__72336__auto__",-1319088095,null),null,(1),null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("clojure.repl","print-doc","clojure.repl/print-doc",-375546711,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","meta","cljs.core/meta",-748218346,null),null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(null,"var__72336__auto__","var__72336__auto__",-1319088095,null),null,(1),null))))),null,(1),null))))),null,(1),null))], 0)))),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","if-let","cljs.core/if-let",1346583165,null),null,(1),null)),(new cljs.core.List(null,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"ns__72338__auto__","ns__72338__auto__",1601632110,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","find-ns","cljs.core/find-ns",-486459417,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"quote","quote",1377916282,null),null,(1),null)),(new cljs.core.List(null,sym,null,(1),null))))),null,(1),null))))),null,(1),null)))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("clojure.repl","print-doc","clojure.repl/print-doc",-375546711,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","assoc","cljs.core/assoc",322326297,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","meta","cljs.core/meta",-748218346,null),null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(null,"ns__72338__auto__","ns__72338__auto__",1601632110,null),null,(1),null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,new cljs.core.Keyword(null,"name","name",1843675177),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","ns-name","cljs.core/ns-name",171430027,null),null,(1),null)),(new cljs.core.List(null,new cljs.core.Symbol(null,"ns__72338__auto__","ns__72338__auto__",1601632110,null),null,(1),null))))),null,(1),null))], 0)))),null,(1),null))))),null,(1),null))], 0)))),null,(1),null))], 0))));
});
/**
 * Prints documentation for any var whose documentation or name
 *   contains a match for re-string-or-pattern
 */
sci.impl.namespaces.find_doc = (function sci$impl$namespaces$find_doc(ctx,re_string_or_pattern){
var re = cljs.core.re_pattern(re_string_or_pattern);
var ms = cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (p1__72347_SHARP_){
return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,"name","name",1843675177),cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.meta,cljs.core.vals(sci.impl.namespaces.sci_ns_interns(ctx,p1__72347_SHARP_))));
}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([sci.impl.namespaces.sci_all_ns(ctx)], 0)),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__72348_SHARP_){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(p1__72348_SHARP_),new cljs.core.Keyword(null,"name","name",1843675177),sci.impl.namespaces.sci_ns_name(p1__72348_SHARP_));
}),sci.impl.namespaces.sci_all_ns(ctx)));
var seq__72354 = cljs.core.seq(ms);
var chunk__72356 = null;
var count__72357 = (0);
var i__72358 = (0);
while(true){
if((i__72358 < count__72357)){
var m = chunk__72356.cljs$core$IIndexed$_nth$arity$2(null,i__72358);
if(cljs.core.truth_((function (){var and__4251__auto__ = new cljs.core.Keyword(null,"doc","doc",1913296891).cljs$core$IFn$_invoke$arity$1(m);
if(cljs.core.truth_(and__4251__auto__)){
var or__4253__auto__ = cljs.core.re_find(re,new cljs.core.Keyword(null,"doc","doc",1913296891).cljs$core$IFn$_invoke$arity$1(m));
if(cljs.core.truth_(or__4253__auto__)){
return or__4253__auto__;
} else {
return cljs.core.re_find(re,cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,"name","name",1843675177).cljs$core$IFn$_invoke$arity$1(m)));
}
} else {
return and__4251__auto__;
}
})())){
sci.impl.namespaces.print_doc(m);


var G__73280 = seq__72354;
var G__73281 = chunk__72356;
var G__73282 = count__72357;
var G__73283 = (i__72358 + (1));
seq__72354 = G__73280;
chunk__72356 = G__73281;
count__72357 = G__73282;
i__72358 = G__73283;
continue;
} else {
var G__73284 = seq__72354;
var G__73285 = chunk__72356;
var G__73286 = count__72357;
var G__73287 = (i__72358 + (1));
seq__72354 = G__73284;
chunk__72356 = G__73285;
count__72357 = G__73286;
i__72358 = G__73287;
continue;
}
} else {
var temp__5753__auto__ = cljs.core.seq(seq__72354);
if(temp__5753__auto__){
var seq__72354__$1 = temp__5753__auto__;
if(cljs.core.chunked_seq_QMARK_(seq__72354__$1)){
var c__4679__auto__ = cljs.core.chunk_first(seq__72354__$1);
var G__73288 = cljs.core.chunk_rest(seq__72354__$1);
var G__73289 = c__4679__auto__;
var G__73290 = cljs.core.count(c__4679__auto__);
var G__73291 = (0);
seq__72354 = G__73288;
chunk__72356 = G__73289;
count__72357 = G__73290;
i__72358 = G__73291;
continue;
} else {
var m = cljs.core.first(seq__72354__$1);
if(cljs.core.truth_((function (){var and__4251__auto__ = new cljs.core.Keyword(null,"doc","doc",1913296891).cljs$core$IFn$_invoke$arity$1(m);
if(cljs.core.truth_(and__4251__auto__)){
var or__4253__auto__ = cljs.core.re_find(re,new cljs.core.Keyword(null,"doc","doc",1913296891).cljs$core$IFn$_invoke$arity$1(m));
if(cljs.core.truth_(or__4253__auto__)){
return or__4253__auto__;
} else {
return cljs.core.re_find(re,cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,"name","name",1843675177).cljs$core$IFn$_invoke$arity$1(m)));
}
} else {
return and__4251__auto__;
}
})())){
sci.impl.namespaces.print_doc(m);


var G__73292 = cljs.core.next(seq__72354__$1);
var G__73293 = null;
var G__73294 = (0);
var G__73295 = (0);
seq__72354 = G__73292;
chunk__72356 = G__73293;
count__72357 = G__73294;
i__72358 = G__73295;
continue;
} else {
var G__73296 = cljs.core.next(seq__72354__$1);
var G__73297 = null;
var G__73298 = (0);
var G__73299 = (0);
seq__72354 = G__73296;
chunk__72356 = G__73297;
count__72357 = G__73298;
i__72358 = G__73299;
continue;
}
}
} else {
return null;
}
}
break;
}
});
/**
 * Given a regular expression or stringable thing, return a seq of all
 *   public definitions in all currently-loaded namespaces that match the
 *   str-or-pattern.
 */
sci.impl.namespaces.apropos = (function sci$impl$namespaces$apropos(ctx,str_or_pattern){
var matches_QMARK_ = (((str_or_pattern instanceof RegExp))?(function (p1__72378_SHARP_){
return cljs.core.re_find(str_or_pattern,cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__72378_SHARP_));
}):(function (p1__72379_SHARP_){
return clojure.string.includes_QMARK_(cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__72379_SHARP_),cljs.core.str.cljs$core$IFn$_invoke$arity$1(str_or_pattern));
}));
return cljs.core.sort.cljs$core$IFn$_invoke$arity$1(cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (ns){
var ns_name = cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns);
return cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__72381_SHARP_){
return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(ns_name,cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__72381_SHARP_));
}),cljs.core.filter.cljs$core$IFn$_invoke$arity$2(matches_QMARK_,cljs.core.keys(sci.impl.namespaces.sci_ns_publics(ctx,ns))));
}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([sci.impl.namespaces.sci_all_ns(ctx)], 0)));
});
/**
 * Returns a string of the source code for the given symbol, if it can
 *   find it.  This requires that the symbol resolve to a Var defined in
 *   a namespace for which the .clj is in the classpath.  Returns nil if
 *   it can't find the source.  For most REPL usage, 'source' is more
 *   convenient.
 * 
 *   Example: (source-fn 'filter)
 */
sci.impl.namespaces.source_fn = (function sci$impl$namespaces$source_fn(ctx,x){
var temp__5753__auto__ = sci.impl.namespaces.sci_resolve.cljs$core$IFn$_invoke$arity$2(ctx,x);
if(cljs.core.truth_(temp__5753__auto__)){
var v = temp__5753__auto__;
var map__72388 = cljs.core.meta(v);
var map__72388__$1 = cljs.core.__destructure_map(map__72388);
var line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72388__$1,new cljs.core.Keyword(null,"line","line",212345235));
var ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__72388__$1,new cljs.core.Keyword(null,"ns","ns",441598760));
if(cljs.core.truth_((function (){var and__4251__auto__ = line;
if(cljs.core.truth_(and__4251__auto__)){
return ns;
} else {
return and__4251__auto__;
}
})())){
var temp__5753__auto____$1 = (function (){var temp__5753__auto____$1 = new cljs.core.Keyword(null,"load-fn","load-fn",-2121144334).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(null,"env","env",-1815813235).cljs$core$IFn$_invoke$arity$1(ctx)));
if(cljs.core.truth_(temp__5753__auto____$1)){
var load_fn = temp__5753__auto____$1;
return new cljs.core.Keyword(null,"source","source",-433931539).cljs$core$IFn$_invoke$arity$1((function (){var G__72389 = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"namespace","namespace",-377510372),sci.impl.namespaces.sci_ns_name(ns)], null);
return (load_fn.cljs$core$IFn$_invoke$arity$1 ? load_fn.cljs$core$IFn$_invoke$arity$1(G__72389) : load_fn.call(null,G__72389));
})());
} else {
return null;
}
})();
if(cljs.core.truth_(temp__5753__auto____$1)){
var source = temp__5753__auto____$1;
var lines = clojure.string.split.cljs$core$IFn$_invoke$arity$2(source,/\n/);
var line__$1 = (line - (1));
var start = clojure.string.join.cljs$core$IFn$_invoke$arity$2("\n",cljs.core.drop.cljs$core$IFn$_invoke$arity$2(line__$1,lines));
var reader = sci.impl.read.source_logging_reader(start);
var res = sci.impl.parser.parse_next.cljs$core$IFn$_invoke$arity$3(ctx,reader,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"source","source",-433931539),true], null));
return new cljs.core.Keyword(null,"source","source",-433931539).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(res));
} else {
return null;
}
} else {
return null;
}
} else {
return null;
}
});
/**
 * Prints the source code for the given symbol, if it can find it.
 *   This requires that the symbol resolve to a Var defined in a
 *   namespace for which the .clj is in the classpath.
 * 
 *   Example: (source filter)
 */
sci.impl.namespaces.source = (function sci$impl$namespaces$source(_,___$1,n){
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","println","cljs.core/println",-331834442,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","or","cljs.core/or",1201033885,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("clojure.repl","source-fn","clojure.repl/source-fn",1877923323,null),null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"quote","quote",1377916282,null),null,(1),null)),(new cljs.core.List(null,n,null,(1),null))))),null,(1),null))))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol("cljs.core","str","cljs.core/str",-1971828991,null),null,(1),null)),(new cljs.core.List(null,"Source not found",null,(1),null))))),null,(1),null))], 0)))),null,(1),null)))));
});
sci.impl.namespaces.clojure_repl_namespace = sci.lang.__GT_Namespace(new cljs.core.Symbol(null,"clojure.repl","clojure.repl",570897595,null),null);
sci.impl.namespaces.repl_var = sci.impl.namespaces.ns_new_var(sci.impl.namespaces.clojure_repl_namespace);
sci.impl.namespaces.clojure_repl = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Symbol(null,"find-doc","find-doc",-1096800949,null),new cljs.core.Symbol(null,"dir","dir",-919681108,null),new cljs.core.Symbol(null,"dir-fn","dir-fn",187684626,null),new cljs.core.Symbol(null,"source-fn","source-fn",-1114937984,null),new cljs.core.Symbol(null,"source","source",1206599988,null),new cljs.core.Symbol(null,"doc","doc",-741138878,null),new cljs.core.Symbol(null,"print-doc","print-doc",528043232,null),new cljs.core.Symbol(null,"apropos","apropos",-1511857537,null),new cljs.core.Keyword(null,"obj","obj",981763962)],[sci.impl.namespaces.repl_var(new cljs.core.Symbol(null,"find-doc","find-doc",-1096800949,null),sci.impl.namespaces.find_doc,true),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$3(new cljs.core.Symbol(null,"dir","dir",-919681108,null),sci.impl.namespaces.dir,sci.impl.namespaces.clojure_repl_namespace),sci.impl.namespaces.repl_var(new cljs.core.Symbol(null,"dir-fn","dir-fn",187684626,null),sci.impl.namespaces.dir_fn,true),sci.impl.namespaces.repl_var(new cljs.core.Symbol(null,"source-fn","source-fn",-1114937984,null),sci.impl.namespaces.source_fn,true),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$3(new cljs.core.Symbol(null,"source","source",1206599988,null),sci.impl.namespaces.source,sci.impl.namespaces.clojure_repl_namespace),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$3(new cljs.core.Symbol(null,"doc","doc",-741138878,null),sci.impl.namespaces.doc,sci.impl.namespaces.clojure_repl_namespace),cljs.core.with_meta(sci.impl.namespaces.print_doc,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"private","private",-558947994),true], null)),sci.impl.namespaces.repl_var(new cljs.core.Symbol(null,"apropos","apropos",-1511857537,null),sci.impl.namespaces.apropos,true),sci.impl.namespaces.clojure_repl_namespace]);
sci.impl.namespaces.apply_template = (function sci$impl$namespaces$apply_template(argv,expr,values){
if(cljs.core.vector_QMARK_(argv)){
} else {
throw (new Error("Assert failed: (vector? argv)"));
}

if(cljs.core.every_QMARK_(cljs.core.symbol_QMARK_,argv)){
} else {
throw (new Error("Assert failed: (every? symbol? argv)"));
}

return clojure.walk.postwalk_replace(cljs.core.zipmap(argv,values),expr);
});
sci.impl.namespaces.do_template = (function sci$impl$namespaces$do_template(var_args){
var args__4870__auto__ = [];
var len__4864__auto___73303 = arguments.length;
var i__4865__auto___73304 = (0);
while(true){
if((i__4865__auto___73304 < len__4864__auto___73303)){
args__4870__auto__.push((arguments[i__4865__auto___73304]));

var G__73305 = (i__4865__auto___73304 + (1));
i__4865__auto___73304 = G__73305;
continue;
} else {
}
break;
}

var argseq__4871__auto__ = ((((4) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((4)),(0),null)):null);
return sci.impl.namespaces.do_template.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),argseq__4871__auto__);
});

(sci.impl.namespaces.do_template.cljs$core$IFn$_invoke$arity$variadic = (function (_,___$1,argv,expr,values){
var c = cljs.core.count(argv);
return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,"do","do",1686842252,null),null,(1),null)),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (a){
return sci.impl.namespaces.apply_template(argv,expr,a);
}),cljs.core.partition.cljs$core$IFn$_invoke$arity$2(c,values)))));
}));

(sci.impl.namespaces.do_template.cljs$lang$maxFixedArity = (4));

/** @this {Function} */
(sci.impl.namespaces.do_template.cljs$lang$applyTo = (function (seq72414){
var G__72415 = cljs.core.first(seq72414);
var seq72414__$1 = cljs.core.next(seq72414);
var G__72416 = cljs.core.first(seq72414__$1);
var seq72414__$2 = cljs.core.next(seq72414__$1);
var G__72417 = cljs.core.first(seq72414__$2);
var seq72414__$3 = cljs.core.next(seq72414__$2);
var G__72418 = cljs.core.first(seq72414__$3);
var seq72414__$4 = cljs.core.next(seq72414__$3);
var self__4851__auto__ = this;
return self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__72415,G__72416,G__72417,G__72418,seq72414__$4);
}));

sci.impl.namespaces.clojure_template_namespace = sci.lang.__GT_Namespace(new cljs.core.Symbol(null,"clojure.template","clojure.template",-1162325089,null),null);
sci.impl.namespaces.clojure_template = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"obj","obj",981763962),sci.impl.namespaces.clojure_template_namespace,new cljs.core.Symbol(null,"apply-template","apply-template",1809601838,null),(new sci.lang.Var(sci.impl.namespaces.apply_template,new cljs.core.Symbol(null,"apply-template","apply-template",1809601838,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"apply-template","apply-template",1809601838,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),null,new cljs.core.Keyword(null,"doc","doc",1913296891),null,new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_template_namespace], null),false,false)),new cljs.core.Symbol(null,"do-template","do-template",-1578627476,null),sci.impl.namespaces.macrofy.cljs$core$IFn$_invoke$arity$3(new cljs.core.Symbol(null,"do-template","do-template",-1578627476,null),sci.impl.namespaces.do_template,sci.impl.namespaces.clojure_template_namespace)], null);
sci.impl.namespaces.clojure_string_namespace = sci.lang.__GT_Namespace(new cljs.core.Symbol(null,"clojure.string","clojure.string",-1415552165,null),null);
sci.impl.namespaces.clojure_set_namespace = sci.lang.__GT_Namespace(new cljs.core.Symbol(null,"clojure.set","clojure.set",-630955632,null),null);
sci.impl.namespaces.clojure_walk_namespace = sci.lang.__GT_Namespace(new cljs.core.Symbol(null,"clojure.walk","clojure.walk",1625897340,null),null);
sci.impl.namespaces.clojure_edn_namespace = sci.lang.__GT_Namespace(new cljs.core.Symbol(null,"clojure.edn","clojure.edn",-302325352,null),null);
sci.impl.namespaces.macroexpand_all = (new sci.lang.Var((function (ctx,form){
return clojure.walk.prewalk((function (x){
if(cljs.core.seq_QMARK_(x)){
var fexpr__72437 = cljs.core.deref(sci.impl.utils.macroexpand_STAR_);
return (fexpr__72437.cljs$core$IFn$_invoke$arity$2 ? fexpr__72437.cljs$core$IFn$_invoke$arity$2(ctx,x) : fexpr__72437.call(null,ctx,x));
} else {
return x;
}
}),form);
}),new cljs.core.Symbol(null,"macroexpand-all","macroexpand-all",966103926,null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_walk_namespace,new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"macroexpand-all","macroexpand-all",966103926,null),new cljs.core.Keyword(null,"doc","doc",1913296891),"Recursively performs all possible macroexpansions in form."], null),false,true));
sci.impl.namespaces.clojure_walk_ns = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Symbol(null,"keywordize-keys","keywordize-keys",-1343651517,null),new cljs.core.Symbol(null,"postwalk","postwalk",967039904,null),new cljs.core.Symbol(null,"postwalk-replace","postwalk-replace",77744733,null),new cljs.core.Symbol(null,"walk","walk",1673453164,null),new cljs.core.Symbol(null,"prewalk","prewalk",1337993264,null),new cljs.core.Symbol(null,"prewalk-replace","prewalk-replace",2117002030,null),new cljs.core.Keyword(null,"obj","obj",981763962),new cljs.core.Symbol(null,"stringify-keys","stringify-keys",1735215919,null),new cljs.core.Symbol(null,"macroexpand-all","macroexpand-all",966103926,null)],[(new sci.lang.Var(clojure.walk.keywordize_keys,new cljs.core.Symbol(null,"keywordize-keys","keywordize-keys",-1343651517,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"keywordize-keys","keywordize-keys",-1343651517,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"m","m",-1021758608,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Recursively transforms all map keys from strings to keywords.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_walk_namespace], null),false,false)),(new sci.lang.Var(clojure.walk.postwalk,new cljs.core.Symbol(null,"postwalk","postwalk",967039904,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"postwalk","postwalk",967039904,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"form","form",16469056,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Performs a depth-first, post-order traversal of form.  Calls f on\n  each sub-form, uses f's return value in place of the original.\n  Recognizes all Clojure data structures. Consumes seqs as with doall.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_walk_namespace], null),false,false)),(new sci.lang.Var(clojure.walk.postwalk_replace,new cljs.core.Symbol(null,"postwalk-replace","postwalk-replace",77744733,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"postwalk-replace","postwalk-replace",77744733,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"smap","smap",-2041991975,null),new cljs.core.Symbol(null,"form","form",16469056,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Recursively transforms form by replacing keys in smap with their\n  values.  Like clojure/replace but works on any data structure.  Does\n  replacement at the leaves of the tree first.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_walk_namespace], null),false,false)),(new sci.lang.Var(clojure.walk.walk,new cljs.core.Symbol(null,"walk","walk",1673453164,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"walk","walk",1673453164,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"inner","inner",257360312,null),new cljs.core.Symbol(null,"outer","outer",1265345571,null),new cljs.core.Symbol(null,"form","form",16469056,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Traverses form, an arbitrary data structure.  inner and outer are\n  functions.  Applies inner to each element of form, building up a\n  data structure of the same type, then applies outer to the result.\n  Recognizes all Clojure data structures. Consumes seqs as with doall.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_walk_namespace], null),false,false)),(new sci.lang.Var(clojure.walk.prewalk,new cljs.core.Symbol(null,"prewalk","prewalk",1337993264,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"prewalk","prewalk",1337993264,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"form","form",16469056,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Like postwalk, but does pre-order traversal.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_walk_namespace], null),false,false)),(new sci.lang.Var(clojure.walk.prewalk_replace,new cljs.core.Symbol(null,"prewalk-replace","prewalk-replace",2117002030,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"prewalk-replace","prewalk-replace",2117002030,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"smap","smap",-2041991975,null),new cljs.core.Symbol(null,"form","form",16469056,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Recursively transforms form by replacing keys in smap with their\n  values.  Like clojure/replace but works on any data structure.  Does\n  replacement at the root of the tree first.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_walk_namespace], null),false,false)),sci.impl.namespaces.clojure_walk_namespace,(new sci.lang.Var(clojure.walk.stringify_keys,new cljs.core.Symbol(null,"stringify-keys","stringify-keys",1735215919,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"stringify-keys","stringify-keys",1735215919,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"m","m",-1021758608,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Recursively transforms all map keys from keywords to strings.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_walk_namespace], null),false,false)),sci.impl.namespaces.macroexpand_all]);
sci.impl.namespaces.namespaces = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Symbol(null,"clojure.string","clojure.string",-1415552165,null),new cljs.core.Symbol(null,"clojure.template","clojure.template",-1162325089,null),new cljs.core.Symbol(null,"sci.impl.protocols","sci.impl.protocols",-697012432,null),new cljs.core.Symbol(null,"clojure.core","clojure.core",-189332625,null),new cljs.core.Symbol(null,"clojure.set","clojure.set",-630955632,null),new cljs.core.Symbol(null,"sci.impl.deftype","sci.impl.deftype",959784924,null),new cljs.core.Symbol(null,"clojure.walk","clojure.walk",1625897340,null),new cljs.core.Symbol(null,"sci.impl.records","sci.impl.records",-393424368,null),new cljs.core.Symbol(null,"clojure.edn","clojure.edn",-302325352,null),new cljs.core.Symbol(null,"clojure.repl","clojure.repl",570897595,null)],[cljs.core.PersistentHashMap.fromArrays([new cljs.core.Symbol(null,"split","split",1041096409,null),new cljs.core.Symbol(null,"index-of","index-of",1275975485,null),new cljs.core.Symbol(null,"trimr","trimr",-1739157155,null),new cljs.core.Symbol(null,"upper-case","upper-case",1427515769,null),new cljs.core.Symbol(null,"lower-case","lower-case",1428172944,null),new cljs.core.Symbol(null,"reverse","reverse",752076261,null),new cljs.core.Symbol(null,"ends-with?","ends-with?",-346570208,null),new cljs.core.Symbol(null,"split-lines","split-lines",777513935,null),new cljs.core.Symbol(null,"last-index-of","last-index-of",215608200,null),new cljs.core.Symbol(null,"trim-newline","trim-newline",656815794,null),new cljs.core.Symbol(null,"blank?","blank?",1891979743,null),new cljs.core.Symbol(null,"replace","replace",853943757,null),new cljs.core.Symbol(null,"join","join",881669637,null),new cljs.core.Symbol(null,"trim","trim",-1880116002,null),new cljs.core.Symbol(null,"starts-with?","starts-with?",1014173927,null),new cljs.core.Symbol(null,"triml","triml",-286546306,null),new cljs.core.Symbol(null,"escape","escape",648929575,null),new cljs.core.Keyword(null,"obj","obj",981763962),new cljs.core.Symbol(null,"includes?","includes?",-2049283381,null),new cljs.core.Symbol(null,"capitalize","capitalize",-2143275164,null),new cljs.core.Symbol(null,"replace-first","replace-first",-943534331,null)],[(new sci.lang.Var(clojure.string.split,new cljs.core.Symbol(null,"split","split",1041096409,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"split","split",1041096409,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null),new cljs.core.Symbol(null,"re","re",1869207729,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null),new cljs.core.Symbol(null,"re","re",1869207729,null),new cljs.core.Symbol(null,"limit","limit",284709164,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Splits string on a regular expression. Optional argument limit is\n  the maximum number of splits. Not lazy. Returns vector of the splits.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_string_namespace], null),false,false)),(new sci.lang.Var(clojure.string.index_of,new cljs.core.Symbol(null,"index-of","index-of",1275975485,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"index-of","index-of",1275975485,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null),new cljs.core.Symbol(null,"value","value",1946509744,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null),new cljs.core.Symbol(null,"value","value",1946509744,null),new cljs.core.Symbol(null,"from-index","from-index",1882766240,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return index of value (string or char) in s, optionally searching\n  forward from from-index or nil if not found.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_string_namespace], null),false,false)),(new sci.lang.Var(clojure.string.trimr,new cljs.core.Symbol(null,"trimr","trimr",-1739157155,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"trimr","trimr",-1739157155,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Removes whitespace from the right side of string.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_string_namespace], null),false,false)),(new sci.lang.Var(clojure.string.upper_case,new cljs.core.Symbol(null,"upper-case","upper-case",1427515769,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"upper-case","upper-case",1427515769,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Converts string to all upper-case.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_string_namespace], null),false,false)),(new sci.lang.Var(clojure.string.lower_case,new cljs.core.Symbol(null,"lower-case","lower-case",1428172944,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"lower-case","lower-case",1428172944,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Converts string to all lower-case.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_string_namespace], null),false,false)),(new sci.lang.Var(clojure.string.reverse,new cljs.core.Symbol(null,"reverse","reverse",752076261,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"reverse","reverse",752076261,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns s with its characters reversed.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_string_namespace], null),false,false)),(new sci.lang.Var(clojure.string.ends_with_QMARK_,new cljs.core.Symbol(null,"ends-with?","ends-with?",-346570208,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"ends-with?","ends-with?",-346570208,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null),new cljs.core.Symbol(null,"substr","substr",-2116301839,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"True if s ends with substr.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_string_namespace], null),false,false)),(new sci.lang.Var(clojure.string.split_lines,new cljs.core.Symbol(null,"split-lines","split-lines",777513935,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"split-lines","split-lines",777513935,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Splits s on \\n or \\r\\n.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_string_namespace], null),false,false)),(new sci.lang.Var(clojure.string.last_index_of,new cljs.core.Symbol(null,"last-index-of","last-index-of",215608200,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"last-index-of","last-index-of",215608200,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null),new cljs.core.Symbol(null,"value","value",1946509744,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null),new cljs.core.Symbol(null,"value","value",1946509744,null),new cljs.core.Symbol(null,"from-index","from-index",1882766240,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return last index of value (string or char) in s, optionally\n  searching backward from from-index or nil if not found.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_string_namespace], null),false,false)),(new sci.lang.Var(clojure.string.trim_newline,new cljs.core.Symbol(null,"trim-newline","trim-newline",656815794,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"trim-newline","trim-newline",656815794,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Removes all trailing newline \\n or return \\r characters from\n  string.  Similar to Perl's chomp.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_string_namespace], null),false,false)),(new sci.lang.Var(clojure.string.blank_QMARK_,new cljs.core.Symbol(null,"blank?","blank?",1891979743,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"blank?","blank?",1891979743,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"True is s is nil, empty, or contains only whitespace.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_string_namespace], null),false,false)),(new sci.lang.Var(clojure.string.replace,new cljs.core.Symbol(null,"replace","replace",853943757,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"replace","replace",853943757,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null),new cljs.core.Symbol(null,"match","match",-1434376219,null),new cljs.core.Symbol(null,"replacement","replacement",-195707312,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Replaces all instance of match with replacement in s.\n\n   match/replacement can be:\n\n   string / string\n   pattern / (string or function of match).\n\n   See also replace-first.\n\n   The replacement is literal (i.e. none of its characters are treated\n   specially) for all cases above except pattern / string.\n\n   For pattern / string, $1, $2, etc. in the replacement string are\n   substituted with the string that matched the corresponding\n   parenthesized group in the pattern.\n\n   Example:\n   (clojure.string/replace \"Almost Pig Latin\" #\"\\b(\\w)(\\w+)\\b\" \"$2$1ay\")\n   -> \"lmostAay igPay atinLay\"",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_string_namespace], null),false,false)),(new sci.lang.Var(clojure.string.join,new cljs.core.Symbol(null,"join","join",881669637,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"join","join",881669637,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"separator","separator",11782402,null),new cljs.core.Symbol(null,"coll","coll",-1006698606,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a string of all elements in coll, as returned by (seq coll),\n  separated by an optional separator.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_string_namespace], null),false,false)),(new sci.lang.Var(clojure.string.trim,new cljs.core.Symbol(null,"trim","trim",-1880116002,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"trim","trim",-1880116002,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Removes whitespace from both ends of string.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_string_namespace], null),false,false)),(new sci.lang.Var(clojure.string.starts_with_QMARK_,new cljs.core.Symbol(null,"starts-with?","starts-with?",1014173927,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"starts-with?","starts-with?",1014173927,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null),new cljs.core.Symbol(null,"substr","substr",-2116301839,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"True if s starts with substr.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_string_namespace], null),false,false)),(new sci.lang.Var(clojure.string.triml,new cljs.core.Symbol(null,"triml","triml",-286546306,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"triml","triml",-286546306,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Removes whitespace from the left side of string.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_string_namespace], null),false,false)),(new sci.lang.Var(clojure.string.escape,new cljs.core.Symbol(null,"escape","escape",648929575,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"escape","escape",648929575,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null),new cljs.core.Symbol(null,"cmap","cmap",1947829886,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return a new string, using cmap to escape each character ch\n   from s as follows:\n\n   If (cmap ch) is nil, append ch to the new string.\n   If (cmap ch) is non-nil, append (str (cmap ch)) instead.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_string_namespace], null),false,false)),sci.impl.namespaces.clojure_string_namespace,(new sci.lang.Var(clojure.string.includes_QMARK_,new cljs.core.Symbol(null,"includes?","includes?",-2049283381,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"includes?","includes?",-2049283381,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null),new cljs.core.Symbol(null,"substr","substr",-2116301839,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"True if s includes substr.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_string_namespace], null),false,false)),(new sci.lang.Var(clojure.string.capitalize,new cljs.core.Symbol(null,"capitalize","capitalize",-2143275164,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"capitalize","capitalize",-2143275164,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Converts first character of the string to upper-case, all other\n  characters to lower-case.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_string_namespace], null),false,false)),(new sci.lang.Var(clojure.string.replace_first,new cljs.core.Symbol(null,"replace-first","replace-first",-943534331,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"replace-first","replace-first",-943534331,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null),new cljs.core.Symbol(null,"match","match",-1434376219,null),new cljs.core.Symbol(null,"replacement","replacement",-195707312,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Replaces the first instance of match with replacement in s.\n\n   match/replacement can be:\n\n   string / string\n   pattern / (string or function of match).\n\n   See also replace.\n\n   The replacement is literal (i.e. none of its characters are treated\n   specially) for all cases above except pattern / string.\n\n   For pattern / string, $1, $2, etc. in the replacement string are\n   substituted with the string that matched the corresponding\n   parenthesized group in the pattern.\n\n   Example:\n   (clojure.string/replace-first \"swap first two words\"\n                                 #\"(\\w+)(\\s+)(\\w+)\" \"$3$2$1\")\n   -> \"first swap two words\"",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_string_namespace], null),false,false))]),sci.impl.namespaces.clojure_template,sci.impl.namespaces.sci_impl_protocols,sci.impl.namespaces.clojure_core,cljs.core.PersistentHashMap.fromArrays([new cljs.core.Symbol(null,"project","project",-1530041190,null),new cljs.core.Symbol(null,"map-invert","map-invert",1258886340,null),new cljs.core.Symbol(null,"select","select",-1506602266,null),new cljs.core.Symbol(null,"superset?","superset?",2074872204,null),new cljs.core.Symbol(null,"join","join",881669637,null),new cljs.core.Symbol(null,"union","union",-511498270,null),new cljs.core.Symbol(null,"rename","rename",-1146278156,null),new cljs.core.Symbol(null,"subset?","subset?",1551079215,null),new cljs.core.Symbol(null,"difference","difference",-738334373,null),new cljs.core.Keyword(null,"obj","obj",981763962),new cljs.core.Symbol(null,"intersection","intersection",-650544759,null),new cljs.core.Symbol(null,"index","index",108845612,null),new cljs.core.Symbol(null,"rename-keys","rename-keys",355340888,null)],[(new sci.lang.Var(clojure.set.project,new cljs.core.Symbol(null,"project","project",-1530041190,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"project","project",-1530041190,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"xrel","xrel",-735800081,null),new cljs.core.Symbol(null,"ks","ks",-754231827,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a rel of the elements of xrel with only the keys in ks",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_set_namespace], null),false,false)),(new sci.lang.Var(clojure.set.map_invert,new cljs.core.Symbol(null,"map-invert","map-invert",1258886340,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"map-invert","map-invert",1258886340,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"m","m",-1021758608,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the map with the vals mapped to the keys.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_set_namespace], null),false,false)),(new sci.lang.Var(clojure.set.select,new cljs.core.Symbol(null,"select","select",-1506602266,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"select","select",-1506602266,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"pred","pred",-727012372,null),new cljs.core.Symbol(null,"xset","xset",-371743149,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a set of the elements for which pred is true",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_set_namespace], null),false,false)),(new sci.lang.Var(clojure.set.superset_QMARK_,new cljs.core.Symbol(null,"superset?","superset?",2074872204,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"superset?","superset?",2074872204,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"set1","set1",-1952562536,null),new cljs.core.Symbol(null,"set2","set2",1231516531,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Is set1 a superset of set2?",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_set_namespace], null),false,false)),(new sci.lang.Var(clojure.set.join,new cljs.core.Symbol(null,"join","join",881669637,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"join","join",881669637,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"xrel","xrel",-735800081,null),new cljs.core.Symbol(null,"yrel","yrel",-1573821256,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"xrel","xrel",-735800081,null),new cljs.core.Symbol(null,"yrel","yrel",-1573821256,null),new cljs.core.Symbol(null,"km","km",-1276648257,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_set_namespace], null),false,false)),(new sci.lang.Var(clojure.set.union,new cljs.core.Symbol(null,"union","union",-511498270,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"union","union",-511498270,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s1","s1",338671490,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s1","s1",338671490,null),new cljs.core.Symbol(null,"s2","s2",614604262,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s1","s1",338671490,null),new cljs.core.Symbol(null,"s2","s2",614604262,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"sets","sets",2041487109,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return a set that is the union of the input sets",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_set_namespace], null),false,false)),(new sci.lang.Var(clojure.set.rename,new cljs.core.Symbol(null,"rename","rename",-1146278156,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"rename","rename",-1146278156,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"xrel","xrel",-735800081,null),new cljs.core.Symbol(null,"kmap","kmap",-2108296910,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_set_namespace], null),false,false)),(new sci.lang.Var(clojure.set.subset_QMARK_,new cljs.core.Symbol(null,"subset?","subset?",1551079215,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"subset?","subset?",1551079215,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"set1","set1",-1952562536,null),new cljs.core.Symbol(null,"set2","set2",1231516531,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Is set1 a subset of set2?",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_set_namespace], null),false,false)),(new sci.lang.Var(clojure.set.difference,new cljs.core.Symbol(null,"difference","difference",-738334373,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"difference","difference",-738334373,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s1","s1",338671490,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s1","s1",338671490,null),new cljs.core.Symbol(null,"s2","s2",614604262,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s1","s1",338671490,null),new cljs.core.Symbol(null,"s2","s2",614604262,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"sets","sets",2041487109,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return a set that is the first set without elements of the remaining sets",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_set_namespace], null),false,false)),sci.impl.namespaces.clojure_set_namespace,(new sci.lang.Var(clojure.set.intersection,new cljs.core.Symbol(null,"intersection","intersection",-650544759,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"intersection","intersection",-650544759,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s1","s1",338671490,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s1","s1",338671490,null),new cljs.core.Symbol(null,"s2","s2",614604262,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s1","s1",338671490,null),new cljs.core.Symbol(null,"s2","s2",614604262,null),new cljs.core.Symbol(null,"&","&",-2144855648,null),new cljs.core.Symbol(null,"sets","sets",2041487109,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Return a set that is the intersection of the input sets",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_set_namespace], null),false,false)),(new sci.lang.Var(clojure.set.index,new cljs.core.Symbol(null,"index","index",108845612,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"index","index",108845612,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"xrel","xrel",-735800081,null),new cljs.core.Symbol(null,"ks","ks",-754231827,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_set_namespace], null),false,false)),(new sci.lang.Var(clojure.set.rename_keys,new cljs.core.Symbol(null,"rename-keys","rename-keys",355340888,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"rename-keys","rename-keys",355340888,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"map","map",-1282745308,null),new cljs.core.Symbol(null,"kmap","kmap",-2108296910,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Returns the map with the keys in kmap renamed to the vals in kmap",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_set_namespace], null),false,false))]),sci.impl.namespaces.sci_impl_deftype,sci.impl.namespaces.clojure_walk_ns,sci.impl.namespaces.sci_impl_records,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"obj","obj",981763962),sci.impl.namespaces.clojure_edn_namespace,new cljs.core.Symbol(null,"read","read",-1514377108,null),(new sci.lang.Var(cljs.reader.read,new cljs.core.Symbol(null,"read","read",-1514377108,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"read","read",-1514377108,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"reader","reader",1810192380,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"keys","keys",1068423698),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"eof","eof",1151468290,null)], null),new cljs.core.Keyword(null,"as","as",1148689641),new cljs.core.Symbol(null,"opts","opts",1795607228,null)], null),new cljs.core.Symbol(null,"reader","reader",1810192380,null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"reader","reader",1810192380,null),new cljs.core.Symbol(null,"eof-error?","eof-error?",863128689,null),new cljs.core.Symbol(null,"eof","eof",1151468290,null),new cljs.core.Symbol(null,"opts","opts",1795607228,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Reads the first object from an cljs.tools.reader.reader-types/IPushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true otherwise returns eof.\n   If no reader is provided, *in* will be used.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   cljs.tools.reader.edn/read doesn't depend on dynamic Vars, all configuration\n   is done by passing an opt map.\n\n   opts is a map that can include the following keys:\n   :eof - value to return on end-of-file. When not supplied, eof throws an exception.\n   :readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.\n              When not supplied, only the default-data-readers will be used.\n   :default - A function of two args, that will, if present and no reader is found for a tag,\n              be called with the tag and the value.",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_edn_namespace], null),false,false)),new cljs.core.Symbol(null,"read-string","read-string",-558384455,null),(new sci.lang.Var(cljs.reader.read_string,new cljs.core.Symbol(null,"read-string","read-string",-558384455,null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Symbol(null,"read-string","read-string",-558384455,null),new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"s","s",-948495851,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"opts","opts",1795607228,null),new cljs.core.Symbol(null,"s","s",-948495851,null)], null)),new cljs.core.Keyword(null,"doc","doc",1913296891),"Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   opts is a map as per cljs.tools.reader.edn/read",new cljs.core.Keyword("sci","built-in","sci/built-in",1244659599),true,new cljs.core.Keyword(null,"ns","ns",441598760),sci.impl.namespaces.clojure_edn_namespace], null),false,false))], null),sci.impl.namespaces.clojure_repl]);

//# sourceMappingURL=sci.impl.namespaces.js.map
