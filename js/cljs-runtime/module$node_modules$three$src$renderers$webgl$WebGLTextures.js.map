{
"version":3,
"file":"module$node_modules$three$src$renderers$webgl$WebGLTextures.js",
"lineCount":83,
"mappings":"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAgBxHC,QAASA,yBAAwB,CAACC,oBAAD,CAAc,CAAE,GAAuB,UAAvB,GAAI,MAAOC,QAAX,CAAmC,MAAO,KAAM,KAAIC,kBAAoB,IAAID,OAA5B,CAA2CE,iBAAmB,IAAIF,OAAW,OAAO,CAACF,wBAAD,CAA4BA,QAAS,CAACC,WAAD,CAAc,CAAE,MAAOA,YAAA,CAAcG,gBAAd,CAAiCD,iBAA1C,CAAnD,EAAmHF,oBAAnH,CAAtI,CAb/CI,MAAOC,CAAAA,cAAP,CAAsBP,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CQ,MAAO,CAAA,CADoC,CAA7C,CAGAR,QAAQS,CAAAA,aAAR,CAcAA,QAAsB,CAACC,GAAD,CAAMC,UAAN;AAAkBC,KAAlB,CAAyBC,UAAzB,CAAqCC,YAArC,CAAmDC,KAAnD,CAA0DC,IAA1D,CAAgE,CAiCpFC,QAASA,YAAW,CAACC,KAAD,CAAQC,eAAR,CAAyBC,cAAzB,CAAyCC,OAAzC,CAAkD,CACpE,IAAIC,MAAQ,CAEZ,IAAIJ,KAAMK,CAAAA,KAAV,CAAkBF,OAAlB,EAA6BH,KAAMM,CAAAA,MAAnC,CAA4CH,OAA5C,CACEC,KAAA,CAAQD,OAAR,CAAkBI,IAAKC,CAAAA,GAAL,CAASR,KAAMK,CAAAA,KAAf,CAAsBL,KAAMM,CAAAA,MAA5B,CAIpB,IAAY,CAAZ,CAAIF,KAAJ,EAAqC,CAAA,CAArC,GAAiBH,eAAjB,CAA2C,CAEzC,GAAgC,WAAhC,GAAI,MAAOQ,iBAAX,EAA+CT,KAA/C,WAAgES,iBAAhE,EAAiH,WAAjH,GAAoF,MAAOC,kBAA3F,EAAgIV,KAAhI,WAAiJU,kBAAjJ,EAA6L,WAA7L,GAAsK,MAAOC,YAA7K,EAA4MX,KAA5M,WAA6NW,YAA7N,CAYE,MAXMC,QAWCC,CAXOZ,eAAA,CAAkBa,SAAUC,CAAAA,eAA5B;AAA8CR,IAAKK,CAAAA,KAW1DC,CAVDR,eAUCQ,CAVOD,OAAA,CAAMR,KAAN,CAAcJ,KAAMK,CAAAA,KAApB,CAUPQ,CATDP,KASCO,CATQD,OAAA,CAAMR,KAAN,CAAcJ,KAAMM,CAAAA,MAApB,CASRO,CARSG,IAAAA,EAQTH,GARHI,OAQGJ,GARoBI,OAQpBJ,CA1BJK,kBAAA,CACP,IAAIC,eAAJ,CAiBsDd,eAjBtD,CAiB6DC,KAjB7D,CADO,CAC8B,GAAIc,MAAOC,CAAAA,eAAX,EAA4B,QAA5B,CAyB1BR,EANDA,cAMCA,CANQX,cAAA,CApBZgB,kBAAA,CACP,IAAIC,eAAJ,CAmBiDd,eAnBjD,CAmBwDC,KAnBxD,CADO,CAC8B,GAAIc,MAAOC,CAAAA,eAAX,EAA4B,QAA5B,CAmBlB,CAA+CJ,OAMvDJ,CALPA,cAAOR,CAAAA,KAKAQ,CALQR,eAKRQ,CAJPA,cAAOP,CAAAA,MAIAO,CAJSP,KAITO,CAHSA,cAAOS,CAAAA,UAAPC,CAAkB,IAAlBA,CACRC,CAAAA,SAAR,CAAkBxB,KAAlB,CAAyB,CAAzB,CAA4B,CAA5B,CAA+BK,eAA/B,CAAsCC,KAAtC,CAEOO,CADPY,OAAQC,CAAAA,IAAR,CAAa,sDAAb;AAAsE1B,KAAMK,CAAAA,KAA5E,CAAoF,GAApF,CAA0FL,KAAMM,CAAAA,MAAhG,CAAyG,QAAzG,CAAoHD,eAApH,CAA4H,GAA5H,CAAkIC,KAAlI,CAA2I,IAA3I,CACOO,CAAAA,cAEH,OAAJ,EAAcb,MAAd,EACEyB,OAAQC,CAAAA,IAAR,CAAa,wDAAb,CAAwE1B,KAAMK,CAAAA,KAA9E,CAAsF,GAAtF,CAA4FL,KAAMM,CAAAA,MAAlG,CAA2G,IAA3G,CAjBqC,CAwB3C,MAAON,MAhC6D,CAmCtE2B,QAASA,aAAY,CAAC3B,KAAD,CAAQ,CAC3B,MAAOc,UAAUa,CAAAA,YAAV,CAAuB3B,KAAMK,CAAAA,KAA7B,CAAP,EAA8CS,SAAUa,CAAAA,YAAV,CAAuB3B,KAAMM,CAAAA,MAA7B,CADnB,CAS7BsB,QAASA,4BAA2B,CAACC,OAAD,CAAUC,YAAV,CAAwB,CAC1D,MAAOD,QAAQE,CAAAA,eAAf,EAAkCD,YAAlC,EAAkDD,OAAQG,CAAAA,SAA1D,GAAwEC,UAAWC,CAAAA,aAAnF,EAAoGL,OAAQG,CAAAA,SAA5G,GAA0HC,UAAWE,CAAAA,YAD3E;AAQ5DC,QAASA,kBAAiB,CAACC,kBAAD,CAAqBC,QAArB,CAA+BC,MAA/B,CAAuCC,QAAvC,CAAiDC,mBAAA,CAAsB,CAAA,CAAvE,CAA8E,CACtG,GAAiB,CAAA,CAAjB,GAAIC,QAAJ,CAAwB,MAAOJ,SAE/B,IAA2B,IAA3B,GAAID,kBAAJ,CAAiC,CAC/B,GAAgCrB,IAAAA,EAAhC,GAAIxB,GAAA,CAAI6C,kBAAJ,CAAJ,CAA2C,MAAO7C,IAAA,CAAI6C,kBAAJ,CAClDZ,QAAQC,CAAAA,IAAR,CAAa,0EAAb,CAA2FW,kBAA3F,CAAgH,GAAhH,CAF+B,CAK7BM,kBAAAA,CAAiBL,QAEjBA,SAAJ,GAAiB9C,GAAIoD,CAAAA,GAArB,GACML,MAEJ,GAFe/C,GAAIqD,CAAAA,KAEnB,GAF0BF,kBAE1B,CAF2CnD,GAAIsD,CAAAA,IAE/C,EADIP,MACJ,GADe/C,GAAIuD,CAAAA,UACnB,GAD+BJ,kBAC/B,CADgDnD,GAAIwD,CAAAA,IACpD,EAAIT,MAAJ,GAAe/C,GAAIyD,CAAAA,aAAnB;CAAkCN,kBAAlC,CAAmDnD,GAAI0D,CAAAA,EAAvD,CAHF,CAMIZ,SAAJ,GAAiB9C,GAAI2D,CAAAA,EAArB,GACMZ,MAEJ,GAFe/C,GAAIqD,CAAAA,KAEnB,GAF0BF,kBAE1B,CAF2CnD,GAAI4D,CAAAA,KAE/C,EADIb,MACJ,GADe/C,GAAIuD,CAAAA,UACnB,GAD+BJ,kBAC/B,CADgDnD,GAAI6D,CAAAA,KACpD,EAAId,MAAJ,GAAe/C,GAAIyD,CAAAA,aAAnB,GAAkCN,kBAAlC,CAAmDnD,GAAI8D,CAAAA,GAAvD,CAHF,CAMIhB,SAAJ,GAAiB9C,GAAI+D,CAAAA,IAArB,GACMhB,MAIJ,GAJe/C,GAAIqD,CAAAA,KAInB,GAJ0BF,kBAI1B,CAJ2CnD,GAAIgE,CAAAA,OAI/C,EAHIjB,MAGJ,GAHe/C,GAAIuD,CAAAA,UAGnB,GAH+BJ,kBAG/B,CAHgDnD,GAAIiE,CAAAA,OAGpD,EAFIlB,MAEJ,GAFe/C,GAAIyD,CAAAA,aAEnB,GAFkCN,kBAElC,CAFmDH,QAAA,GAAaP,UAAWyB,CAAAA,YAAxB,EAAgE,CAAA,CAAhE,GAAwCjB,mBAAxC,CAAwEjD,GAAImE,CAAAA,YAA5E,CAA2FnE,GAAIoE,CAAAA,KAElJ,EADIrB,MACJ,GADe/C,GAAIqE,CAAAA,sBACnB;CAD2ClB,kBAC3C,CAD4DnD,GAAIsE,CAAAA,KAChE,EAAIvB,MAAJ,GAAe/C,GAAIuE,CAAAA,sBAAnB,GAA2CpB,kBAA3C,CAA4DnD,GAAIwE,CAAAA,OAAhE,CALF,CAQIrB,mBAAJ,GAAuBnD,GAAIwD,CAAAA,IAA3B,EAAmCL,kBAAnC,GAAsDnD,GAAIsD,CAAAA,IAA1D,EAAkEH,kBAAlE,GAAqFnD,GAAI6D,CAAAA,KAAzF,EAAkGV,kBAAlG,GAAqHnD,GAAI4D,CAAAA,KAAzH,EAAkIT,kBAAlI,GAAqJnD,GAAIiE,CAAAA,OAAzJ,EAAoKd,kBAApK,GAAuLnD,GAAIgE,CAAAA,OAA3L,EACE/D,UAAWwE,CAAAA,GAAX,CAAe,wBAAf,CAGF,OAAOtB,mBAlC+F,CAqCxGuB,QAASA,aAAY,CAACrC,OAAD,CAAU7B,KAAV,CAAiB8B,YAAjB,CAA+B,CAClD,MAA2D,CAAA,CAA3D,GAAIF,2BAAA,CAA4BC,OAA5B,CAAqCC,YAArC,CAAJ,EAAmED,OAAQsC,CAAAA,oBAA3E;AAAmGtC,OAAQG,CAAAA,SAA3G,GAAyHC,UAAWC,CAAAA,aAApI,EAAqJL,OAAQG,CAAAA,SAA7J,GAA2KC,UAAWE,CAAAA,YAAtL,CACS5B,IAAK6D,CAAAA,IAAL,CAAU7D,IAAKC,CAAAA,GAAL,CAASR,KAAMK,CAAAA,KAAf,CAAsBL,KAAMM,CAAAA,MAA5B,CAAV,CADT,CAC0D,CAD1D,CAE+BU,IAAAA,EAAxB,GAAIa,OAAQwC,CAAAA,OAAZ,EAA8D,CAA9D,CAAqCxC,OAAQwC,CAAAA,OAAQC,CAAAA,MAArD,CAEEzC,OAAQwC,CAAAA,OAAQC,CAAAA,MAFlB,CAGIzC,OAAQ0C,CAAAA,mBAAZ,EAAmCC,KAAMC,CAAAA,OAAN,CAAc5C,OAAQ7B,CAAAA,KAAtB,CAAnC,CACEA,KAAMqE,CAAAA,OAAQC,CAAAA,MADhB,CAIE,CAVyC,CAepDI,QAASA,eAAc,CAACC,CAAD,CAAI,CACzB,MAAIA,EAAJ,GAAU1C,UAAWC,CAAAA,aAArB,EAAsCyC,CAAtC,GAA4C1C,UAAW2C,CAAAA,0BAAvD,EAAqFD,CAArF,GAA2F1C,UAAW4C,CAAAA,yBAAtG,CACSrF,GAAIsF,CAAAA,OADb,CAIOtF,GAAIuF,CAAAA,MALc,CAS3BC,QAASA,iBAAgB,CAACC,KAAD,CAAQ,CACzBpD,KAAAA;AAAUoD,KAAMC,CAAAA,MACtBrD,MAAQsD,CAAAA,mBAAR,CAA4B,SAA5B,CAAuCH,gBAAvC,CAgBA,KAAMI,kBAAoBzF,UAAWsE,CAAAA,GAAX,CAfRpC,KAeQ,CAC1B,IAAsCb,IAAAA,EAAtC,GAAIoE,iBAAkBC,CAAAA,WAAtB,CAAA,CAEA,IAAMC,OAlBYzD,KAkBKyD,CAAAA,MAAvB,CAEMC,cAAgBC,QAASvB,CAAAA,GAAT,CAAaqB,MAAb,CAElBC,cAAJ,GACQE,iBAQN,CARqBF,aAAA,CAAcH,iBAAkBM,CAAAA,UAAhC,CAQrB,CAPAD,iBAAaE,CAAAA,SAAb,EAOA,CAL+B,CAK/B,GALIF,iBAAaE,CAAAA,SAKjB,EAJEC,aAAA,CA3Bc/D,KA2Bd,CAIF,CAA0C,CAA1C,GAAIzC,MAAOyG,CAAAA,IAAP,CAAYN,aAAZ,CAA2BjB,CAAAA,MAA/B,EACEkB,QAASM,CAAAA,MAAT,CAAgBR,MAAhB,CAVJ,CAcA3F,WAAWoG,CAAAA,MAAX,CApCkBlE,KAoClB,CApBA,CAdIA,KAAQmE,CAAAA,cAAZ,EACEC,cAAeH,CAAAA,MAAf,CAAsBjE,KAAtB,CAN6B;AAUjCqE,QAASA,sBAAqB,CAACjB,KAAD,CAAQ,CAC9BkB,KAAAA,CAAelB,KAAMC,CAAAA,MAC3BiB,MAAahB,CAAAA,mBAAb,CAAiC,SAAjC,CAA4Ce,qBAA5C,CA4CA,OAAMrE,QA3CiBsE,KA2CMtE,CAAAA,OAC7B,KAAMuE,uBAAyBzG,UAAWsE,CAAAA,GAAX,CA5CRkC,KA4CQ,CAA/B,CACMf,kBAAoBzF,UAAWsE,CAAAA,GAAX,CAAepC,OAAf,CAEeb,KAAAA,EAAzC,GAAIoE,iBAAkBiB,CAAAA,cAAtB,GACE7G,GAAIoG,CAAAA,aAAJ,CAAkBR,iBAAkBiB,CAAAA,cAApC,CAEA,CAAAvG,IAAKwG,CAAAA,MAAOC,CAAAA,QAAZ,EAHF,CA/CuBJ,MAqDNK,CAAAA,YAAjB,EArDuBL,KAsDRK,CAAAA,YAAaC,CAAAA,OAA1B,EAGF,IAzDuBN,KAyDNO,CAAAA,uBAAjB,CACE,IAASC,iBAAT,CAAa,CAAb,CAAoB,CAApB,CAAgBA,iBAAhB,CAAuBA,iBAAA,EAAvB,CACEnH,GAAIoH,CAAAA,iBAAJ,CAAsBR,sBAAuBS,CAAAA,kBAAvB,CAA0CF,iBAA1C,CAAtB,CAEA;AAAIP,sBAAuBU,CAAAA,kBAA3B,EAA+CtH,GAAIuH,CAAAA,kBAAJ,CAAuBX,sBAAuBU,CAAAA,kBAAvB,CAA0CH,iBAA1C,CAAvB,CAJnD,KAMO,CACLnH,GAAIoH,CAAAA,iBAAJ,CAAsBR,sBAAuBS,CAAAA,kBAA7C,CAEIT,uBAAuBU,CAAAA,kBAA3B,EAA+CtH,GAAIuH,CAAAA,kBAAJ,CAAuBX,sBAAuBU,CAAAA,kBAA9C,CAC3CV,uBAAuBY,CAAAA,8BAA3B,EAA2DxH,GAAIoH,CAAAA,iBAAJ,CAAsBR,sBAAuBY,CAAAA,8BAA7C,CAE3D,IAAIZ,sBAAuBa,CAAAA,wBAA3B,CACE,IAASN,iBAAT;AAAa,CAAb,CAAgBA,iBAAhB,CAAoBP,sBAAuBa,CAAAA,wBAAyB3C,CAAAA,MAApE,CAA4EqC,iBAAA,EAA5E,CACMP,sBAAuBa,CAAAA,wBAAvB,CAAgDN,iBAAhD,CAAJ,EAAwDnH,GAAIuH,CAAAA,kBAAJ,CAAuBX,sBAAuBa,CAAAA,wBAAvB,CAAgDN,iBAAhD,CAAvB,CAIxDP,uBAAuBc,CAAAA,wBAA3B,EAAqD1H,GAAIuH,CAAAA,kBAAJ,CAAuBX,sBAAuBc,CAAAA,wBAA9C,CAZhD,CAeP,GA9EuBf,KA8ENgB,CAAAA,4BAAjB,CACE,IAAK,IAAIR,EAAI,CAAR,CAAWS,GAAKvF,OAAQyC,CAAAA,MAA7B,CAAqCqC,CAArC,CAAyCS,EAAzC,CAA6CT,CAAA,EAA7C,CACQU,sBAQN,CAR6B1H,UAAWsE,CAAAA,GAAX,CAAepC,OAAA,CAAQ8E,CAAR,CAAf,CAQ7B;AANIU,sBAAqBhB,CAAAA,cAMzB,GALE7G,GAAIoG,CAAAA,aAAJ,CAAkByB,sBAAqBhB,CAAAA,cAAvC,CAEA,CAAAvG,IAAKwG,CAAAA,MAAOC,CAAAA,QAAZ,EAGF,EAAA5G,UAAWoG,CAAAA,MAAX,CAAkBlE,OAAA,CAAQ8E,CAAR,CAAlB,CAIJhH,WAAWoG,CAAAA,MAAX,CAAkBlE,OAAlB,CACAlC,WAAWoG,CAAAA,MAAX,CA7FuBI,KA6FvB,CAhGoC,CAgCtCP,QAASA,cAAa,CAAC/D,OAAD,CAAU,CAC9B,MAAMuD,kBAAoBzF,UAAWsE,CAAAA,GAAX,CAAepC,OAAf,CAE1BrC,IAAIoG,CAAAA,aAAJ,CAAkBR,iBAAkBiB,CAAAA,cAApC,CAMA,QAFsBb,QAASvB,CAAAA,GAATsB,CAFP1D,OAAQyD,CAAAA,MAEDC,CAEf,CAAcH,iBAAkBM,CAAAA,UAAhC,CACP5F,KAAKwG,CAAAA,MAAOC,CAAAA,QAAZ,EAV8B,CAyGhCe,QAASA,aAAY,CAACzF,OAAD,CAAU0F,IAAV,CAAgB,CACnC,MAAMnC,kBAAoBzF,UAAWsE,CAAAA,GAAX,CAAepC,OAAf,CAC1B;GAAIA,OAAQmE,CAAAA,cAAZ,CAA4B,CAu9B5B,IAAMwB,MAAQ1H,IAAK2H,CAAAA,MAAOD,CAAAA,KAEtBvB,eAAehC,CAAAA,GAAf,CAz9B2CpC,OAy9B3C,CAAJ,GAAoC2F,KAApC,GACEvB,cAAeyB,CAAAA,GAAf,CA19B6C7F,OA09B7C,CAA4B2F,KAA5B,CAEA,CA59B6C3F,OA49BrC8F,CAAAA,MAAR,EAHF,CAz9B4B,CAE5B,GAAsC,CAAA,CAAtC,GAAI9F,OAAQ+F,CAAAA,qBAAZ,EAAiE,CAAjE,CAA+C/F,OAAQgG,CAAAA,OAAvD,EAAsEzC,iBAAkB0C,CAAAA,SAAxF,GAAsGjG,OAAQgG,CAAAA,OAA9G,CAGE,GAFM7H,KAEF,CAFU6B,OAAQ7B,CAAAA,KAElB,CAAU,IAAV,GAAAA,KAAJ,CACEyB,OAAQC,CAAAA,IAAR,CAAa,yEAAb,CADF,KAEO,IAAuB,CAAA,CAAvB,GAAI1B,KAAM+H,CAAAA,QAAV,CACLtG,OAAQC,CAAAA,IAAR,CAAa,wEAAb,CADK,KAEA,CACLsG,aAAA,CAAc5C,iBAAd;AAAiCvD,OAAjC,CAA0C0F,IAA1C,CACA,OAFK,CAMT7H,KAAMuI,CAAAA,WAAN,CAAkBzI,GAAI0I,CAAAA,UAAtB,CAAkC9C,iBAAkBiB,CAAAA,cAApD,CAAoE7G,GAAI2I,CAAAA,QAAxE,CAAmFZ,IAAnF,CAjBmC,CAmErCa,QAASA,qBAAoB,CAACC,WAAD,CAAcxG,OAAd,CAAuBC,YAAvB,CAAqC,CAC5DA,YAAJ,EACEtC,GAAI8I,CAAAA,aAAJ,CAAkBD,WAAlB,CAA+B7I,GAAI+I,CAAAA,cAAnC,CAAmDC,YAAA,CAAa3G,OAAQ4G,CAAAA,KAArB,CAAnD,CAUA,CARAjJ,GAAI8I,CAAAA,aAAJ,CAAkBD,WAAlB,CAA+B7I,GAAIkJ,CAAAA,cAAnC,CAAmDF,YAAA,CAAa3G,OAAQ8G,CAAAA,KAArB,CAAnD,CAQA,CANIN,WAMJ,GANoB7I,GAAIoJ,CAAAA,UAMxB,EANsCP,WAMtC,GANsD7I,GAAIqJ,CAAAA,gBAM1D,EALErJ,GAAI8I,CAAAA,aAAJ,CAAkBD,WAAlB,CAA+B7I,GAAIsJ,CAAAA,cAAnC,CAAmDN,YAAA,CAAa3G,OAAQkH,CAAAA,KAArB,CAAnD,CAKF,CAFAvJ,GAAI8I,CAAAA,aAAJ,CAAkBD,WAAlB;AAA+B7I,GAAIwJ,CAAAA,kBAAnC,CAAuDC,UAAA,CAAWpH,OAAQqH,CAAAA,SAAnB,CAAvD,CAEA,CAAA1J,GAAI8I,CAAAA,aAAJ,CAAkBD,WAAlB,CAA+B7I,GAAI2J,CAAAA,kBAAnC,CAAuDF,UAAA,CAAWpH,OAAQG,CAAAA,SAAnB,CAAvD,CAXF,GAaExC,GAAI8I,CAAAA,aAAJ,CAAkBD,WAAlB,CAA+B7I,GAAI+I,CAAAA,cAAnC,CAAmD/I,GAAI4J,CAAAA,aAAvD,CAgBA,CAdA5J,GAAI8I,CAAAA,aAAJ,CAAkBD,WAAlB,CAA+B7I,GAAIkJ,CAAAA,cAAnC,CAAmDlJ,GAAI4J,CAAAA,aAAvD,CAcA,CAZIf,WAYJ,GAZoB7I,GAAIoJ,CAAAA,UAYxB,EAZsCP,WAYtC,GAZsD7I,GAAIqJ,CAAAA,gBAY1D,EAXErJ,GAAI8I,CAAAA,aAAJ,CAAkBD,WAAlB,CAA+B7I,GAAIsJ,CAAAA,cAAnC,CAAmDtJ,GAAI4J,CAAAA,aAAvD,CAWF,CARIvH,OAAQ4G,CAAAA,KAQZ,GARsBxG,UAAWoH,CAAAA,mBAQjC,EARwDxH,OAAQ8G,CAAAA,KAQhE,GAR0E1G,UAAWoH,CAAAA,mBAQrF;AAPE5H,OAAQC,CAAAA,IAAR,CAAa,+HAAb,CAOF,CAJAlC,GAAI8I,CAAAA,aAAJ,CAAkBD,WAAlB,CAA+B7I,GAAIwJ,CAAAA,kBAAnC,CAAuDtE,cAAA,CAAe7C,OAAQqH,CAAAA,SAAvB,CAAvD,CAIA,CAFA1J,GAAI8I,CAAAA,aAAJ,CAAkBD,WAAlB,CAA+B7I,GAAI2J,CAAAA,kBAAnC,CAAuDzE,cAAA,CAAe7C,OAAQG,CAAAA,SAAvB,CAAvD,CAEA,CAAIH,OAAQG,CAAAA,SAAZ,GAA0BC,UAAWC,CAAAA,aAArC,EAAsDL,OAAQG,CAAAA,SAA9D,GAA4EC,UAAWE,CAAAA,YAAvF,EACEV,OAAQC,CAAAA,IAAR,CAAa,iIAAb,CA9BJ,CAkCyD;CAAA,CAAzD,GAAIjC,UAAW6J,CAAAA,GAAX,CAAe,gCAAf,CAAJ,GACQC,YAKN,CALkB9J,UAAWwE,CAAAA,GAAX,CAAe,gCAAf,CAKlB,CAJIpC,OAAQqH,CAAAA,SAIZ,GAJ0BjH,UAAWC,CAAAA,aAIrC,EAHIL,OAAQG,CAAAA,SAGZ,GAH0BC,UAAW4C,CAAAA,yBAGrC,EAHkEhD,OAAQG,CAAAA,SAG1E,GAHwFC,UAAWuH,CAAAA,wBAGnG,EAFI3H,OAAQ4H,CAAAA,IAEZ,GAFqBxH,UAAWyH,CAAAA,SAEhC,EAF4F,CAAA,CAE5F,GAF6CjK,UAAW6J,CAAAA,GAAX,CAAe,0BAAf,CAE7C,EAAiB,CAAA,CAAjB,GAAI5G,QAAJ,EAA0Bb,OAAQ4H,CAAAA,IAAlC,GAA2CxH,UAAW0H,CAAAA,aAAtD,EAA2H,CAAA,CAA3H,GAAuElK,UAAW6J,CAAAA,GAAX,CAAe,+BAAf,CAAvE,EAEI,EAAqB,CAArB,CAAAzH,OAAQ+H,CAAAA,UAAR,EAA0BjK,UAAWsE,CAAAA,GAAX,CAAepC,OAAf,CAAwBgI,CAAAA,mBAAlD,CAFJ;CAGErK,GAAIsK,CAAAA,aAAJ,CAAkBzB,WAAlB,CAA+BkB,YAAUQ,CAAAA,0BAAzC,CAAqExJ,IAAKyJ,CAAAA,GAAL,CAASnI,OAAQ+H,CAAAA,UAAjB,CAA6BhK,YAAaqK,CAAAA,gBAAb,EAA7B,CAArE,CAEA,CAAAtK,UAAWsE,CAAAA,GAAX,CAAepC,OAAf,CAAwBgI,CAAAA,mBAAxB,CAA8ChI,OAAQ+H,CAAAA,UALxD,CANF,CAnCgE,CAmDlEM,QAASA,YAAW,CAAC9E,iBAAD,CAAoBvD,OAApB,CAA6B,CAC/C,IAAIsI,YAAc,CAAA,CAEoBnJ,KAAAA,EAAtC,GAAIoE,iBAAkBC,CAAAA,WAAtB,GACED,iBAAkBC,CAAAA,WAClB,CADgC,CAAA,CAChC,CAAAxD,OAAQuI,CAAAA,gBAAR,CAAyB,SAAzB,CAAoCpF,gBAApC,CAFF,CAMA,KAAMM,OAASzD,OAAQyD,CAAAA,MAEvB,KAAIC,cAAgBC,QAASvB,CAAAA,GAAT,CAAaqB,MAAb,CAEEtE,KAAAA,EAAtB,GAAIuE,aAAJ,GACEA,aAEA,CAFgB,EAEhB,CAAAC,QAASkC,CAAAA,GAAT,CAAapC,MAAb;AAAqBC,aAArB,CAHF,CAtJM8E,OAAAA,CAAQ,EACdA,OAAMC,CAAAA,IAAN,CA4J2CzI,OA5JxB4G,CAAAA,KAAnB,CACA4B,OAAMC,CAAAA,IAAN,CA2J2CzI,OA3JxB8G,CAAAA,KAAnB,CACA0B,OAAMC,CAAAA,IAAN,CA0J2CzI,OA1JxBkH,CAAAA,KAAnB,EAA4B,CAA5B,CACAsB,OAAMC,CAAAA,IAAN,CAyJ2CzI,OAzJxBqH,CAAAA,SAAnB,CACAmB,OAAMC,CAAAA,IAAN,CAwJ2CzI,OAxJxBG,CAAAA,SAAnB,CACAqI,OAAMC,CAAAA,IAAN,CAuJ2CzI,OAvJxB+H,CAAAA,UAAnB,CACAS,OAAMC,CAAAA,IAAN,CAsJ2CzI,OAtJxBc,CAAAA,cAAnB,CACA0H,OAAMC,CAAAA,IAAN,CAqJ2CzI,OArJxB0I,CAAAA,MAAnB,CACAF,OAAMC,CAAAA,IAAN,CAoJ2CzI,OApJxB4H,CAAAA,IAAnB,CACAY,OAAMC,CAAAA,IAAN,CAmJ2CzI,OAnJxBE,CAAAA,eAAnB,CACAsI,OAAMC,CAAAA,IAAN,CAkJ2CzI,OAlJxB2I,CAAAA,gBAAnB,CACAH,OAAMC,CAAAA,IAAN,CAiJ2CzI,OAjJxB4I,CAAAA,KAAnB,CACAJ,OAAMC,CAAAA,IAAN,CAgJ2CzI,OAhJxB6I,CAAAA,eAAnB,CACAL,OAAMC,CAAAA,IAAN,CA+I2CzI,OA/IxBW,CAAAA,QAAnB,CACA,OAAA,CAAO6H,MAAMM,CAAAA,IAAN,EAgJP,IAFwBC,MAExB,GAAwBxF,iBAAkBM,CAAAA,UAA1C,CAAsD,CAEb1E,IAAAA,EAAvC;AAAIuE,aAAA,CAJkBqF,MAIlB,CAAJ,GAEErF,aAAA,CANoBqF,MAMpB,CAOA,CAPiC,CAC/B/I,QAASrC,GAAIqL,CAAAA,aAAJ,EADsB,CAE/BlF,UAAW,CAFoB,CAOjC,CAHA7F,IAAKwG,CAAAA,MAAOC,CAAAA,QAAZ,EAGA,CAAA4D,WAAA,CAAc,CAAA,CAThB,CAYA5E,cAAA,CAhBsBqF,MAgBtB,CAA+BjF,CAAAA,SAA/B,EAGA,OAAMF,aAAeF,aAAA,CAAcH,iBAAkBM,CAAAA,UAAhC,CAEA1E,KAAAA,EAArB,GAAIyE,YAAJ,GACEF,aAAA,CAAcH,iBAAkBM,CAAAA,UAAhC,CAA4CC,CAAAA,SAA5C,EAEA,CAA+B,CAA/B,GAAIF,YAAaE,CAAAA,SAAjB,EACEC,aAAA,CAAc/D,OAAd,CAJJ,CASAuD,kBAAkBM,CAAAA,UAAlB,CA9BsBkF,MA+BtBxF,kBAAkBiB,CAAAA,cAAlB,CAAmCd,aAAA,CA/BbqF,MA+Ba,CAA+B/I,CAAAA,OA7Bd,CAgCtD,MAAOsI,YAtDwC,CAyDjDnC,QAASA,cAAa,CAAC5C,iBAAD;AAAoBvD,OAApB,CAA6B0F,IAA7B,CAAmC,CACvD,IAAIc,YAAc7I,GAAI0I,CAAAA,UACtB,IAAIrG,OAAQiJ,CAAAA,kBAAZ,EAAkCjJ,OAAQkJ,CAAAA,wBAA1C,CAAoE1C,WAAA,CAAc7I,GAAIqJ,CAAAA,gBAClFhH,QAAQmJ,CAAAA,eAAZ,GAA6B3C,WAA7B,CAA2C7I,GAAIoJ,CAAAA,UAA/C,CACA,KAAMuB,YAAcD,WAAA,CAAY9E,iBAAZ,CAA+BvD,OAA/B,CACpB,OAAMyD,OAASzD,OAAQyD,CAAAA,MACvB5F,MAAMuI,CAAAA,WAAN,CAAkBI,WAAlB,CAA+BjD,iBAAkBiB,CAAAA,cAAjD,CAAiE7G,GAAI2I,CAAAA,QAArE,CAAgFZ,IAAhF,CACA,OAAM0D,iBAAmBtL,UAAWsE,CAAAA,GAAX,CAAeqB,MAAf,CAEzB,IAAIA,MAAOuC,CAAAA,OAAX,GAAuBoD,gBAAiBnD,CAAAA,SAAxC,EAAqE,CAAA,CAArE,GAAqDqC,WAArD,CAA2E,CACzEzK,KAAMwL,CAAAA,aAAN,CAAoB1L,GAAI2I,CAAAA,QAAxB;AAAmCZ,IAAnC,CAEA/H,IAAI2L,CAAAA,WAAJ,CAAgB3L,GAAI4L,CAAAA,mBAApB,CAAyCvJ,OAAQ4I,CAAAA,KAAjD,CAEAjL,IAAI2L,CAAAA,WAAJ,CAAgB3L,GAAI6L,CAAAA,8BAApB,CAAoDxJ,OAAQ2I,CAAAA,gBAA5D,CAEAhL,IAAI2L,CAAAA,WAAJ,CAAgB3L,GAAI8L,CAAAA,gBAApB,CAAsCzJ,OAAQ6I,CAAAA,eAA9C,CAEAlL,IAAI2L,CAAAA,WAAJ,CAAgB3L,GAAI+L,CAAAA,kCAApB,CAAwD/L,GAAIgM,CAAAA,IAA5D,CA7ZY,KAAA,CAAV9I,QAAJ,CAAqB,CAAA,CAArB,CA+ZiDb,OA9ZlC4G,CAAAA,KADf,GACyBxG,UAAWoH,CAAAA,mBADpC,EA+ZiDxH,OA9ZkB8G,CAAAA,KADnE,GAC6E1G,UAAWoH,CAAAA,mBADxF,EA+ZiDxH,OA9ZsEG,CAAAA,SADvH,GACqIC,UAAWC,CAAAA,aADhJ,EA+ZiDL,OA9ZwHG,CAAAA,SADzK,GACuLC,UAAWE,CAAAA,YA8Z1LlC,KAAAA,CAAkB,IAAlBA,EAAqF,CAAA,CAArFA,GAAqD0B,YAAA,CAAaE,OAAQ7B,CAAAA,KAArB,CAC3D;IAAIA,MAAQD,WAAA,CAAY8B,OAAQ7B,CAAAA,KAApB,CAA2BC,IAA3B,CAA4C,CAAA,CAA5C,CAAmDwL,cAAnD,CACZzL,MAAA,CAAQ0L,gBAAA,CAAiB7J,OAAjB,CAA0B7B,KAA1B,CACF8B,KAAAA,CAAeH,YAAA,CAAa3B,KAAb,CAAf8B,EAAsCY,QAA5C,OACMJ,SAAWzC,KAAM8L,CAAAA,OAAN,CAAc9J,OAAQ0I,CAAAA,MAAtB,CAA8B1I,OAAQW,CAAAA,QAAtC,CAfwD,KAgBrED,OAAS1C,KAAM8L,CAAAA,OAAN,CAAc9J,OAAQ4H,CAAAA,IAAtB,CAhB4D,CAiBrEmC,iBAAmBxJ,iBAAA,CAAkBP,OAAQc,CAAAA,cAA1B,CAA0CL,QAA1C,CAAoDC,MAApD,CAA4DV,OAAQW,CAAAA,QAApE,CAA8EX,OAAQmE,CAAAA,cAAtF,CACvBoC,qBAAA,CAAqBC,WAArB,CAAkCxG,OAAlC,CAA2CC,IAA3C,CAEA,KAAMuC,QAAUxC,OAAQwC,CAAAA,OAAxB,CACMwH,cAAgBnJ,QAAhBmJ,EAAuD,CAAA,CAAvDA,GAA4BhK,OAAQmE,CAAAA,cAC1C,OAAM8F,eAAgD9K,IAAAA,EAAhD8K;AAAiBb,gBAAiBnD,CAAAA,SAAlCgE,EAA6E,CAAA,CAA7EA,GAA6D3B,WAC7D4B,YAAAA,CAAS7H,YAAA,CAAarC,OAAb,CAAsB7B,KAAtB,CAA6B8B,IAA7B,CAEf,IAAID,OAAQmK,CAAAA,cAAZ,CAEEJ,gBA6CA,CA7CmBpM,GAAIyM,CAAAA,eA6CvB,CA3CIvJ,QAAJ,CAEIkJ,gBAFJ,CACM/J,OAAQ4H,CAAAA,IAAZ,GAAqBxH,UAAWyH,CAAAA,SAAhC,CACqBlK,GAAI0M,CAAAA,kBADzB,CAEWrK,OAAQ4H,CAAAA,IAAZ,GAAqBxH,UAAWkK,CAAAA,eAAhC,CACc3M,GAAI4M,CAAAA,iBADlB,CAEIvK,OAAQ4H,CAAAA,IAAZ,GAAqBxH,UAAWoK,CAAAA,kBAAhC,CACc7M,GAAI8M,CAAAA,gBADlB,CAGc9M,GAAI+M,CAAAA,iBAR3B,CAWM1K,OAAQ4H,CAAAA,IAXd,GAWuBxH,UAAWyH,CAAAA,SAXlC,EAYIjI,OAAQ+K,CAAAA,KAAR,CAAc,8DAAd,CA+BJ;AA1BI3K,OAAQ0I,CAAAA,MA0BZ,GA1BuBtI,UAAWwK,CAAAA,WA0BlC,EA1BiDb,gBA0BjD,GA1BsEpM,GAAIyM,CAAAA,eA0B1E,EAtBMpK,OAAQ4H,CAAAA,IAsBd,GAtBuBxH,UAAWyK,CAAAA,iBAsBlC,EAtBuD7K,OAAQ4H,CAAAA,IAsB/D,GAtBwExH,UAAWkK,CAAAA,eAsBnF,GArBI1K,OAAQC,CAAAA,IAAR,CAAa,6FAAb,CAEA,CADAG,OAAQ4H,CAAAA,IACR,CADexH,UAAWkK,CAAAA,eAC1B,CAAA5J,MAAA,CAAS1C,KAAM8L,CAAAA,OAAN,CAAc9J,OAAQ4H,CAAAA,IAAtB,CAmBb,EAfI5H,OAAQ0I,CAAAA,MAeZ,GAfuBtI,UAAW0K,CAAAA,kBAelC,EAfwDf,gBAexD,GAf6EpM,GAAIyM,CAAAA,eAejF,GAZEL,gBAIA,CAJmBpM,GAAIoN,CAAAA,aAIvB,CAAI/K,OAAQ4H,CAAAA,IAAZ,GAAqBxH,UAAWoK,CAAAA,kBAAhC;CACE5K,OAAQC,CAAAA,IAAR,CAAa,kFAAb,CAEA,CADAG,OAAQ4H,CAAAA,IACR,CADexH,UAAWoK,CAAAA,kBAC1B,CAAA9J,MAAA,CAAS1C,KAAM8L,CAAAA,OAAN,CAAc9J,OAAQ4H,CAAAA,IAAtB,CAHX,CAQF,EAAIqC,cAAJ,GACMD,aAAJ,CACEnM,KAAMmN,CAAAA,YAAN,CAAmBrN,GAAI0I,CAAAA,UAAvB,CAAmC,CAAnC,CAAsC0D,gBAAtC,CAAwD5L,KAAMK,CAAAA,KAA9D,CAAqEL,KAAMM,CAAAA,MAA3E,CADF,CAGEZ,KAAMoN,CAAAA,UAAN,CAAiBtN,GAAI0I,CAAAA,UAArB,CAAiC,CAAjC,CAAoC0D,gBAApC,CAAsD5L,KAAMK,CAAAA,KAA5D,CAAmEL,KAAMM,CAAAA,MAAzE,CAAiF,CAAjF,CAAoFgC,QAApF,CAA8FC,MAA9F,CAAsG,IAAtG,CAJJ,CA/CF,KAsDO,IAAIV,OAAQkL,CAAAA,aAAZ,CAIL,GAAqB,CAArB,CAAI1I,OAAQC,CAAAA,MAAZ,EAA0BxC,IAA1B,CAAwC,CAClC+J,aAAJ,EAAqBC,cAArB,EACEpM,KAAMmN,CAAAA,YAAN,CAAmBrN,GAAI0I,CAAAA,UAAvB;AAAmC6D,WAAnC,CAA2CH,gBAA3C,CAA6DvH,OAAA,CAAQ,CAAR,CAAWhE,CAAAA,KAAxE,CAA+EgE,OAAA,CAAQ,CAAR,CAAW/D,CAAAA,MAA1F,CAGF,KAAK,IAAIqG,EAAI,CAAR,CAAWS,GAAK/C,OAAQC,CAAAA,MAA7B,CAAqCqC,CAArC,CAAyCS,EAAzC,CAA6CT,CAAA,EAA7C,CACEqG,WAEA,CAFS3I,OAAA,CAAQsC,CAAR,CAET,CAAIkF,aAAJ,CACEnM,KAAMuN,CAAAA,aAAN,CAAoBzN,GAAI0I,CAAAA,UAAxB,CAAoCvB,CAApC,CAAuC,CAAvC,CAA0C,CAA1C,CAA6CqG,WAAO3M,CAAAA,KAApD,CAA2D2M,WAAO1M,CAAAA,MAAlE,CAA0EgC,QAA1E,CAAoFC,MAApF,CAA4FyK,WAAOE,CAAAA,IAAnG,CADF,CAGExN,KAAMoN,CAAAA,UAAN,CAAiBtN,GAAI0I,CAAAA,UAArB,CAAiCvB,CAAjC,CAAoCiF,gBAApC,CAAsDoB,WAAO3M,CAAAA,KAA7D,CAAoE2M,WAAO1M,CAAAA,MAA3E,CAAmF,CAAnF,CAAsFgC,QAAtF,CAAgGC,MAAhG,CAAwGyK,WAAOE,CAAAA,IAA/G,CAIJrL,QAAQE,CAAAA,eAAR,CAA0B,CAAA,CAfY,CAAxC,IAiBM8J,cAAJ,EACMC,cAIJ,EAHEpM,KAAMmN,CAAAA,YAAN,CAAmBrN,GAAI0I,CAAAA,UAAvB,CAAmC6D,WAAnC,CAA2CH,gBAA3C;AAA6D5L,KAAMK,CAAAA,KAAnE,CAA0EL,KAAMM,CAAAA,MAAhF,CAGF,CAAAZ,KAAMuN,CAAAA,aAAN,CAAoBzN,GAAI0I,CAAAA,UAAxB,CAAoC,CAApC,CAAuC,CAAvC,CAA0C,CAA1C,CAA6ClI,KAAMK,CAAAA,KAAnD,CAA0DL,KAAMM,CAAAA,MAAhE,CAAwEgC,QAAxE,CAAkFC,MAAlF,CAA0FvC,KAAMkN,CAAAA,IAAhG,CALF,EAOExN,KAAMoN,CAAAA,UAAN,CAAiBtN,GAAI0I,CAAAA,UAArB,CAAiC,CAAjC,CAAoC0D,gBAApC,CAAsD5L,KAAMK,CAAAA,KAA5D,CAAmEL,KAAMM,CAAAA,MAAzE,CAAiF,CAAjF,CAAoFgC,QAApF,CAA8FC,MAA9F,CAAsGvC,KAAMkN,CAAAA,IAA5G,CA5BC,KA+BA,IAAIrL,OAAQ0C,CAAAA,mBAAZ,CACL,GAAI1C,OAAQkJ,CAAAA,wBAAZ,CAAsC,CAChCc,aAAJ,EAAqBC,cAArB,EACEpM,KAAMyN,CAAAA,YAAN,CAAmB3N,GAAIqJ,CAAAA,gBAAvB,CAAyCkD,WAAzC,CAAiDH,gBAAjD,CAAmEvH,OAAA,CAAQ,CAAR,CAAWhE,CAAAA,KAA9E,CAAqFgE,OAAA,CAAQ,CAAR,CAAW/D,CAAAA,MAAhG,CAAwGN,KAAMoN,CAAAA,KAA9G,CAGF,KAAK,IAAIzG,EAAI,CAAR,CAAWS,GAAK/C,OAAQC,CAAAA,MAA7B,CAAqCqC,CAArC,CAAyCS,EAAzC,CAA6CT,CAAA,EAA7C,CACEqG,WAEA,CAFS3I,OAAA,CAAQsC,CAAR,CAET;AAAI9E,OAAQ0I,CAAAA,MAAZ,GAAuBtI,UAAWoL,CAAAA,UAAlC,CACmB,IAAjB,GAAI/K,QAAJ,CACMuJ,aAAJ,CACEnM,KAAM4N,CAAAA,uBAAN,CAA8B9N,GAAIqJ,CAAAA,gBAAlC,CAAoDlC,CAApD,CAAuD,CAAvD,CAA0D,CAA1D,CAA6D,CAA7D,CAAgEqG,WAAO3M,CAAAA,KAAvE,CAA8E2M,WAAO1M,CAAAA,MAArF,CAA6FN,KAAMoN,CAAAA,KAAnG,CAA0G9K,QAA1G,CAAoH0K,WAAOE,CAAAA,IAA3H,CAAiI,CAAjI,CAAoI,CAApI,CADF,CAGExN,KAAM6N,CAAAA,oBAAN,CAA2B/N,GAAIqJ,CAAAA,gBAA/B,CAAiDlC,CAAjD,CAAoDiF,gBAApD,CAAsEoB,WAAO3M,CAAAA,KAA7E,CAAoF2M,WAAO1M,CAAAA,MAA3F,CAAmGN,KAAMoN,CAAAA,KAAzG,CAAgH,CAAhH,CAAmHJ,WAAOE,CAAAA,IAA1H,CAAgI,CAAhI,CAAmI,CAAnI,CAJJ,CAOEzL,OAAQC,CAAAA,IAAR,CAAa,gGAAb,CARJ,CAWMmK,aAAJ,CACEnM,KAAM8N,CAAAA,aAAN,CAAoBhO,GAAIqJ,CAAAA,gBAAxB;AAA0ClC,CAA1C,CAA6C,CAA7C,CAAgD,CAAhD,CAAmD,CAAnD,CAAsDqG,WAAO3M,CAAAA,KAA7D,CAAoE2M,WAAO1M,CAAAA,MAA3E,CAAmFN,KAAMoN,CAAAA,KAAzF,CAAgG9K,QAAhG,CAA0GC,MAA1G,CAAkHyK,WAAOE,CAAAA,IAAzH,CADF,CAGExN,KAAM+N,CAAAA,UAAN,CAAiBjO,GAAIqJ,CAAAA,gBAArB,CAAuClC,CAAvC,CAA0CiF,gBAA1C,CAA4DoB,WAAO3M,CAAAA,KAAnE,CAA0E2M,WAAO1M,CAAAA,MAAjF,CAAyFN,KAAMoN,CAAAA,KAA/F,CAAsG,CAAtG,CAAyG9K,QAAzG,CAAmHC,MAAnH,CAA2HyK,WAAOE,CAAAA,IAAlI,CAtB8B,CAAtC,IA0BO,CACDrB,aAAJ,EAAqBC,cAArB,EACEpM,KAAMmN,CAAAA,YAAN,CAAmBrN,GAAI0I,CAAAA,UAAvB,CAAmC6D,WAAnC,CAA2CH,gBAA3C,CAA6DvH,OAAA,CAAQ,CAAR,CAAWhE,CAAAA,KAAxE,CAA+EgE,OAAA,CAAQ,CAAR,CAAW/D,CAAAA,MAA1F,CAGF,KAAK,IAAIqG,EAAI,CAAR,CAAWS,GAAK/C,OAAQC,CAAAA,MAA7B,CAAqCqC,CAArC,CAAyCS,EAAzC,CAA6CT,CAAA,EAA7C,CACEqG,WAEA,CAFS3I,OAAA,CAAQsC,CAAR,CAET,CAAI9E,OAAQ0I,CAAAA,MAAZ,GAAuBtI,UAAWoL,CAAAA,UAAlC,CACmB,IAAjB,GAAI/K,QAAJ,CACMuJ,aAAJ,CACEnM,KAAMgO,CAAAA,uBAAN,CAA8BlO,GAAI0I,CAAAA,UAAlC;AAA8CvB,CAA9C,CAAiD,CAAjD,CAAoD,CAApD,CAAuDqG,WAAO3M,CAAAA,KAA9D,CAAqE2M,WAAO1M,CAAAA,MAA5E,CAAoFgC,QAApF,CAA8F0K,WAAOE,CAAAA,IAArG,CADF,CAGExN,KAAMiO,CAAAA,oBAAN,CAA2BnO,GAAI0I,CAAAA,UAA/B,CAA2CvB,CAA3C,CAA8CiF,gBAA9C,CAAgEoB,WAAO3M,CAAAA,KAAvE,CAA8E2M,WAAO1M,CAAAA,MAArF,CAA6F,CAA7F,CAAgG0M,WAAOE,CAAAA,IAAvG,CAJJ,CAOEzL,OAAQC,CAAAA,IAAR,CAAa,gGAAb,CARJ,CAWMmK,aAAJ,CACEnM,KAAMuN,CAAAA,aAAN,CAAoBzN,GAAI0I,CAAAA,UAAxB,CAAoCvB,CAApC,CAAuC,CAAvC,CAA0C,CAA1C,CAA6CqG,WAAO3M,CAAAA,KAApD,CAA2D2M,WAAO1M,CAAAA,MAAlE,CAA0EgC,QAA1E,CAAoFC,MAApF,CAA4FyK,WAAOE,CAAAA,IAAnG,CADF,CAGExN,KAAMoN,CAAAA,UAAN,CAAiBtN,GAAI0I,CAAAA,UAArB,CAAiCvB,CAAjC,CAAoCiF,gBAApC,CAAsDoB,WAAO3M,CAAAA,KAA7D,CAAoE2M,WAAO1M,CAAAA,MAA3E;AAAmF,CAAnF,CAAsFgC,QAAtF,CAAgGC,MAAhG,CAAwGyK,WAAOE,CAAAA,IAA/G,CAtBD,CA3BF,IAsDA,IAAIrL,OAAQiJ,CAAAA,kBAAZ,CACDe,aAAJ,EACMC,cAIJ,EAHEpM,KAAMyN,CAAAA,YAAN,CAAmB3N,GAAIqJ,CAAAA,gBAAvB,CAAyCkD,WAAzC,CAAiDH,gBAAjD,CAAmE5L,KAAMK,CAAAA,KAAzE,CAAgFL,KAAMM,CAAAA,MAAtF,CAA8FN,KAAMoN,CAAAA,KAApG,CAGF,CAAA1N,KAAM8N,CAAAA,aAAN,CAAoBhO,GAAIqJ,CAAAA,gBAAxB,CAA0C,CAA1C,CAA6C,CAA7C,CAAgD,CAAhD,CAAmD,CAAnD,CAAsD7I,KAAMK,CAAAA,KAA5D,CAAmEL,KAAMM,CAAAA,MAAzE,CAAiFN,KAAMoN,CAAAA,KAAvF,CAA8F9K,QAA9F,CAAwGC,MAAxG,CAAgHvC,KAAMkN,CAAAA,IAAtH,CALF,EAOExN,KAAM+N,CAAAA,UAAN,CAAiBjO,GAAIqJ,CAAAA,gBAArB,CAAuC,CAAvC,CAA0C+C,gBAA1C,CAA4D5L,KAAMK,CAAAA,KAAlE,CAAyEL,KAAMM,CAAAA,MAA/E,CAAuFN,KAAMoN,CAAAA,KAA7F,CAAoG,CAApG,CAAuG9K,QAAvG,CAAiHC,MAAjH,CAAyHvC,KAAMkN,CAAAA,IAA/H,CARG,KAUA,IAAIrL,OAAQmJ,CAAAA,eAAZ,CACDa,aAAJ,EACMC,cAIJ;AAHEpM,KAAMyN,CAAAA,YAAN,CAAmB3N,GAAIoJ,CAAAA,UAAvB,CAAmCmD,WAAnC,CAA2CH,gBAA3C,CAA6D5L,KAAMK,CAAAA,KAAnE,CAA0EL,KAAMM,CAAAA,MAAhF,CAAwFN,KAAMoN,CAAAA,KAA9F,CAGF,CAAA1N,KAAM8N,CAAAA,aAAN,CAAoBhO,GAAIoJ,CAAAA,UAAxB,CAAoC,CAApC,CAAuC,CAAvC,CAA0C,CAA1C,CAA6C,CAA7C,CAAgD5I,KAAMK,CAAAA,KAAtD,CAA6DL,KAAMM,CAAAA,MAAnE,CAA2EN,KAAMoN,CAAAA,KAAjF,CAAwF9K,QAAxF,CAAkGC,MAAlG,CAA0GvC,KAAMkN,CAAAA,IAAhH,CALF,EAOExN,KAAM+N,CAAAA,UAAN,CAAiBjO,GAAIoJ,CAAAA,UAArB,CAAiC,CAAjC,CAAoCgD,gBAApC,CAAsD5L,KAAMK,CAAAA,KAA5D,CAAmEL,KAAMM,CAAAA,MAAzE,CAAiFN,KAAMoN,CAAAA,KAAvF,CAA8F,CAA9F,CAAiG9K,QAAjG,CAA2GC,MAA3G,CAAmHvC,KAAMkN,CAAAA,IAAzH,CARG,KAUA,IAAIrL,OAAQsC,CAAAA,oBAAZ,CACL,IAAI2H,cAAJ,CACE,GAAID,aAAJ,CACEnM,KAAMmN,CAAAA,YAAN,CAAmBrN,GAAI0I,CAAAA,UAAvB,CAAmC6D,WAAnC,CAA2CH,gBAA3C,CAA6D5L,KAAMK,CAAAA,KAAnE,CAA0EL,KAAMM,CAAAA,MAAhF,CADF,KAME,KAHID,OAGKsG;AAHG3G,KAAMK,CAAAA,KAGTsG,CAFLrG,KAEKqG,CAFI3G,KAAMM,CAAAA,MAEVqG,CAAAA,aAAAA,CAAI,CAAb,CAAgBA,aAAhB,CAAoBoF,WAApB,CAA4BpF,aAAA,EAA5B,CACEjH,KAAMoN,CAAAA,UAAN,CAAiBtN,GAAI0I,CAAAA,UAArB,CAAiCvB,aAAjC,CAAoCiF,gBAApC,CAAsDvL,OAAtD,CAA6DC,KAA7D,CAAqE,CAArE,CAAwEgC,QAAxE,CAAkFC,MAAlF,CAA0F,IAA1F,CAEA,CADAlC,OACA,GADU,CACV,CAAAC,KAAA,GAAW,CAVjB,CADK,IAoBL,IAAqB,CAArB,CAAI+D,OAAQC,CAAAA,MAAZ,EAA0BxC,IAA1B,CAAwC,CAClC+J,aAAJ,EAAqBC,cAArB,EACEpM,KAAMmN,CAAAA,YAAN,CAAmBrN,GAAI0I,CAAAA,UAAvB,CAAmC6D,WAAnC,CAA2CH,gBAA3C,CAA6DvH,OAAA,CAAQ,CAAR,CAAWhE,CAAAA,KAAxE,CAA+EgE,OAAA,CAAQ,CAAR,CAAW/D,CAAAA,MAA1F,CAGF,KAAK,IAAIqG,EAAI,CAAR,CAAWS,GAAK/C,OAAQC,CAAAA,MAA7B,CAAqCqC,CAArC,CAAyCS,EAAzC,CAA6CT,CAAA,EAA7C,CACEqG,WAEA,CAFS3I,OAAA,CAAQsC,CAAR,CAET,CAAIkF,aAAJ,CACEnM,KAAMuN,CAAAA,aAAN,CAAoBzN,GAAI0I,CAAAA,UAAxB,CAAoCvB,CAApC,CAAuC,CAAvC,CAA0C,CAA1C,CAA6CrE,QAA7C,CAAuDC,MAAvD;AAA+DyK,WAA/D,CADF,CAGEtN,KAAMoN,CAAAA,UAAN,CAAiBtN,GAAI0I,CAAAA,UAArB,CAAiCvB,CAAjC,CAAoCiF,gBAApC,CAAsDtJ,QAAtD,CAAgEC,MAAhE,CAAwEyK,WAAxE,CAIJnL,QAAQE,CAAAA,eAAR,CAA0B,CAAA,CAfY,CAAxC,IAiBM8J,cAAJ,EACMC,cAIJ,EAHEpM,KAAMmN,CAAAA,YAAN,CAAmBrN,GAAI0I,CAAAA,UAAvB,CAAmC6D,WAAnC,CAA2CH,gBAA3C,CAA6D5L,KAAMK,CAAAA,KAAnE,CAA0EL,KAAMM,CAAAA,MAAhF,CAGF,CAAAZ,KAAMuN,CAAAA,aAAN,CAAoBzN,GAAI0I,CAAAA,UAAxB,CAAoC,CAApC,CAAuC,CAAvC,CAA0C,CAA1C,CAA6C5F,QAA7C,CAAuDC,MAAvD,CAA+DvC,KAA/D,CALF,EAOEN,KAAMoN,CAAAA,UAAN,CAAiBtN,GAAI0I,CAAAA,UAArB,CAAiC,CAAjC,CAAoC0D,gBAApC,CAAsDtJ,QAAtD,CAAgEC,MAAhE,CAAwEvC,KAAxE,CAKF4B,4BAAA,CAA4BC,OAA5B,CAAqCC,IAArC,CAAJ,EApnBFtC,GAAIoO,CAAAA,cAAJ,CAqnBmBvF,WArnBnB,CAwnBE4C,iBAAiBnD,CAAAA,SAAjB,CAA6BxC,MAAOuC,CAAAA,OACpC;GAAIhG,OAAQgM,CAAAA,QAAZ,CAAsBhM,OAAQgM,CAAAA,QAAR,CAAiBhM,OAAjB,CA9OmD,CAiP3EuD,iBAAkB0C,CAAAA,SAAlB,CAA8BjG,OAAQgG,CAAAA,OA1PiB,CAqYzDiG,QAASA,wBAAuB,CAACC,WAAD,CAAc5H,YAAd,CAA4BtE,OAA5B,CAAqCmM,UAArC,CAAiDC,aAAjD,CAAgE,CAC9F,MAAM3L,SAAWzC,KAAM8L,CAAAA,OAAN,CAAc9J,OAAQ0I,CAAAA,MAAtB,CAA8B1I,OAAQW,CAAAA,QAAtC,CAAjB,CACMD,OAAS1C,KAAM8L,CAAAA,OAAN,CAAc9J,OAAQ4H,CAAAA,IAAtB,CADf,CAEMmC,iBAAmBxJ,iBAAA,CAAkBP,OAAQc,CAAAA,cAA1B,CAA0CL,QAA1C,CAAoDC,MAApD,CAA4DV,OAAQW,CAAAA,QAApE,CACM7C,WAAWsE,CAAAA,GAAXmC,CAAeD,YAAfC,CAEH8H,CAAAA,qBAA5B,GACMD,aAAJ,GAAsBzO,GAAIoJ,CAAAA,UAA1B,EAAwCqF,aAAxC,GAA0DzO,GAAIqJ,CAAAA,gBAA9D,CACEnJ,KAAM+N,CAAAA,UAAN,CAAiBQ,aAAjB;AAAgC,CAAhC,CAAmCrC,gBAAnC,CAAqDzF,YAAa9F,CAAAA,KAAlE,CAAyE8F,YAAa7F,CAAAA,MAAtF,CAA8F6F,YAAaiH,CAAAA,KAA3G,CAAkH,CAAlH,CAAqH9K,QAArH,CAA+HC,MAA/H,CAAuI,IAAvI,CADF,CAGE7C,KAAMoN,CAAAA,UAAN,CAAiBmB,aAAjB,CAAgC,CAAhC,CAAmCrC,gBAAnC,CAAqDzF,YAAa9F,CAAAA,KAAlE,CAAyE8F,YAAa7F,CAAAA,MAAtF,CAA8F,CAA9F,CAAiGgC,QAAjG,CAA2GC,MAA3G,CAAmH,IAAnH,CAJJ,CAQA7C,MAAMyO,CAAAA,eAAN,CAAsB3O,GAAI4O,CAAAA,WAA1B,CAAuCL,WAAvC,CAEIM,mBAAA,CAAmBlI,YAAnB,CAAJ,CACEmI,kBAAmBC,CAAAA,kCAAnB,CAAsD/O,GAAI4O,CAAAA,WAA1D,CAAuEJ,UAAvE,CAAmFC,aAAnF,CAAkGtO,UAAWsE,CAAAA,GAAX,CAAepC,OAAf,CAAwBwE,CAAAA,cAA1H,CAA0I,CAA1I,CAA6ImI,sBAAA,CAAuBrI,YAAvB,CAA7I,CADF,EAEW8H,aAFX,GAE6BzO,GAAI0I,CAAAA,UAFjC;AAE+C+F,aAF/C,EAEgEzO,GAAIiP,CAAAA,2BAFpE,EAEmGR,aAFnG,EAEoHzO,GAAIkP,CAAAA,2BAFxH,GAIElP,GAAImP,CAAAA,oBAAJ,CAAyBnP,GAAI4O,CAAAA,WAA7B,CAA0CJ,UAA1C,CAAsDC,aAAtD,CAAqEtO,UAAWsE,CAAAA,GAAX,CAAepC,OAAf,CAAwBwE,CAAAA,cAA7F,CAA6G,CAA7G,CAGF3G,MAAMyO,CAAAA,eAAN,CAAsB3O,GAAI4O,CAAAA,WAA1B,CAAuC,IAAvC,CAvB8F,CA2BhGQ,QAASA,yBAAwB,CAACC,YAAD,CAAe1I,YAAf,CAA6B2I,aAA7B,CAA4C,CAC3EtP,GAAIuP,CAAAA,gBAAJ,CAAqBvP,GAAIwP,CAAAA,YAAzB,CAAuCH,YAAvC,CAEA,IAAI1I,YAAa8I,CAAAA,WAAjB,EAAgC,CAAC9I,YAAa+I,CAAAA,aAA9C,CAA6D,CAC3D,IAAItD,iBAAmBpM,GAAI+M,CAAAA,iBAEvBuC,cAAJ,EAAqBT,kBAAA,CAAmBlI,YAAnB,CAArB;CAaE,CAZMK,aAYN,CAZqBL,YAAaK,CAAAA,YAYlC,GAVoBA,aAAawF,CAAAA,cAUjC,GATMxF,aAAaiD,CAAAA,IAAjB,GAA0BxH,UAAWyH,CAAAA,SAArC,CACEkC,gBADF,CACqBpM,GAAI0M,CAAAA,kBADzB,CAEW1F,aAAaiD,CAAAA,IAFxB,GAEiCxH,UAAWkK,CAAAA,eAF5C,GAGEP,gBAHF,CAGqBpM,GAAI4M,CAAAA,iBAHzB,CASF,EAFM+C,aAEN,CAFgBX,sBAAA,CAAuBrI,YAAvB,CAEhB,CAAIkI,kBAAA,CAAmBlI,YAAnB,CAAJ,CACEmI,kBAAmBc,CAAAA,iCAAnB,CAAqD5P,GAAIwP,CAAAA,YAAzD,CAAuEG,aAAvE,CAAgFvD,gBAAhF,CAAkGzF,YAAa9F,CAAAA,KAA/G,CAAsH8F,YAAa7F,CAAAA,MAAnI,CADF,CAGEd,GAAI6P,CAAAA,8BAAJ,CAAmC7P,GAAIwP,CAAAA,YAAvC;AAAqDG,aAArD,CAA8DvD,gBAA9D,CAAgFzF,YAAa9F,CAAAA,KAA7F,CAAoG8F,YAAa7F,CAAAA,MAAjH,CAhBJ,EAmBEd,GAAI8P,CAAAA,mBAAJ,CAAwB9P,GAAIwP,CAAAA,YAA5B,CAA0CpD,gBAA1C,CAA4DzF,YAAa9F,CAAAA,KAAzE,CAAgF8F,YAAa7F,CAAAA,MAA7F,CAGFd,IAAI+P,CAAAA,uBAAJ,CAA4B/P,GAAI4O,CAAAA,WAAhC,CAA6C5O,GAAIgQ,CAAAA,gBAAjD,CAAmEhQ,GAAIwP,CAAAA,YAAvE,CAAqFH,YAArF,CAzB2D,CAA7D,IA0BO,IAAI1I,YAAa8I,CAAAA,WAAjB,EAAgC9I,YAAa+I,CAAAA,aAA7C,CACCC,gBAUN,CAVgBX,sBAAA,CAAuBrI,YAAvB,CAUhB,CARI2I,aAAJ,EAA0D,CAAA,CAA1D,GAAqBT,kBAAA,CAAmBlI,YAAnB,CAArB,CACE3G,GAAI6P,CAAAA,8BAAJ,CAAmC7P,GAAIwP,CAAAA,YAAvC,CAAqDG,gBAArD;AAA8D3P,GAAI8M,CAAAA,gBAAlE,CAAoFnG,YAAa9F,CAAAA,KAAjG,CAAwG8F,YAAa7F,CAAAA,MAArH,CADF,CAEW+N,kBAAA,CAAmBlI,YAAnB,CAAJ,CACLmI,kBAAmBc,CAAAA,iCAAnB,CAAqD5P,GAAIwP,CAAAA,YAAzD,CAAuEG,gBAAvE,CAAgF3P,GAAI8M,CAAAA,gBAApF,CAAsGnG,YAAa9F,CAAAA,KAAnH,CAA0H8F,YAAa7F,CAAAA,MAAvI,CADK,CAGLd,GAAI8P,CAAAA,mBAAJ,CAAwB9P,GAAIwP,CAAAA,YAA5B,CAA0CxP,GAAIoN,CAAAA,aAA9C,CAA6DzG,YAAa9F,CAAAA,KAA1E,CAAiF8F,YAAa7F,CAAAA,MAA9F,CAGF,CAAAd,GAAI+P,CAAAA,uBAAJ,CAA4B/P,GAAI4O,CAAAA,WAAhC,CAA6C5O,GAAIiQ,CAAAA,wBAAjD,CAA2EjQ,GAAIwP,CAAAA,YAA/E,CAA6FH,YAA7F,CAXK,KAeL,KAFMtI,YAEGI,CAFsD,CAAA,CAA9C,GAAAR,YAAagB,CAAAA,4BAAb;AAAqDhB,YAAatE,CAAAA,OAAlE,CAA4E,CAACsE,YAAatE,CAAAA,OAAd,CAEpF8E,CAAAA,gBAAAA,CAAI,CAAb,CAAgBA,gBAAhB,CAAoBJ,YAASjC,CAAAA,MAA7B,CAAqCqC,gBAAA,EAArC,CAA0C,CACxC,IAAM9E,QAAU0E,YAAA,CAASI,gBAAT,CAAhB,CACMrE,SAAWzC,KAAM8L,CAAAA,OAAN,CAAc9J,OAAQ0I,CAAAA,MAAtB,CAA8B1I,OAAQW,CAAAA,QAAtC,CACjB,OAAMD,OAAS1C,KAAM8L,CAAAA,OAAN,CAAc9J,OAAQ4H,CAAAA,IAAtB,CACTmC,QAAAA,CAAmBxJ,iBAAA,CAAkBP,OAAQc,CAAAA,cAA1B,CAA0CL,QAA1C,CAAoDC,MAApD,CAA4DV,OAAQW,CAAAA,QAApE,CACnB2M,SAAAA,CAAUX,sBAAA,CAAuBrI,YAAvB,CAEZ2I,cAAJ,EAA0D,CAAA,CAA1D,GAAqBT,kBAAA,CAAmBlI,YAAnB,CAArB,CACE3G,GAAI6P,CAAAA,8BAAJ,CAAmC7P,GAAIwP,CAAAA,YAAvC,CAAqDG,QAArD;AAA8DvD,OAA9D,CAAgFzF,YAAa9F,CAAAA,KAA7F,CAAoG8F,YAAa7F,CAAAA,MAAjH,CADF,CAEW+N,kBAAA,CAAmBlI,YAAnB,CAAJ,CACLmI,kBAAmBc,CAAAA,iCAAnB,CAAqD5P,GAAIwP,CAAAA,YAAzD,CAAuEG,QAAvE,CAAgFvD,OAAhF,CAAkGzF,YAAa9F,CAAAA,KAA/G,CAAsH8F,YAAa7F,CAAAA,MAAnI,CADK,CAGLd,GAAI8P,CAAAA,mBAAJ,CAAwB9P,GAAIwP,CAAAA,YAA5B,CAA0CpD,OAA1C,CAA4DzF,YAAa9F,CAAAA,KAAzE,CAAgF8F,YAAa7F,CAAAA,MAA7F,CAZsC,CAiB5Cd,GAAIuP,CAAAA,gBAAJ,CAAqBvP,GAAIwP,CAAAA,YAAzB,CAAuC,IAAvC,CA7D2E,CAyG7EU,QAASA,uBAAsB,CAACvJ,YAAD,CAAe,CAC5C,IAAMC,uBAAyBzG,UAAWsE,CAAAA,GAAX,CAAekC,YAAf,CAA/B,CACMwJ,OAAkD,CAAA,CAAlDA,GAASxJ,YAAaO,CAAAA,uBAE5B,IAAIP,YAAaK,CAAAA,YAAjB;AAAiC,CAACJ,sBAAuBwJ,CAAAA,yBAAzD,CAAoF,CAClF,GAAID,MAAJ,CAAY,KAAUE,MAAJ,CAAU,0DAAV,CAAN,CA3Cd,GA4C+D1J,YA5C/D,EA4C+DA,YA7CnBO,CAAAA,uBAC5C,CAAY,KAAUmJ,MAAJ,CAAU,yDAAV,CAAN,CACZnQ,KAAMyO,CAAAA,eAAN,CAAsB3O,GAAI4O,CAAAA,WAA1B,CA2CoBhI,sBAAuBS,CAAAA,kBA3C3C,CAEA,IAAmBL,CAyC4CL,YAzC5CK,CAAAA,YAAnB,EAA6DwF,CAyCE7F,YAzCfK,CAAAA,YAAawF,CAAAA,cAA7D,CACE,KAAU6D,MAAJ,CAAU,qEAAV,CAAN,CAIGlQ,UAAWsE,CAAAA,GAAX,CAoC0DkC,YApC9BK,CAAAA,YAA5B,CAA0CH,CAAAA,cAA/C;AAoC+DF,YApCeK,CAAAA,YAAaxG,CAAAA,KAAMK,CAAAA,KAAjG,GAoC+D8F,YApCyD9F,CAAAA,KAAxH,EAoC+D8F,YApC+EK,CAAAA,YAAaxG,CAAAA,KAAMM,CAAAA,MAAjK,GAoC+D6F,YApC0H7F,CAAAA,MAAzL,GAoC+D6F,YAnChDK,CAAAA,YAAaxG,CAAAA,KAAMK,CAAAA,KAEhC,CAiC6D8F,YAnCR9F,CAAAA,KAErD,CAiC6D8F,YAlChDK,CAAAA,YAAaxG,CAAAA,KAAMM,CAAAA,MAChC,CAiC6D6F,YAlCP7F,CAAAA,MACtD,CAiC6D6F,YAjChDK,CAAAA,YAAasJ,CAAAA,WAA1B,CAAwC,CAAA,CAH1C,CAMAxI,aAAA,CA8B+DnB,YA9BrCK,CAAAA,YAA1B,CAAwC,CAAxC,CAEMuJ,uBAAAA,CAAoBpQ,UAAWsE,CAAAA,GAAX,CA4BqCkC,YA5BTK,CAAAA,YAA5B,CAA0CH,CAAAA,cAE9D8I,OAAAA,CAAUX,sBAAA,CA0B+CrI,YA1B/C,CAEhB,IAwB+DA,YAxB9CK,CAAAA,YAAa+D,CAAAA,MAA9B,GAAyCtI,UAAWwK,CAAAA,WAApD,CACM4B,kBAAA,CAuByDlI,YAvBzD,CAAJ;AACEmI,kBAAmBC,CAAAA,kCAAnB,CAAsD/O,GAAI4O,CAAAA,WAA1D,CAAuE5O,GAAIgQ,CAAAA,gBAA3E,CAA6FhQ,GAAI0I,CAAAA,UAAjG,CAA6G6H,sBAA7G,CAAgI,CAAhI,CAAmIZ,MAAnI,CADF,CAGE3P,GAAImP,CAAAA,oBAAJ,CAAyBnP,GAAI4O,CAAAA,WAA7B,CAA0C5O,GAAIgQ,CAAAA,gBAA9C,CAAgEhQ,GAAI0I,CAAAA,UAApE,CAAgF6H,sBAAhF,CAAmG,CAAnG,CAJJ,KAMO,IAkBwD5J,YAlBvCK,CAAAA,YAAa+D,CAAAA,MAA9B,GAAyCtI,UAAW0K,CAAAA,kBAApD,CACD0B,kBAAA,CAiByDlI,YAjBzD,CAAJ,CACEmI,kBAAmBC,CAAAA,kCAAnB,CAAsD/O,GAAI4O,CAAAA,WAA1D,CAAuE5O,GAAIiQ,CAAAA,wBAA3E,CAAqGjQ,GAAI0I,CAAAA,UAAzG,CAAqH6H,sBAArH,CAAwI,CAAxI,CAA2IZ,MAA3I,CADF,CAGE3P,GAAImP,CAAAA,oBAAJ,CAAyBnP,GAAI4O,CAAAA,WAA7B;AAA0C5O,GAAIiQ,CAAAA,wBAA9C,CAAwEjQ,GAAI0I,CAAAA,UAA5E,CAAwF6H,sBAAxF,CAA2G,CAA3G,CAJG,KAOL,MAAUF,MAAJ,CAAU,6BAAV,CAAN,CASkF,CAApF,IAIE,IAAIF,MAAJ,CAGE,IAFAvJ,sBAAuBU,CAAAA,kBAEdH,CAFmC,EAEnCA,CAAAA,MAAAA,CAAI,CAAb,CAAoB,CAApB,CAAgBA,MAAhB,CAAuBA,MAAA,EAAvB,CACEjH,KAAMyO,CAAAA,eAAN,CAAsB3O,GAAI4O,CAAAA,WAA1B,CAAuChI,sBAAuBS,CAAAA,kBAAvB,CAA0CF,MAA1C,CAAvC,CAEA,CADAP,sBAAuBU,CAAAA,kBAAvB,CAA0CH,MAA1C,CACA,CAD+CnH,GAAIwQ,CAAAA,kBAAJ,EAC/C,CAAApB,wBAAA,CAAyBxI,sBAAuBU,CAAAA,kBAAvB,CAA0CH,MAA1C,CAAzB,CAAuER,YAAvE,CAAqF,CAAA,CAArF,CANJ,KASEzG,MAAMyO,CAAAA,eAAN,CAAsB3O,GAAI4O,CAAAA,WAA1B;AAAuChI,sBAAuBS,CAAAA,kBAA9D,CAEA,CADAT,sBAAuBU,CAAAA,kBACvB,CAD4CtH,GAAIwQ,CAAAA,kBAAJ,EAC5C,CAAApB,wBAAA,CAAyBxI,sBAAuBU,CAAAA,kBAAhD,CAAoEX,YAApE,CAAkF,CAAA,CAAlF,CAIJzG,MAAMyO,CAAAA,eAAN,CAAsB3O,GAAI4O,CAAAA,WAA1B,CAAuC,IAAvC,CAvB4C,CAuR9CI,QAASA,uBAAsB,CAACrI,YAAD,CAAe,CAC5C,MAAO5F,KAAKyJ,CAAAA,GAAL,CAASiG,UAAT,CAAqB9J,YAAagJ,CAAAA,OAAlC,CADqC,CAI9Cd,QAASA,mBAAkB,CAAClI,YAAD,CAAe,CACxC,MAAMC,uBAAyBzG,UAAWsE,CAAAA,GAAX,CAAekC,YAAf,CAC/B,OAAOzD,SAAP,EAA0C,CAA1C,CAAmByD,YAAagJ,CAAAA,OAAhC,EAA0G,CAAA,CAA1G,GAA+C1P,UAAW6J,CAAAA,GAAX,CAAe,sCAAf,CAA/C;AAAkK,CAAA,CAAlK,GAAkHlD,sBAAuB8J,CAAAA,oBAFjG,CAe1CxE,QAASA,iBAAgB,CAAC7J,OAAD,CAAU7B,KAAV,CAAiB,CACxC,MAAMwC,SAAWX,OAAQW,CAAAA,QAAzB,CACM+H,OAAS1I,OAAQ0I,CAAAA,MADvB,CAEMd,KAAO5H,OAAQ4H,CAAAA,IACrB,IAAoC,CAAA,CAApC,GAAI5H,OAAQ0C,CAAAA,mBAAZ,EAAuE,CAAA,CAAvE,GAA4C1C,OAAQmE,CAAAA,cAApD,EAA+EnE,OAAQ0I,CAAAA,MAAvF,GAAkGtI,UAAWkO,CAAAA,YAA7G,CAA2H,MAAOnQ,MAE9HwC,SAAJ,GAAiBP,UAAWmO,CAAAA,cAA5B,GAEM5N,QAAJ,GAAiBP,UAAWyB,CAAAA,YAA5B,CACmB,CAAA,CAAjB,GAAIhB,QAAJ,CAEqC,CAAA,CAAnC,GAAIjD,UAAW6J,CAAAA,GAAX,CAAe,UAAf,CAAJ,EAA2CiB,MAA3C,GAAsDtI,UAAWoL,CAAAA,UAAjE,EACExL,OAAQ0I,CAAAA,MAGR,CAHiBtI,UAAWkO,CAAAA,YAG5B,CADAtO,OAAQG,CAAAA,SACR,CADoBC,UAAWE,CAAAA,YAC/B;AAAAN,OAAQE,CAAAA,eAAR,CAA0B,CAAA,CAJ5B,EAOE/B,KAPF,CAOUqQ,WAAYC,CAAAA,UAAWC,CAAAA,YAAvB,CAAoCvQ,KAApC,CATZ,CAaMuK,MAbN,GAaiBtI,UAAWoL,CAAAA,UAb5B,EAa0C5D,IAb1C,GAamDxH,UAAWuO,CAAAA,gBAb9D,EAcI/O,OAAQC,CAAAA,IAAR,CAAa,yFAAb,CAfN,CAmBED,OAAQ+K,CAAAA,KAAR,CAAc,oDAAd,CAAoEhK,QAApE,CArBJ,CAyBA,OAAOxC,MA/BiC,CAtwC1C,MAAM0C,SAAW9C,YAAa8C,CAAAA,QAA9B,CACM+N,YAAc7Q,YAAa6Q,CAAAA,WADjC,CAEMC,eAAiB9Q,YAAa8Q,CAAAA,cAFpC,CAGMjF,eAAiB7L,YAAa6L,CAAAA,cAHpC,CAIMwE;AAAarQ,YAAaqQ,CAAAA,UAJhC,CAKM3B,mBAAqB7O,UAAW6J,CAAAA,GAAX,CAAe,sCAAf,CAAA,CAAyD7J,UAAWwE,CAAAA,GAAX,CAAe,sCAAf,CAAzD,CAAkH,IAL7I,CAMM0M,8BAAqD,WAArB,GAAA,MAAOC,UAAP,CAAmC,CAAA,CAAnC,CAA2C,gBAAiBC,CAAAA,IAAjB,CAAsBD,SAAUE,CAAAA,SAAhC,CANjF,CAQM7K,eAAiB,IAAIhH,OAE3B,KAAIgC,OAEJ,OAAMuE,SAAW,IAAIvG,OAMrB,KAAIiC,mBAAqB,CAAA,CAEzB,IAAI,CACFA,kBAAA,CAAgD,WAAhD,GAAqB,MAAOC,gBAA5B,EACkD,IADlD,GAC6BG,CAA1B,IAAIH,eAAJ,CAAoB,CAApB,CAAuB,CAAvB,CAA0BG,EAAAA,UAA1B,CAAqC,IAArC,CAFD,CAGF,MAAOyP,GAAP,CAAY,EAwOd,IAAIC,aAAe,CA0FnB,OAAMxI;AAAe,CACnB,CAACvG,UAAWgP,CAAAA,cAAZ,EAA6BzR,GAAI0R,CAAAA,MADd,CAEnB,CAACjP,UAAWoH,CAAAA,mBAAZ,EAAkC7J,GAAI4J,CAAAA,aAFnB,CAGnB,CAACnH,UAAWkP,CAAAA,sBAAZ,EAAqC3R,GAAI4R,CAAAA,eAHtB,CAArB,CAKMnI,WAAa,CACjB,CAAChH,UAAWC,CAAAA,aAAZ,EAA4B1C,GAAIsF,CAAAA,OADf,CAEjB,CAAC7C,UAAW2C,CAAAA,0BAAZ,EAAyCpF,GAAI6R,CAAAA,sBAF5B,CAGjB,CAACpP,UAAW4C,CAAAA,yBAAZ,EAAwCrF,GAAI8R,CAAAA,qBAH3B,CAIjB,CAACrP,UAAWE,CAAAA,YAAZ,EAA2B3C,GAAIuF,CAAAA,MAJd,CAKjB,CAAC9C,UAAWsP,CAAAA,yBAAZ,EAAwC/R,GAAIgS,CAAAA,qBAL3B,CAMjB,CAACvP,UAAWuH,CAAAA,wBAAZ,EAAuChK,GAAIiS,CAAAA,oBAN1B,CA28BnB,KAAKC,CAAAA,mBAAL;AApiCAA,QAA4B,EAAG,CAC7B,MAAMC,YAAcX,YAEhBW,YAAJ,EAAmBlB,WAAnB,EACEhP,OAAQC,CAAAA,IAAR,CAAa,qCAAb,CAAqDiQ,WAArD,CAAmE,8CAAnE,CAAoHlB,WAApH,CAGFO,aAAA,EAAgB,CAChB,OAAOW,YARsB,CAqiC/B,KAAKC,CAAAA,iBAAL,CAziCAA,QAA0B,EAAG,CAC3BZ,YAAA,CAAe,CADY,CA0iC7B,KAAK1J,CAAAA,YAAL,CAAoBA,YACpB,KAAKuK,CAAAA,iBAAL,CAp/BAA,QAA0B,CAAChQ,OAAD,CAAU0F,IAAV,CAAgB,CACxC,MAAMnC,kBAAoBzF,UAAWsE,CAAAA,GAAX,CAAepC,OAAf,CAEJ,EAAtB,CAAIA,OAAQgG,CAAAA,OAAZ,EAA2BzC,iBAAkB0C,CAAAA,SAA7C,GAA2DjG,OAAQgG,CAAAA,OAAnE,CACEG,aAAA,CAAc5C,iBAAd,CAAiCvD,OAAjC;AAA0C0F,IAA1C,CADF,CAKA7H,KAAMuI,CAAAA,WAAN,CAAkBzI,GAAIqJ,CAAAA,gBAAtB,CAAwCzD,iBAAkBiB,CAAAA,cAA1D,CAA0E7G,GAAI2I,CAAAA,QAA9E,CAAyFZ,IAAzF,CARwC,CAq/B1C,KAAKuK,CAAAA,YAAL,CA1+BAA,QAAqB,CAACjQ,OAAD,CAAU0F,IAAV,CAAgB,CACnC,MAAMnC,kBAAoBzF,UAAWsE,CAAAA,GAAX,CAAepC,OAAf,CAEJ,EAAtB,CAAIA,OAAQgG,CAAAA,OAAZ,EAA2BzC,iBAAkB0C,CAAAA,SAA7C,GAA2DjG,OAAQgG,CAAAA,OAAnE,CACEG,aAAA,CAAc5C,iBAAd,CAAiCvD,OAAjC,CAA0C0F,IAA1C,CADF,CAKA7H,KAAMuI,CAAAA,WAAN,CAAkBzI,GAAIoJ,CAAAA,UAAtB,CAAkCxD,iBAAkBiB,CAAAA,cAApD,CAAoE7G,GAAI2I,CAAAA,QAAxE,CAAmFZ,IAAnF,CARmC,CA2+BrC,KAAKwK,CAAAA,cAAL,CAh+BAA,QAAuB,CAAClQ,OAAD,CAAU0F,IAAV,CAAgB,CACrC,MAAMnC,kBAAoBzF,UAAWsE,CAAAA,GAAX,CAAepC,OAAf,CAE1B,IAAsB,CAAtB,CAAIA,OAAQgG,CAAAA,OAAZ,EAA2BzC,iBAAkB0C,CAAAA,SAA7C;AAA2DjG,OAAQgG,CAAAA,OAAnE,CAgYA,IAA6B,CAA7B,GA/XuChG,OA+X3B7B,CAAAA,KAAMsE,CAAAA,MAAlB,CAAA,CACA,IAAM6F,YAAcD,WAAA,CAhYA9E,iBAgYA,CAhYmBvD,OAgYnB,CAApB,CACMyD,OAjYiCzD,OAiYhByD,CAAAA,MACvB5F,MAAMuI,CAAAA,WAAN,CAAkBzI,GAAIwS,CAAAA,gBAAtB,CAlYoB5M,iBAkYsCiB,CAAAA,cAA1D,CAA0E7G,GAAI2I,CAAAA,QAA9E,CAlYgDZ,IAkYhD,CACA,KAAM0D,iBAAmBtL,UAAWsE,CAAAA,GAAX,CAAeqB,MAAf,CAEzB,IAAIA,MAAOuC,CAAAA,OAAX,GAAuBoD,gBAAiBnD,CAAAA,SAAxC,EAAqE,CAAA,CAArE,GAAqDqC,WAArD,CAA2E,CACzEzK,KAAMwL,CAAAA,aAAN,CAAoB1L,GAAI2I,CAAAA,QAAxB,CAtY8CZ,IAsY9C,CAEA/H,IAAI2L,CAAAA,WAAJ,CAAgB3L,GAAI4L,CAAAA,mBAApB,CAxYqCvJ,OAwYY4I,CAAAA,KAAjD,CAEAjL,IAAI2L,CAAAA,WAAJ,CAAgB3L,GAAI6L,CAAAA,8BAApB,CA1YqCxJ,OA0YuB2I,CAAAA,gBAA5D,CAEAhL,IAAI2L,CAAAA,WAAJ,CAAgB3L,GAAI8L,CAAAA,gBAApB;AA5YqCzJ,OA4YS6I,CAAAA,eAA9C,CAEAlL,IAAI2L,CAAAA,WAAJ,CAAgB3L,GAAI+L,CAAAA,kCAApB,CAAwD/L,GAAIgM,CAAAA,IAA5D,CAEA,KAAMyG,aAhZ+BpQ,OAgZR0C,CAAAA,mBAAvB0N,EAhZ+BpQ,OAgZuB7B,CAAAA,KAAR,CAAc,CAAd,CAAiBuE,CAAAA,mBAArE,CACMwI,cAjZ+BlL,OAiZP7B,CAAAA,KAAR,CAAc,CAAd,CAAhB+M,EAjZ+BlL,OAiZa7B,CAAAA,KAAR,CAAc,CAAd,CAAiB+M,CAAAA,aACrDmF,KAAAA,CAAY,EAElB,KAAK,IAAIvL,EAAI,CAAb,CAAoB,CAApB,CAAgBA,CAAhB,CAAuBA,CAAA,EAAvB,CAIIuL,IAAA,CAAUvL,CAAV,CAGF,CANKsL,YAAL,EAAsBlF,aAAtB,CAGiBA,aAAA,CAxZkBlL,OAwZM7B,CAAAA,KAAR,CAAc2G,CAAd,CAAiB3G,CAAAA,KAAjC,CAxZkB6B,OAwZ+B7B,CAAAA,KAAR,CAAc2G,CAAd,CAH1D,CACiB5G,WAAA,CAtZkB8B,OAsZE7B,CAAAA,KAAR,CAAc2G,CAAd,CAAZ,CAA8B,CAAA,CAA9B,CAAqC,CAAA,CAArC,CAA2C+J,cAA3C,CAKjB,CAAAwB,IAAA,CAAUvL,CAAV,CAAA,CAAe+E,gBAAA,CA3ZoB7J,OA2ZpB,CAA0BqQ,IAAA,CAAUvL,CAAV,CAA1B,CAtBwD,KAyBnE3G,MAAQkS,IAAA,CAAU,CAAV,CACRpQ,EAAAA,CAAeH,YAAA,CAAa3B,KAAb,CAAf8B,EAAsCY,QA1B6B,OA2BnEJ;AAAWzC,KAAM8L,CAAAA,OAAN,CAhaoB9J,OAgaE0I,CAAAA,MAAtB,CAhaoB1I,OAgakBW,CAAAA,QAAtC,CA3BwD,CA4BnED,OAAS1C,KAAM8L,CAAAA,OAAN,CAjasB9J,OAiaA4H,CAAAA,IAAtB,CA5B0D,CA6BnEmC,iBAAmBxJ,iBAAA,CAlaYP,OAkacc,CAAAA,cAA1B,CAA0CL,QAA1C,CAAoDC,MAApD,CAlaYV,OAkawDW,CAAAA,QAApE,CA7BgD,CA8BnEqJ,cAAgBnJ,QAAhBmJ,EAAuD,CAAA,CAAvDA,GAna+BhK,OAmaKmE,CAAAA,cACpC8F,YAAAA,CAAgD9K,IAAAA,EAAhD8K,GAAiBb,gBAAiBnD,CAAAA,SAAlCgE,EAA6E,CAAA,CAA7EA,GAA6D3B,WACnE,KAAI4B,OAAS7H,YAAA,CArawBrC,OAqaxB,CAAsB7B,KAAtB,CAA6B8B,CAA7B,CACbsG,qBAAA,CAAqB5I,GAAIwS,CAAAA,gBAAzB,CAtaqCnQ,OAsarC,CAAoDC,CAApD,CAGA,IAAImQ,YAAJ,CAKE,IAJIpG,aAIKlF,EAJYmF,WAIZnF,EAHPjH,KAAMmN,CAAAA,YAAN,CAAmBrN,GAAIwS,CAAAA,gBAAvB,CAAyCjG,MAAzC,CAAiDH,gBAAjD,CAAmE5L,KAAMK,CAAAA,KAAzE;AAAgFL,KAAMM,CAAAA,MAAtF,CAGOqG,CAAAA,aAAAA,CAAI,CAAb,CAAoB,CAApB,CAAgBA,aAAhB,CAAuBA,aAAA,EAAvB,CAGE,IAFAtC,YAES8N,CAFCD,IAAA,CAAUvL,aAAV,CAAatC,CAAAA,OAEd8N,CAAAA,WAAAA,CAAI,CAAb,CAAgBA,WAAhB,CAAoB9N,YAAQC,CAAAA,MAA5B,CAAoC6N,WAAA,EAApC,CACQnF,KAEN,CAFe3I,YAAA,CAAQ8N,WAAR,CAEf,CApb+BtQ,OAobnB0I,CAAAA,MAAZ,GAAuBtI,UAAWoL,CAAAA,UAAlC,CACmB,IAAjB,GAAI/K,QAAJ,CACMuJ,aAAJ,CACEnM,KAAMgO,CAAAA,uBAAN,CAA8BlO,GAAIiP,CAAAA,2BAAlC,CAAgE9H,aAAhE,CAAmEwL,WAAnE,CAAsE,CAAtE,CAAyE,CAAzE,CAA4EnF,KAAO3M,CAAAA,KAAnF,CAA0F2M,KAAO1M,CAAAA,MAAjG,CAAyGgC,QAAzG,CAAmH0K,KAAOE,CAAAA,IAA1H,CADF,CAGExN,KAAMiO,CAAAA,oBAAN,CAA2BnO,GAAIiP,CAAAA,2BAA/B,CAA6D9H,aAA7D,CAAgEwL,WAAhE,CAAmEvG,gBAAnE;AAAqFoB,KAAO3M,CAAAA,KAA5F,CAAmG2M,KAAO1M,CAAAA,MAA1G,CAAkH,CAAlH,CAAqH0M,KAAOE,CAAAA,IAA5H,CAJJ,CAOEzL,OAAQC,CAAAA,IAAR,CAAa,iGAAb,CARJ,CAWMmK,aAAJ,CACEnM,KAAMuN,CAAAA,aAAN,CAAoBzN,GAAIiP,CAAAA,2BAAxB,CAAsD9H,aAAtD,CAAyDwL,WAAzD,CAA4D,CAA5D,CAA+D,CAA/D,CAAkEnF,KAAO3M,CAAAA,KAAzE,CAAgF2M,KAAO1M,CAAAA,MAAvF,CAA+FgC,QAA/F,CAAyGC,MAAzG,CAAiHyK,KAAOE,CAAAA,IAAxH,CADF,CAGExN,KAAMoN,CAAAA,UAAN,CAAiBtN,GAAIiP,CAAAA,2BAArB,CAAmD9H,aAAnD,CAAsDwL,WAAtD,CAAyDvG,gBAAzD,CAA2EoB,KAAO3M,CAAAA,KAAlF,CAAyF2M,KAAO1M,CAAAA,MAAhG,CAAwG,CAAxG,CAA2GgC,QAA3G,CAAqHC,MAArH,CAA6HyK,KAAOE,CAAAA,IAApI,CAzBV,KAyCE,KAVA7I,YAUSsC,CAld0B9E,OAwcjBwC,CAAAA,OAUTsC,CARLkF,aAQKlF,EARYmF,WAQZnF;CAJc,CACrB,CADItC,YAAQC,CAAAA,MACZ,EADwByH,MAAA,EACxB,CAAArM,KAAMmN,CAAAA,YAAN,CAAmBrN,GAAIwS,CAAAA,gBAAvB,CAAyCjG,MAAzC,CAAiDH,gBAAjD,CAAmEsG,IAAA,CAAU,CAAV,CAAa7R,CAAAA,KAAhF,CAAuF6R,IAAA,CAAU,CAAV,CAAa5R,CAAAA,MAApG,CAGOqG,EAAAA,WAAAA,CAAI,CAAb,CAAoB,CAApB,CAAgBA,WAAhB,CAAuBA,WAAA,EAAvB,CACE,GAAIoG,aAAJ,CAOE,IANIlB,aAAJ,CACEnM,KAAMuN,CAAAA,aAAN,CAAoBzN,GAAIiP,CAAAA,2BAAxB,CAAsD9H,WAAtD,CAAyD,CAAzD,CAA4D,CAA5D,CAA+D,CAA/D,CAAkEuL,IAAA,CAAUvL,WAAV,CAAatG,CAAAA,KAA/E,CAAsF6R,IAAA,CAAUvL,WAAV,CAAarG,CAAAA,MAAnG,CAA2GgC,QAA3G,CAAqHC,MAArH,CAA6H2P,IAAA,CAAUvL,WAAV,CAAauG,CAAAA,IAA1I,CADF,CAGExN,KAAMoN,CAAAA,UAAN,CAAiBtN,GAAIiP,CAAAA,2BAArB,CAAmD9H,WAAnD,CAAsD,CAAtD,CAAyDiF,gBAAzD,CAA2EsG,IAAA,CAAUvL,WAAV,CAAatG,CAAAA,KAAxF,CAA+F6R,IAAA,CAAUvL,WAAV,CAAarG,CAAAA,MAA5G,CAAoH,CAApH,CAAuHgC,QAAvH;AAAiIC,MAAjI,CAAyI2P,IAAA,CAAUvL,WAAV,CAAauG,CAAAA,IAAtJ,CAGOiF,CAAAA,KAAAA,CAAI,CAAb,CAAgBA,KAAhB,CAAoB9N,YAAQC,CAAAA,MAA5B,CAAoC6N,KAAA,EAApC,CAEQC,MAEN,CAHe/N,YAAA2I,CAAQmF,KAARnF,CACYhN,CAAAA,KAAP,CAAa2G,WAAb,CAAgB3G,CAAAA,KAEpC,CAAI6L,aAAJ,CACEnM,KAAMuN,CAAAA,aAAN,CAAoBzN,GAAIiP,CAAAA,2BAAxB,CAAsD9H,WAAtD,CAAyDwL,KAAzD,CAA6D,CAA7D,CAAgE,CAAhE,CAAmE,CAAnE,CAAsEC,MAAY/R,CAAAA,KAAlF,CAAyF+R,MAAY9R,CAAAA,MAArG,CAA6GgC,QAA7G,CAAuHC,MAAvH,CAA+H6P,MAAYlF,CAAAA,IAA3I,CADF,CAGExN,KAAMoN,CAAAA,UAAN,CAAiBtN,GAAIiP,CAAAA,2BAArB,CAAmD9H,WAAnD,CAAsDwL,KAAtD,CAA0D,CAA1D,CAA6DvG,gBAA7D,CAA+EwG,MAAY/R,CAAAA,KAA3F,CAAkG+R,MAAY9R,CAAAA,MAA9G,CAAsH,CAAtH,CAAyHgC,QAAzH,CAAmIC,MAAnI,CAA2I6P,MAAYlF,CAAAA,IAAvJ,CAdN,KAwBE,KANIrB,aAAJ,CACEnM,KAAMuN,CAAAA,aAAN,CAAoBzN,GAAIiP,CAAAA,2BAAxB,CAAsD9H,WAAtD;AAAyD,CAAzD,CAA4D,CAA5D,CAA+D,CAA/D,CAAkErE,QAAlE,CAA4EC,MAA5E,CAAoF2P,IAAA,CAAUvL,WAAV,CAApF,CADF,CAGEjH,KAAMoN,CAAAA,UAAN,CAAiBtN,GAAIiP,CAAAA,2BAArB,CAAmD9H,WAAnD,CAAsD,CAAtD,CAAyDiF,gBAAzD,CAA2EtJ,QAA3E,CAAqFC,MAArF,CAA6F2P,IAAA,CAAUvL,WAAV,CAA7F,CAGOwL,CAAAA,KAAAA,CAAI,CAAb,CAAgBA,KAAhB,CAAoB9N,YAAQC,CAAAA,MAA5B,CAAoC6N,KAAA,EAApC,CACQnF,MAEN,CAFe3I,YAAA,CAAQ8N,KAAR,CAEf,CAAItG,aAAJ,CACEnM,KAAMuN,CAAAA,aAAN,CAAoBzN,GAAIiP,CAAAA,2BAAxB,CAAsD9H,WAAtD,CAAyDwL,KAAzD,CAA6D,CAA7D,CAAgE,CAAhE,CAAmE,CAAnE,CAAsE7P,QAAtE,CAAgFC,MAAhF,CAAwFyK,MAAOhN,CAAAA,KAAP,CAAa2G,WAAb,CAAxF,CADF,CAGEjH,KAAMoN,CAAAA,UAAN,CAAiBtN,GAAIiP,CAAAA,2BAArB,CAAmD9H,WAAnD,CAAsDwL,KAAtD,CAA0D,CAA1D,CAA6DvG,gBAA7D,CAA+EtJ,QAA/E,CAAyFC,MAAzF,CAAiGyK,MAAOhN,CAAAA,KAAP,CAAa2G,WAAb,CAAjG,CAON/E,4BAAA,CAxfiCC,OAwfjC;AAAqCC,CAArC,CAAJ,EAzvBFtC,GAAIoO,CAAAA,cAAJ,CA2vBmBpO,GAAIwS,CAAAA,gBA3vBvB,CA8vBE/G,iBAAiBnD,CAAAA,SAAjB,CAA6BxC,MAAOuC,CAAAA,OACpC,IA9fqChG,OA8fzBgM,CAAAA,QAAZ,CA9fqChM,OA8fPgM,CAAAA,QAAR,CA9fehM,OA8ff,CAzHmD,CArYvDuD,iBAigBF0C,CAAAA,SAAlB,CAjgBuCjG,OAigBDgG,CAAAA,OAlItC,CAAA,CAhYA,IAKAnI,MAAMuI,CAAAA,WAAN,CAAkBzI,GAAIwS,CAAAA,gBAAtB,CAAwC5M,iBAAkBiB,CAAAA,cAA1D,CAA0E7G,GAAI2I,CAAAA,QAA9E,CAAyFZ,IAAzF,CARqC,CAi+BvC,KAAK8K,CAAAA,cAAL,CAxTAA,QAAuB,CAAClM,YAAD,CAAemM,YAAf,CAA6B9L,YAA7B,CAA2C,CAChE,MAAMJ,uBAAyBzG,UAAWsE,CAAAA,GAAX,CAAekC,YAAf,CAEVnF,KAAAA,EAArB,GAAIsR,YAAJ,EACExE,uBAAA,CAAwB1H,sBAAuBS,CAAAA,kBAA/C,CAAmEV,YAAnE;AAAiFA,YAAatE,CAAAA,OAA9F,CAAuGrC,GAAI+S,CAAAA,iBAA3G,CAA8H/S,GAAI0I,CAAAA,UAAlI,CAGmBlH,KAAAA,EAArB,GAAIwF,YAAJ,EACEkJ,sBAAA,CAAuBvJ,YAAvB,CAR8D,CAyTlE,KAAKqM,CAAAA,iBAAL,CA5SAA,QAA0B,CAACrM,YAAD,CAAe,CACvC,IAAMtE,QAAUsE,YAAatE,CAAAA,OAC7B,OAAMuE,uBAAyBzG,UAAWsE,CAAAA,GAAX,CAAekC,YAAf,CAC/B,KAAMf,kBAAoBzF,UAAWsE,CAAAA,GAAX,CAAepC,OAAf,CAC1BsE,aAAaiE,CAAAA,gBAAb,CAA8B,SAA9B,CAAyClE,qBAAzC,CAEkD,EAAA,CAAlD,GAAIC,YAAagB,CAAAA,4BAAjB,GAC2CnG,IAAAA,EAKzC,GALIoE,iBAAkBiB,CAAAA,cAKtB,GAJEjB,iBAAkBiB,CAAAA,cAIpB,CAJqC7G,GAAIqL,CAAAA,aAAJ,EAIrC;AADAzF,iBAAkB0C,CAAAA,SAClB,CAD8BjG,OAAQgG,CAAAA,OACtC,CAAA/H,IAAKwG,CAAAA,MAAOC,CAAAA,QAAZ,EANF,CASA,KAAMoJ,OAAkD,CAAA,CAAlDA,GAASxJ,YAAaO,CAAAA,uBAC5B,OAAM+L,wBAAwE,CAAA,CAAxEA,GAA0BtM,YAAagB,CAAAA,4BAA7C,CACMrF,aAAeH,YAAA,CAAawE,YAAb,CAAfrE,EAA6CY,QAEnD,IAAIiN,MAAJ,CAAY,CACVvJ,sBAAuBS,CAAAA,kBAAvB,CAA4C,EAE5C,KAAK,IAAIF,WAAI,CAAb,CAAoB,CAApB,CAAgBA,UAAhB,CAAuBA,UAAA,EAAvB,CACEP,sBAAuBS,CAAAA,kBAAvB,CAA0CF,UAA1C,CAAA,CAA+CnH,GAAIkT,CAAAA,iBAAJ,EAJvC,CAAZ,IAMO,CACLtM,sBAAuBS,CAAAA,kBAAvB,CAA4CrH,GAAIkT,CAAAA,iBAAJ,EAE5C,IAAID,uBAAJ,CACE,GAAI7S,YAAa+S,CAAAA,WAAjB,CAA8B,CACtBpM,UAAAA;AAAWJ,YAAatE,CAAAA,OAE9B,KAAK,IAAI8E,EAAI,CAAR,CAAWS,GAAKb,UAASjC,CAAAA,MAA9B,CAAsCqC,CAAtC,CAA0CS,EAA1C,CAA8CT,CAAA,EAA9C,CAAmD,CACjD,IAAMU,qBAAuB1H,UAAWsE,CAAAA,GAAX,CAAesC,UAAA,CAASI,CAAT,CAAf,CAEe3F,KAAAA,EAA5C,GAAIqG,oBAAqBhB,CAAAA,cAAzB,GACEgB,oBAAqBhB,CAAAA,cACrB,CADsC7G,GAAIqL,CAAAA,aAAJ,EACtC,CAAA/K,IAAKwG,CAAAA,MAAOC,CAAAA,QAAZ,EAFF,CAHiD,CAHvB,CAA9B,IAYE9E,QAAQC,CAAAA,IAAR,CAAa,+GAAb,CAIJ,IAAIgB,QAAJ,EAAuC,CAAvC,CAAgByD,YAAagJ,CAAAA,OAA7B,EAAiF,CAAA,CAAjF,GAA4Cd,kBAAA,CAAmBlI,YAAnB,CAA5C,CAAwF,CAChFI,UAAAA,CAAWkM,uBAAA,CAA0B5Q,OAA1B,CAAoC,CAACA,OAAD,CACrDuE;sBAAuBY,CAAAA,8BAAvB,CAAwDxH,GAAIkT,CAAAA,iBAAJ,EACxDtM,uBAAuBa,CAAAA,wBAAvB,CAAkD,EAClDvH,MAAMyO,CAAAA,eAAN,CAAsB3O,GAAI4O,CAAAA,WAA1B,CAAuChI,sBAAuBY,CAAAA,8BAA9D,CAEA,KAASL,oBAAT,CAAa,CAAb,CAAgBA,oBAAhB,CAAoBJ,UAASjC,CAAAA,MAA7B,CAAqCqC,oBAAA,EAArC,CAA0C,CACxC,IAAM9E,iBAAU0E,UAAA,CAASI,oBAAT,CAChBP,uBAAuBa,CAAAA,wBAAvB,CAAgDN,oBAAhD,CAAA,CAAqDnH,GAAIwQ,CAAAA,kBAAJ,EAErDxQ,IAAIuP,CAAAA,gBAAJ,CAAqBvP,GAAIwP,CAAAA,YAAzB,CAAuC5I,sBAAuBa,CAAAA,wBAAvB,CAAgDN,oBAAhD,CAAvC,CAEA;IAAMrE,SAAWzC,KAAM8L,CAAAA,OAAN,CAAc9J,gBAAQ0I,CAAAA,MAAtB,CAA8B1I,gBAAQW,CAAAA,QAAtC,CACjB,OAAMD,OAAS1C,KAAM8L,CAAAA,OAAN,CAAc9J,gBAAQ4H,CAAAA,IAAtB,CACTmC,iBAAAA,CAAmBxJ,iBAAA,CAAkBP,gBAAQc,CAAAA,cAA1B,CAA0CL,QAA1C,CAAoDC,MAApD,CAA4DV,gBAAQW,CAAAA,QAApE,CAAgH,CAAA,CAAhH,GAA8E2D,YAAayM,CAAAA,gBAA3F,CACnBzD,SAAAA,CAAUX,sBAAA,CAAuBrI,YAAvB,CAEhB3G,IAAI6P,CAAAA,8BAAJ,CAAmC7P,GAAIwP,CAAAA,YAAvC,CAAqDG,QAArD,CAA8DvD,gBAA9D,CAAgFzF,YAAa9F,CAAAA,KAA7F,CAAoG8F,YAAa7F,CAAAA,MAAjH,CAEAd,IAAI+P,CAAAA,uBAAJ,CAA4B/P,GAAI4O,CAAAA,WAAhC,CAA6C5O,GAAI+S,CAAAA,iBAAjD;AAAqE5L,oBAArE,CAAwEnH,GAAIwP,CAAAA,YAA5E,CAA0F5I,sBAAuBa,CAAAA,wBAAvB,CAAgDN,oBAAhD,CAA1F,CAbwC,CAgB1CnH,GAAIuP,CAAAA,gBAAJ,CAAqBvP,GAAIwP,CAAAA,YAAzB,CAAuC,IAAvC,CAEI7I,aAAa8I,CAAAA,WAAjB,GACE7I,sBAAuBc,CAAAA,wBACvB,CADkD1H,GAAIwQ,CAAAA,kBAAJ,EAClD,CAAApB,wBAAA,CAAyBxI,sBAAuBc,CAAAA,wBAAhD,CAA0Ef,YAA1E,CAAwF,CAAA,CAAxF,CAFF,CAKAzG,MAAMyO,CAAAA,eAAN,CAAsB3O,GAAI4O,CAAAA,WAA1B,CAAuC,IAAvC,CA7BsF,CApBnF,CAsDP,GAAIuB,MAAJ,CAAY,CACVjQ,KAAMuI,CAAAA,WAAN,CAAkBzI,GAAIwS,CAAAA,gBAAtB,CAAwC5M,iBAAkBiB,CAAAA,cAA1D,CACA+B,qBAAA,CAAqB5I,GAAIwS,CAAAA,gBAAzB;AAA2CnQ,OAA3C,CAAoDC,YAApD,CAEA,KAAS6E,iBAAT,CAAa,CAAb,CAAoB,CAApB,CAAgBA,iBAAhB,CAAuBA,iBAAA,EAAvB,CACEmH,uBAAA,CAAwB1H,sBAAuBS,CAAAA,kBAAvB,CAA0CF,iBAA1C,CAAxB,CAAsER,YAAtE,CAAoFtE,OAApF,CAA6FrC,GAAI+S,CAAAA,iBAAjG,CAAoH/S,GAAIiP,CAAAA,2BAAxH,CAAsJ9H,iBAAtJ,CAGE/E,4BAAA,CAA4BC,OAA5B,CAAqCC,YAArC,CAAJ,EA1gCFtC,GAAIoO,CAAAA,cAAJ,CA2gCmBpO,GAAIwS,CAAAA,gBA3gCvB,CAkgCY,CAAZ,IAaO,IAAIS,uBAAJ,CAA6B,CAC5BlM,OAAAA,CAAWJ,YAAatE,CAAAA,OAE9B,KAAK,IAAI8E,EAAI,CAAR,CAAWS,GAAKb,OAASjC,CAAAA,MAA9B,CAAsCqC,CAAtC,CAA0CS,EAA1C,CAA8CT,CAAA,EAA9C,CACQqH,iBAMN,CANmBzH,OAAA,CAASI,CAAT,CAMnB,CALMU,MAKN,CAL6B1H,UAAWsE,CAAAA,GAAX,CAAe+J,iBAAf,CAK7B;AAJAtO,KAAMuI,CAAAA,WAAN,CAAkBzI,GAAI0I,CAAAA,UAAtB,CAAkCb,MAAqBhB,CAAAA,cAAvD,CAIA,CAHA+B,oBAAA,CAAqB5I,GAAI0I,CAAAA,UAAzB,CAAqC8F,iBAArC,CAAiDlM,YAAjD,CAGA,CAFAgM,uBAAA,CAAwB1H,sBAAuBS,CAAAA,kBAA/C,CAAmEV,YAAnE,CAAiF6H,iBAAjF,CAA6FxO,GAAI+S,CAAAA,iBAAjG,CAAqH5L,CAArH,CAAwHnH,GAAI0I,CAAAA,UAA5H,CAEA,CAAItG,2BAAA,CAA4BoM,iBAA5B,CAAwClM,YAAxC,CAAJ,EAzhCJtC,GAAIoO,CAAAA,cAAJ,CA0hCqBpO,GAAI0I,CAAAA,UA1hCzB,CA+gCoC,CAA7B,IAgBA,CACD2K,MAAAA,CAAgBrT,GAAI0I,CAAAA,UAExB,IAAI/B,YAAa2M,CAAAA,qBAAjB,EAA0C3M,YAAa4M,CAAAA,wBAAvD,CACMrQ,QAAJ,CACEmQ,MADF,CACkB1M,YAAa2M,CAAAA,qBAAb;AAAqCtT,GAAIoJ,CAAAA,UAAzC,CAAsDpJ,GAAIqJ,CAAAA,gBAD5E,CAGEpH,OAAQ+K,CAAAA,KAAR,CAAc,iGAAd,CAIJ9M,MAAMuI,CAAAA,WAAN,CAAkB4K,MAAlB,CAAiCzN,iBAAkBiB,CAAAA,cAAnD,CACA+B,qBAAA,CAAqByK,MAArB,CAAoChR,OAApC,CAA6CC,YAA7C,CACAgM,wBAAA,CAAwB1H,sBAAuBS,CAAAA,kBAA/C,CAAmEV,YAAnE,CAAiFtE,OAAjF,CAA0FrC,GAAI+S,CAAAA,iBAA9F,CAAiHM,MAAjH,CAEIjR,4BAAA,CAA4BC,OAA5B,CAAqCC,YAArC,CAAJ,EA9iCFtC,GAAIoO,CAAAA,cAAJ,CA+iCmBiF,MA/iCnB,CA+hCO,CAjBLnT,KAAMsT,CAAAA,aAAN,EAwCE7M,aAAa8I,CAAAA,WAAjB;AACES,sBAAA,CAAuBvJ,YAAvB,CApIqC,CA6SzC,KAAK8M,CAAAA,wBAAL,CArKAA,QAAiC,CAAC9M,YAAD,CAAe,CAC9C,MAAMrE,aAAeH,YAAA,CAAawE,YAAb,CAAfrE,EAA6CY,QAAnD,CACM6D,SAAyD,CAAA,CAA9C,GAAAJ,YAAagB,CAAAA,4BAAb,CAAqDhB,YAAatE,CAAAA,OAAlE,CAA4E,CAACsE,YAAatE,CAAAA,OAAd,CAE7F,KAAK,IAAI8E,EAAI,CAAR,CAAWS,GAAKb,QAASjC,CAAAA,MAA9B,CAAsCqC,CAAtC,CAA0CS,EAA1C,CAA8CT,CAAA,EAA9C,CAAmD,CACjD,IAAM9E,QAAU0E,QAAA,CAASI,CAAT,CAEhB,IAAI/E,2BAAA,CAA4BC,OAA5B,CAAqCC,YAArC,CAAJ,CAAwD,CACtD,MAAMoD,OAASiB,YAAaO,CAAAA,uBAAb,CAAuClH,GAAIwS,CAAAA,gBAA3C,CAA8DxS,GAAI0I,CAAAA,UAE3EzC,QAAAA,CAAe9F,UAAWsE,CAAAA,GAAX,CAAepC,OAAf,CAAwBwE,CAAAA,cAE7C3G,MAAMuI,CAAAA,WAAN,CAAkB/C,MAAlB;AAA0BO,OAA1B,CAvkCJjG,IAAIoO,CAAAA,cAAJ,CAwkCmB1I,MAxkCnB,CAykCIxF,MAAMsT,CAAAA,aAAN,EAPsD,CAHP,CAJL,CAsKhD,KAAKE,CAAAA,6BAAL,CAnJAA,QAAsC,CAAC/M,YAAD,CAAe,CACnD,GAAIzD,QAAJ,EAAuC,CAAvC,CAAgByD,YAAagJ,CAAAA,OAA7B,EAAiF,CAAA,CAAjF,GAA4Cd,kBAAA,CAAmBlI,YAAnB,CAA5C,CAAwF,CACtF,MAAMI,SAAWJ,YAAagB,CAAAA,4BAAb,CAA4ChB,YAAatE,CAAAA,OAAzD,CAAmE,CAACsE,YAAatE,CAAAA,OAAd,CACpF,KAAMxB,MAAQ8F,YAAa9F,CAAAA,KAC3B,OAAMC,OAAS6F,YAAa7F,CAAAA,MAC5B,KAAI6S,KAAO3T,GAAI4T,CAAAA,gBACf,OAAMC,kBAAoB,EAA1B,CACMC,WAAanN,YAAa+I,CAAAA,aAAb,CAA6B1P,GAAIiQ,CAAAA,wBAAjC,CAA4DjQ,GAAIgQ,CAAAA,gBADnF;AAEMpJ,uBAAyBzG,UAAWsE,CAAAA,GAAX,CAAekC,YAAf,CAF/B,CAGMsM,wBAAwE,CAAA,CAAxEA,GAA0BtM,YAAagB,CAAAA,4BAE7C,IAAIsL,uBAAJ,CACE,IAAK,IAAI9L,EAAI,CAAb,CAAgBA,CAAhB,CAAoBJ,QAASjC,CAAAA,MAA7B,CAAqCqC,CAAA,EAArC,CACEjH,KAAMyO,CAAAA,eAAN,CAAsB3O,GAAI4O,CAAAA,WAA1B,CAAuChI,sBAAuBY,CAAAA,8BAA9D,CAMA,CAJAxH,GAAI+P,CAAAA,uBAAJ,CAA4B/P,GAAI4O,CAAAA,WAAhC,CAA6C5O,GAAI+S,CAAAA,iBAAjD,CAAqE5L,CAArE,CAAwEnH,GAAIwP,CAAAA,YAA5E,CAA0F,IAA1F,CAIA,CAFAtP,KAAMyO,CAAAA,eAAN,CAAsB3O,GAAI4O,CAAAA,WAA1B,CAAuChI,sBAAuBS,CAAAA,kBAA9D,CAEA,CAAArH,GAAImP,CAAAA,oBAAJ,CAAyBnP,GAAI+T,CAAAA,gBAA7B,CAA+C/T,GAAI+S,CAAAA,iBAAnD;AAAuE5L,CAAvE,CAA0EnH,GAAI0I,CAAAA,UAA9E,CAA0F,IAA1F,CAAgG,CAAhG,CAIJxI,MAAMyO,CAAAA,eAAN,CAAsB3O,GAAIgU,CAAAA,gBAA1B,CAA4CpN,sBAAuBY,CAAAA,8BAAnE,CACAtH,MAAMyO,CAAAA,eAAN,CAAsB3O,GAAI+T,CAAAA,gBAA1B,CAA4CnN,sBAAuBS,CAAAA,kBAAnE,CAEA,KAASF,CAAT,CAAa,CAAb,CAAgBA,CAAhB,CAAoBJ,QAASjC,CAAAA,MAA7B,CAAqCqC,CAAA,EAArC,CAA0C,CACxC0M,iBAAkB/I,CAAAA,IAAlB,CAAuB9K,GAAI+S,CAAAA,iBAA3B,CAA+C5L,CAA/C,CAEIR,aAAa8I,CAAAA,WAAjB,EACEoE,iBAAkB/I,CAAAA,IAAlB,CAAuBgJ,UAAvB,CAGF,KAAMG,kBAAmEzS,IAAAA,EAA/C,GAAAoF,sBAAuBsN,CAAAA,mBAAvB,CAA2DtN,sBAAuBsN,CAAAA,mBAAlF,CAAwG,CAAA,CAExG,EAAA,CAA1B,GAAID,iBAAJ,GACMtN,YAAa8I,CAAAA,WACjB;CAD8BkE,IAC9B,EADsC3T,GAAImU,CAAAA,gBAC1C,EAAIxN,YAAa+I,CAAAA,aAAjB,GAAgCiE,IAAhC,EAAwC3T,GAAIoU,CAAAA,kBAA5C,CAFF,CAKInB,wBAAJ,EACEjT,GAAI+P,CAAAA,uBAAJ,CAA4B/P,GAAIgU,CAAAA,gBAAhC,CAAkDhU,GAAI+S,CAAAA,iBAAtD,CAAyE/S,GAAIwP,CAAAA,YAA7E,CAA2F5I,sBAAuBa,CAAAA,wBAAvB,CAAgDN,CAAhD,CAA3F,CAGwB,EAAA,CAA1B,GAAI8M,iBAAJ,GACEjU,GAAIqU,CAAAA,qBAAJ,CAA0BrU,GAAIgU,CAAAA,gBAA9B,CAAgD,CAACF,UAAD,CAAhD,CAEA,CAAA9T,GAAIqU,CAAAA,qBAAJ,CAA0BrU,GAAI+T,CAAAA,gBAA9B,CAAgD,CAACD,UAAD,CAAhD,CAHF,CAMIb,wBAAJ,GACQhN,iBAEN,CAFqB9F,UAAWsE,CAAAA,GAAX,CAAesC,QAAA,CAASI,CAAT,CAAf,CAA4BN,CAAAA,cAEjD,CAAA7G,GAAImP,CAAAA,oBAAJ,CAAyBnP,GAAI+T,CAAAA,gBAA7B;AAA+C/T,GAAI+S,CAAAA,iBAAnD,CAAsE/S,GAAI0I,CAAAA,UAA1E,CAAsFzC,iBAAtF,CAAoG,CAApG,CAHF,CAMAjG,IAAIsU,CAAAA,eAAJ,CAAoB,CAApB,CAAuB,CAAvB,CAA0BzT,KAA1B,CAAiCC,MAAjC,CAAyC,CAAzC,CAA4C,CAA5C,CAA+CD,KAA/C,CAAsDC,MAAtD,CAA8D6S,IAA9D,CAAoE3T,GAAIsF,CAAAA,OAAxE,CAEI6L,8BAAJ,EACEnR,GAAIqU,CAAAA,qBAAJ,CAA0BrU,GAAIgU,CAAAA,gBAA9B,CAAgDH,iBAAhD,CAjCsC,CAqC1C3T,KAAMyO,CAAAA,eAAN,CAAsB3O,GAAIgU,CAAAA,gBAA1B,CAA4C,IAA5C,CACA9T,MAAMyO,CAAAA,eAAN,CAAsB3O,GAAI+T,CAAAA,gBAA1B,CAA4C,IAA5C,CAEA,IAAId,uBAAJ,CACE,IAAS9L,YAAT,CAAa,CAAb,CAAgBA,YAAhB,CAAoBJ,QAASjC,CAAAA,MAA7B,CAAqCqC,YAAA,EAArC,CACEjH,KAAMyO,CAAAA,eAAN,CAAsB3O,GAAI4O,CAAAA,WAA1B,CAAuChI,sBAAuBY,CAAAA,8BAA9D,CAQA;AANAxH,GAAI+P,CAAAA,uBAAJ,CAA4B/P,GAAI4O,CAAAA,WAAhC,CAA6C5O,GAAI+S,CAAAA,iBAAjD,CAAqE5L,YAArE,CAAwEnH,GAAIwP,CAAAA,YAA5E,CAA0F5I,sBAAuBa,CAAAA,wBAAvB,CAAgDN,YAAhD,CAA1F,CAMA,CAJMlB,KAIN,CAJqB9F,UAAWsE,CAAAA,GAAX,CAAesC,QAAA,CAASI,YAAT,CAAf,CAA4BN,CAAAA,cAIjD,CAFA3G,KAAMyO,CAAAA,eAAN,CAAsB3O,GAAI4O,CAAAA,WAA1B,CAAuChI,sBAAuBS,CAAAA,kBAA9D,CAEA,CAAArH,GAAImP,CAAAA,oBAAJ,CAAyBnP,GAAI+T,CAAAA,gBAA7B,CAA+C/T,GAAI+S,CAAAA,iBAAnD,CAAuE5L,YAAvE,CAA0EnH,GAAI0I,CAAAA,UAA9E,CAA0FzC,KAA1F,CAAwG,CAAxG,CAIJ/F,MAAMyO,CAAAA,eAAN,CAAsB3O,GAAI+T,CAAAA,gBAA1B,CAA4CnN,sBAAuBY,CAAAA,8BAAnE,CA/EsF,CADrC,CAoJrD;IAAK0I,CAAAA,sBAAL,CAA8BA,sBAC9B,KAAK5B,CAAAA,uBAAL,CAA+BA,uBAC/B,KAAKO,CAAAA,kBAAL,CAA0BA,kBAtzC0D,CAZtF,KAAIpM,WAAarD,OAAA,CAAQ,yCAAR,CAAjB,CAEIkC,UAQJiT,QAAgC,CAACC,GAAD,CAAMhV,WAAN,CAAmB,CAAE,GAAI,CAACA,WAAL,EAAoBgV,GAApB,EAA2BA,GAAIC,CAAAA,UAA/B,CAA6C,MAAOD,IAAO,IAAY,IAAZ,GAAIA,GAAJ,EAAmC,QAAnC,GAAoB,MAAOA,IAA3B,EAA8D,UAA9D,GAA+C,MAAOA,IAAtD,CAA4E,MAAO,CAAEE,QAASF,GAAX,CAAuE,KAA/CG,WAA+C,CAAvCpV,wBAAA,CAAyBC,WAAzB,CAAuC,GAAamV,WAAM7K,CAAAA,GAAN,CAAU0K,GAAV,CAAb,CAA+B,MAAOG,YAAMlQ,CAAAA,GAAN,CAAU+P,GAAV,CAAkB,KAAII,OAAS,EAAb,CAAqBC;AAAwBjV,MAAOC,CAAAA,cAA/BgV,EAAiDjV,MAAOkV,CAAAA,wBAA7E,CAAgHC,GAAT,KAASA,GAAT,GAAgBP,IAAhB,CAAuB,GAAY,SAAZ,GAAIO,GAAJ,EAAyBnV,MAAOoV,CAAAA,SAAUC,CAAAA,cAAeC,CAAAA,IAAhC,CAAqCV,GAArC,CAA0CO,GAA1C,CAAzB,CAAyE,CAAE,IAAII,KAAON,qBAAA,CAAwBjV,MAAOkV,CAAAA,wBAAP,CAAgCN,GAAhC,CAAqCO,GAArC,CAAxB,CAAoE,IAAUI,KAAJ,GAAaA,IAAK1Q,CAAAA,GAAlB,EAAyB0Q,IAAKjN,CAAAA,GAA9B,EAAsCtI,MAAOC,CAAAA,cAAP,CAAsB+U,MAAtB,CAA8BG,GAA9B,CAAmCI,IAAnC,CAAtC,CAAyFP,MAAA,CAAOG,GAAP,CAAzF,CAAuGP,GAAA,CAAIO,GAAJ,CAA9L,CAA8MH,MAAOF,CAAAA,OAAP,CAAiBF,GAASG,YAAJ,EAAaA,WAAMzM,CAAAA,GAAN,CAAUsM,GAAV,CAAeI,MAAf,CAA0B,OAAOA,OAAxuB,CARnC,CAAwBxV,OAAA,CAAQ,8CAAR,CAAxB,CAFhB,CAIIyR,YAAczR,OAAA,CAAQ,iDAAR,CAJlB;AAMIwC,OAASxC,OAAA,CAAQ,qCAAR,CAd2G;",
"sources":["node_modules/three/src/renderers/webgl/WebGLTextures.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three$src$renderers$webgl$WebGLTextures\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebGLTextures = WebGLTextures;\n\nvar _constants = require(\"../../constants.js\");\n\nvar MathUtils = _interopRequireWildcard(require(\"../../math/MathUtils.js\"));\n\nvar _ImageUtils = require(\"../../extras/ImageUtils.js\");\n\nvar _utils = require(\"../../utils.js\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {\n  const isWebGL2 = capabilities.isWebGL2;\n  const maxTextures = capabilities.maxTextures;\n  const maxCubemapSize = capabilities.maxCubemapSize;\n  const maxTextureSize = capabilities.maxTextureSize;\n  const maxSamples = capabilities.maxSamples;\n  const multisampledRTTExt = extensions.has('WEBGL_multisampled_render_to_texture') ? extensions.get('WEBGL_multisampled_render_to_texture') : null;\n  const supportsInvalidateFramebuffer = typeof navigator === 'undefined' ? false : /OculusBrowser/g.test(navigator.userAgent);\n\n  const _videoTextures = new WeakMap();\n\n  let _canvas;\n\n  const _sources = new WeakMap(); // maps WebglTexture objects to instances of Source\n  // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n  // also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n  // Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\n  let useOffscreenCanvas = false;\n\n  try {\n    useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' // eslint-disable-next-line compat/compat\n    && new OffscreenCanvas(1, 1).getContext('2d') !== null;\n  } catch (err) {// Ignore any errors\n  }\n\n  function createCanvas(width, height) {\n    // Use OffscreenCanvas when available. Specially needed in web workers\n    return useOffscreenCanvas ? // eslint-disable-next-line compat/compat\n    new OffscreenCanvas(width, height) : (0, _utils.createElementNS)('canvas');\n  }\n\n  function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {\n    let scale = 1; // handle case if texture exceeds max size\n\n    if (image.width > maxSize || image.height > maxSize) {\n      scale = maxSize / Math.max(image.width, image.height);\n    } // only perform resize if necessary\n\n\n    if (scale < 1 || needsPowerOfTwo === true) {\n      // only perform resize for certain image types\n      if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n        const floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;\n        const width = floor(scale * image.width);\n        const height = floor(scale * image.height);\n        if (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas\n\n        const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;\n        canvas.width = width;\n        canvas.height = height;\n        const context = canvas.getContext('2d');\n        context.drawImage(image, 0, 0, width, height);\n        console.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');\n        return canvas;\n      } else {\n        if ('data' in image) {\n          console.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');\n        }\n\n        return image;\n      }\n    }\n\n    return image;\n  }\n\n  function isPowerOfTwo(image) {\n    return MathUtils.isPowerOfTwo(image.width) && MathUtils.isPowerOfTwo(image.height);\n  }\n\n  function textureNeedsPowerOfTwo(texture) {\n    if (isWebGL2) return false;\n    return texture.wrapS !== _constants.ClampToEdgeWrapping || texture.wrapT !== _constants.ClampToEdgeWrapping || texture.minFilter !== _constants.NearestFilter && texture.minFilter !== _constants.LinearFilter;\n  }\n\n  function textureNeedsGenerateMipmaps(texture, supportsMips) {\n    return texture.generateMipmaps && supportsMips && texture.minFilter !== _constants.NearestFilter && texture.minFilter !== _constants.LinearFilter;\n  }\n\n  function generateMipmap(target) {\n    _gl.generateMipmap(target);\n  }\n\n  function getInternalFormat(internalFormatName, glFormat, glType, encoding, forceLinearEncoding = false) {\n    if (isWebGL2 === false) return glFormat;\n\n    if (internalFormatName !== null) {\n      if (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];\n      console.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n    }\n\n    let internalFormat = glFormat;\n\n    if (glFormat === _gl.RED) {\n      if (glType === _gl.FLOAT) internalFormat = _gl.R32F;\n      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;\n    }\n\n    if (glFormat === _gl.RG) {\n      if (glType === _gl.FLOAT) internalFormat = _gl.RG32F;\n      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RG16F;\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RG8;\n    }\n\n    if (glFormat === _gl.RGBA) {\n      if (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;\n      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = encoding === _constants.sRGBEncoding && forceLinearEncoding === false ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;\n      if (glType === _gl.UNSIGNED_SHORT_4_4_4_4) internalFormat = _gl.RGBA4;\n      if (glType === _gl.UNSIGNED_SHORT_5_5_5_1) internalFormat = _gl.RGB5_A1;\n    }\n\n    if (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RG16F || internalFormat === _gl.RG32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {\n      extensions.get('EXT_color_buffer_float');\n    }\n\n    return internalFormat;\n  }\n\n  function getMipLevels(texture, image, supportsMips) {\n    if (textureNeedsGenerateMipmaps(texture, supportsMips) === true || texture.isFramebufferTexture && texture.minFilter !== _constants.NearestFilter && texture.minFilter !== _constants.LinearFilter) {\n      return Math.log2(Math.max(image.width, image.height)) + 1;\n    } else if (texture.mipmaps !== undefined && texture.mipmaps.length > 0) {\n      // user-defined mipmaps\n      return texture.mipmaps.length;\n    } else if (texture.isCompressedTexture && Array.isArray(texture.image)) {\n      return image.mipmaps.length;\n    } else {\n      // texture without mipmaps (only base level)\n      return 1;\n    }\n  } // Fallback filters for non-power-of-2 textures\n\n\n  function filterFallback(f) {\n    if (f === _constants.NearestFilter || f === _constants.NearestMipmapNearestFilter || f === _constants.NearestMipmapLinearFilter) {\n      return _gl.NEAREST;\n    }\n\n    return _gl.LINEAR;\n  } //\n\n\n  function onTextureDispose(event) {\n    const texture = event.target;\n    texture.removeEventListener('dispose', onTextureDispose);\n    deallocateTexture(texture);\n\n    if (texture.isVideoTexture) {\n      _videoTextures.delete(texture);\n    }\n  }\n\n  function onRenderTargetDispose(event) {\n    const renderTarget = event.target;\n    renderTarget.removeEventListener('dispose', onRenderTargetDispose);\n    deallocateRenderTarget(renderTarget);\n  } //\n\n\n  function deallocateTexture(texture) {\n    const textureProperties = properties.get(texture);\n    if (textureProperties.__webglInit === undefined) return; // check if it's necessary to remove the WebGLTexture object\n\n    const source = texture.source;\n\n    const webglTextures = _sources.get(source);\n\n    if (webglTextures) {\n      const webglTexture = webglTextures[textureProperties.__cacheKey];\n      webglTexture.usedTimes--; // the WebGLTexture object is not used anymore, remove it\n\n      if (webglTexture.usedTimes === 0) {\n        deleteTexture(texture);\n      } // remove the weak map entry if no WebGLTexture uses the source anymore\n\n\n      if (Object.keys(webglTextures).length === 0) {\n        _sources.delete(source);\n      }\n    }\n\n    properties.remove(texture);\n  }\n\n  function deleteTexture(texture) {\n    const textureProperties = properties.get(texture);\n\n    _gl.deleteTexture(textureProperties.__webglTexture);\n\n    const source = texture.source;\n\n    const webglTextures = _sources.get(source);\n\n    delete webglTextures[textureProperties.__cacheKey];\n    info.memory.textures--;\n  }\n\n  function deallocateRenderTarget(renderTarget) {\n    const texture = renderTarget.texture;\n    const renderTargetProperties = properties.get(renderTarget);\n    const textureProperties = properties.get(texture);\n\n    if (textureProperties.__webglTexture !== undefined) {\n      _gl.deleteTexture(textureProperties.__webglTexture);\n\n      info.memory.textures--;\n    }\n\n    if (renderTarget.depthTexture) {\n      renderTarget.depthTexture.dispose();\n    }\n\n    if (renderTarget.isWebGLCubeRenderTarget) {\n      for (let i = 0; i < 6; i++) {\n        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n\n        if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n      }\n    } else {\n      _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n\n      if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n      if (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);\n\n      if (renderTargetProperties.__webglColorRenderbuffer) {\n        for (let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i++) {\n          if (renderTargetProperties.__webglColorRenderbuffer[i]) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer[i]);\n        }\n      }\n\n      if (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);\n    }\n\n    if (renderTarget.isWebGLMultipleRenderTargets) {\n      for (let i = 0, il = texture.length; i < il; i++) {\n        const attachmentProperties = properties.get(texture[i]);\n\n        if (attachmentProperties.__webglTexture) {\n          _gl.deleteTexture(attachmentProperties.__webglTexture);\n\n          info.memory.textures--;\n        }\n\n        properties.remove(texture[i]);\n      }\n    }\n\n    properties.remove(texture);\n    properties.remove(renderTarget);\n  } //\n\n\n  let textureUnits = 0;\n\n  function resetTextureUnits() {\n    textureUnits = 0;\n  }\n\n  function allocateTextureUnit() {\n    const textureUnit = textureUnits;\n\n    if (textureUnit >= maxTextures) {\n      console.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);\n    }\n\n    textureUnits += 1;\n    return textureUnit;\n  }\n\n  function getTextureCacheKey(texture) {\n    const array = [];\n    array.push(texture.wrapS);\n    array.push(texture.wrapT);\n    array.push(texture.wrapR || 0);\n    array.push(texture.magFilter);\n    array.push(texture.minFilter);\n    array.push(texture.anisotropy);\n    array.push(texture.internalFormat);\n    array.push(texture.format);\n    array.push(texture.type);\n    array.push(texture.generateMipmaps);\n    array.push(texture.premultiplyAlpha);\n    array.push(texture.flipY);\n    array.push(texture.unpackAlignment);\n    array.push(texture.encoding);\n    return array.join();\n  } //\n\n\n  function setTexture2D(texture, slot) {\n    const textureProperties = properties.get(texture);\n    if (texture.isVideoTexture) updateVideoTexture(texture);\n\n    if (texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version) {\n      const image = texture.image;\n\n      if (image === null) {\n        console.warn('THREE.WebGLRenderer: Texture marked for update but no image data found.');\n      } else if (image.complete === false) {\n        console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');\n      } else {\n        uploadTexture(textureProperties, texture, slot);\n        return;\n      }\n    }\n\n    state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);\n  }\n\n  function setTexture2DArray(texture, slot) {\n    const textureProperties = properties.get(texture);\n\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      uploadTexture(textureProperties, texture, slot);\n      return;\n    }\n\n    state.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);\n  }\n\n  function setTexture3D(texture, slot) {\n    const textureProperties = properties.get(texture);\n\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      uploadTexture(textureProperties, texture, slot);\n      return;\n    }\n\n    state.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);\n  }\n\n  function setTextureCube(texture, slot) {\n    const textureProperties = properties.get(texture);\n\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      uploadCubeTexture(textureProperties, texture, slot);\n      return;\n    }\n\n    state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);\n  }\n\n  const wrappingToGL = {\n    [_constants.RepeatWrapping]: _gl.REPEAT,\n    [_constants.ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,\n    [_constants.MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT\n  };\n  const filterToGL = {\n    [_constants.NearestFilter]: _gl.NEAREST,\n    [_constants.NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,\n    [_constants.NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,\n    [_constants.LinearFilter]: _gl.LINEAR,\n    [_constants.LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,\n    [_constants.LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR\n  };\n\n  function setTextureParameters(textureType, texture, supportsMips) {\n    if (supportsMips) {\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);\n\n      if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);\n      }\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);\n    } else {\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);\n\n      if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);\n      }\n\n      if (texture.wrapS !== _constants.ClampToEdgeWrapping || texture.wrapT !== _constants.ClampToEdgeWrapping) {\n        console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');\n      }\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));\n\n      if (texture.minFilter !== _constants.NearestFilter && texture.minFilter !== _constants.LinearFilter) {\n        console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');\n      }\n    }\n\n    if (extensions.has('EXT_texture_filter_anisotropic') === true) {\n      const extension = extensions.get('EXT_texture_filter_anisotropic');\n      if (texture.magFilter === _constants.NearestFilter) return;\n      if (texture.minFilter !== _constants.NearestMipmapLinearFilter && texture.minFilter !== _constants.LinearMipmapLinearFilter) return;\n      if (texture.type === _constants.FloatType && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2\n\n      if (isWebGL2 === false && texture.type === _constants.HalfFloatType && extensions.has('OES_texture_half_float_linear') === false) return; // verify extension for WebGL 1 only\n\n      if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n        _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));\n\n        properties.get(texture).__currentAnisotropy = texture.anisotropy;\n      }\n    }\n  }\n\n  function initTexture(textureProperties, texture) {\n    let forceUpload = false;\n\n    if (textureProperties.__webglInit === undefined) {\n      textureProperties.__webglInit = true;\n      texture.addEventListener('dispose', onTextureDispose);\n    } // create Source <-> WebGLTextures mapping if necessary\n\n\n    const source = texture.source;\n\n    let webglTextures = _sources.get(source);\n\n    if (webglTextures === undefined) {\n      webglTextures = {};\n\n      _sources.set(source, webglTextures);\n    } // check if there is already a WebGLTexture object for the given texture parameters\n\n\n    const textureCacheKey = getTextureCacheKey(texture);\n\n    if (textureCacheKey !== textureProperties.__cacheKey) {\n      // if not, create a new instance of WebGLTexture\n      if (webglTextures[textureCacheKey] === undefined) {\n        // create new entry\n        webglTextures[textureCacheKey] = {\n          texture: _gl.createTexture(),\n          usedTimes: 0\n        };\n        info.memory.textures++; // when a new instance of WebGLTexture was created, a texture upload is required\n        // even if the image contents are identical\n\n        forceUpload = true;\n      }\n\n      webglTextures[textureCacheKey].usedTimes++; // every time the texture cache key changes, it's necessary to check if an instance of\n      // WebGLTexture can be deleted in order to avoid a memory leak.\n\n      const webglTexture = webglTextures[textureProperties.__cacheKey];\n\n      if (webglTexture !== undefined) {\n        webglTextures[textureProperties.__cacheKey].usedTimes--;\n\n        if (webglTexture.usedTimes === 0) {\n          deleteTexture(texture);\n        }\n      } // store references to cache key and WebGLTexture object\n\n\n      textureProperties.__cacheKey = textureCacheKey;\n      textureProperties.__webglTexture = webglTextures[textureCacheKey].texture;\n    }\n\n    return forceUpload;\n  }\n\n  function uploadTexture(textureProperties, texture, slot) {\n    let textureType = _gl.TEXTURE_2D;\n    if (texture.isDataArrayTexture || texture.isCompressedArrayTexture) textureType = _gl.TEXTURE_2D_ARRAY;\n    if (texture.isData3DTexture) textureType = _gl.TEXTURE_3D;\n    const forceUpload = initTexture(textureProperties, texture);\n    const source = texture.source;\n    state.bindTexture(textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);\n    const sourceProperties = properties.get(source);\n\n    if (source.version !== sourceProperties.__version || forceUpload === true) {\n      state.activeTexture(_gl.TEXTURE0 + slot);\n\n      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n      _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n\n      const needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo(texture.image) === false;\n      let image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);\n      image = verifyColorSpace(texture, image);\n      const supportsMips = isPowerOfTwo(image) || isWebGL2,\n            glFormat = utils.convert(texture.format, texture.encoding);\n      let glType = utils.convert(texture.type),\n          glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding, texture.isVideoTexture);\n      setTextureParameters(textureType, texture, supportsMips);\n      let mipmap;\n      const mipmaps = texture.mipmaps;\n      const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;\n      const allocateMemory = sourceProperties.__version === undefined || forceUpload === true;\n      const levels = getMipLevels(texture, image, supportsMips);\n\n      if (texture.isDepthTexture) {\n        // populate depth texture with dummy data\n        glInternalFormat = _gl.DEPTH_COMPONENT;\n\n        if (isWebGL2) {\n          if (texture.type === _constants.FloatType) {\n            glInternalFormat = _gl.DEPTH_COMPONENT32F;\n          } else if (texture.type === _constants.UnsignedIntType) {\n            glInternalFormat = _gl.DEPTH_COMPONENT24;\n          } else if (texture.type === _constants.UnsignedInt248Type) {\n            glInternalFormat = _gl.DEPTH24_STENCIL8;\n          } else {\n            glInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D\n          }\n        } else {\n          if (texture.type === _constants.FloatType) {\n            console.error('WebGLRenderer: Floating point depth texture requires WebGL2.');\n          }\n        } // validation checks for WebGL 1\n\n\n        if (texture.format === _constants.DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n          // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n          // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n          // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n          if (texture.type !== _constants.UnsignedShortType && texture.type !== _constants.UnsignedIntType) {\n            console.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');\n            texture.type = _constants.UnsignedIntType;\n            glType = utils.convert(texture.type);\n          }\n        }\n\n        if (texture.format === _constants.DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n          // Depth stencil textures need the DEPTH_STENCIL internal format\n          // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n          glInternalFormat = _gl.DEPTH_STENCIL; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n          // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n          // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\n          if (texture.type !== _constants.UnsignedInt248Type) {\n            console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');\n            texture.type = _constants.UnsignedInt248Type;\n            glType = utils.convert(texture.type);\n          }\n        } //\n\n\n        if (allocateMemory) {\n          if (useTexStorage) {\n            state.texStorage2D(_gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height);\n          } else {\n            state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);\n          }\n        }\n      } else if (texture.isDataTexture) {\n        // use manually created mipmaps if available\n        // if there are no manual mipmaps\n        // set 0 level mipmap and then use GL to generate other mipmap levels\n        if (mipmaps.length > 0 && supportsMips) {\n          if (useTexStorage && allocateMemory) {\n            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);\n          }\n\n          for (let i = 0, il = mipmaps.length; i < il; i++) {\n            mipmap = mipmaps[i];\n\n            if (useTexStorage) {\n              state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);\n            } else {\n              state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n            }\n          }\n\n          texture.generateMipmaps = false;\n        } else {\n          if (useTexStorage) {\n            if (allocateMemory) {\n              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);\n            }\n\n            state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data);\n          } else {\n            state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);\n          }\n        }\n      } else if (texture.isCompressedTexture) {\n        if (texture.isCompressedArrayTexture) {\n          if (useTexStorage && allocateMemory) {\n            state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height, image.depth);\n          }\n\n          for (let i = 0, il = mipmaps.length; i < il; i++) {\n            mipmap = mipmaps[i];\n\n            if (texture.format !== _constants.RGBAFormat) {\n              if (glFormat !== null) {\n                if (useTexStorage) {\n                  state.compressedTexSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data, 0, 0);\n                } else {\n                  state.compressedTexImage3D(_gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0);\n                }\n              } else {\n                console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n              }\n            } else {\n              if (useTexStorage) {\n                state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data);\n              } else {\n                state.texImage3D(_gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data);\n              }\n            }\n          }\n        } else {\n          if (useTexStorage && allocateMemory) {\n            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);\n          }\n\n          for (let i = 0, il = mipmaps.length; i < il; i++) {\n            mipmap = mipmaps[i];\n\n            if (texture.format !== _constants.RGBAFormat) {\n              if (glFormat !== null) {\n                if (useTexStorage) {\n                  state.compressedTexSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);\n                } else {\n                  state.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n                }\n              } else {\n                console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n              }\n            } else {\n              if (useTexStorage) {\n                state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);\n              } else {\n                state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n              }\n            }\n          }\n        }\n      } else if (texture.isDataArrayTexture) {\n        if (useTexStorage) {\n          if (allocateMemory) {\n            state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth);\n          }\n\n          state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);\n        } else {\n          state.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n        }\n      } else if (texture.isData3DTexture) {\n        if (useTexStorage) {\n          if (allocateMemory) {\n            state.texStorage3D(_gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth);\n          }\n\n          state.texSubImage3D(_gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);\n        } else {\n          state.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n        }\n      } else if (texture.isFramebufferTexture) {\n        if (allocateMemory) {\n          if (useTexStorage) {\n            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);\n          } else {\n            let width = image.width,\n                height = image.height;\n\n            for (let i = 0; i < levels; i++) {\n              state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null);\n              width >>= 1;\n              height >>= 1;\n            }\n          }\n        }\n      } else {\n        // regular Texture (image, video, canvas)\n        // use manually created mipmaps if available\n        // if there are no manual mipmaps\n        // set 0 level mipmap and then use GL to generate other mipmap levels\n        if (mipmaps.length > 0 && supportsMips) {\n          if (useTexStorage && allocateMemory) {\n            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);\n          }\n\n          for (let i = 0, il = mipmaps.length; i < il; i++) {\n            mipmap = mipmaps[i];\n\n            if (useTexStorage) {\n              state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap);\n            } else {\n              state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);\n            }\n          }\n\n          texture.generateMipmaps = false;\n        } else {\n          if (useTexStorage) {\n            if (allocateMemory) {\n              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);\n            }\n\n            state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image);\n          } else {\n            state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);\n          }\n        }\n      }\n\n      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n        generateMipmap(textureType);\n      }\n\n      sourceProperties.__version = source.version;\n      if (texture.onUpdate) texture.onUpdate(texture);\n    }\n\n    textureProperties.__version = texture.version;\n  }\n\n  function uploadCubeTexture(textureProperties, texture, slot) {\n    if (texture.image.length !== 6) return;\n    const forceUpload = initTexture(textureProperties, texture);\n    const source = texture.source;\n    state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);\n    const sourceProperties = properties.get(source);\n\n    if (source.version !== sourceProperties.__version || forceUpload === true) {\n      state.activeTexture(_gl.TEXTURE0 + slot);\n\n      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n      _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\n\n      const isCompressed = texture.isCompressedTexture || texture.image[0].isCompressedTexture;\n      const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;\n      const cubeImage = [];\n\n      for (let i = 0; i < 6; i++) {\n        if (!isCompressed && !isDataTexture) {\n          cubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);\n        } else {\n          cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n        }\n\n        cubeImage[i] = verifyColorSpace(texture, cubeImage[i]);\n      }\n\n      const image = cubeImage[0],\n            supportsMips = isPowerOfTwo(image) || isWebGL2,\n            glFormat = utils.convert(texture.format, texture.encoding),\n            glType = utils.convert(texture.type),\n            glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n      const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;\n      const allocateMemory = sourceProperties.__version === undefined || forceUpload === true;\n      let levels = getMipLevels(texture, image, supportsMips);\n      setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n      let mipmaps;\n\n      if (isCompressed) {\n        if (useTexStorage && allocateMemory) {\n          state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height);\n        }\n\n        for (let i = 0; i < 6; i++) {\n          mipmaps = cubeImage[i].mipmaps;\n\n          for (let j = 0; j < mipmaps.length; j++) {\n            const mipmap = mipmaps[j];\n\n            if (texture.format !== _constants.RGBAFormat) {\n              if (glFormat !== null) {\n                if (useTexStorage) {\n                  state.compressedTexSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);\n                } else {\n                  state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n                }\n              } else {\n                console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');\n              }\n            } else {\n              if (useTexStorage) {\n                state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);\n              } else {\n                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n              }\n            }\n          }\n        }\n      } else {\n        mipmaps = texture.mipmaps;\n\n        if (useTexStorage && allocateMemory) {\n          // TODO: Uniformly handle mipmap definitions\n          // Normal textures and compressed cube textures define base level + mips with their mipmap array\n          // Uncompressed cube textures use their mipmap array only for mips (no base level)\n          if (mipmaps.length > 0) levels++;\n          state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, cubeImage[0].width, cubeImage[0].height);\n        }\n\n        for (let i = 0; i < 6; i++) {\n          if (isDataTexture) {\n            if (useTexStorage) {\n              state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[i].width, cubeImage[i].height, glFormat, glType, cubeImage[i].data);\n            } else {\n              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);\n            }\n\n            for (let j = 0; j < mipmaps.length; j++) {\n              const mipmap = mipmaps[j];\n              const mipmapImage = mipmap.image[i].image;\n\n              if (useTexStorage) {\n                state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data);\n              } else {\n                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);\n              }\n            }\n          } else {\n            if (useTexStorage) {\n              state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[i]);\n            } else {\n              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);\n            }\n\n            for (let j = 0; j < mipmaps.length; j++) {\n              const mipmap = mipmaps[j];\n\n              if (useTexStorage) {\n                state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[i]);\n              } else {\n                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);\n              }\n            }\n          }\n        }\n      }\n\n      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n        // We assume images for cube map have the same size.\n        generateMipmap(_gl.TEXTURE_CUBE_MAP);\n      }\n\n      sourceProperties.__version = source.version;\n      if (texture.onUpdate) texture.onUpdate(texture);\n    }\n\n    textureProperties.__version = texture.version;\n  } // Render targets\n  // Setup storage for target texture and bind it to correct framebuffer\n\n\n  function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget) {\n    const glFormat = utils.convert(texture.format, texture.encoding);\n    const glType = utils.convert(texture.type);\n    const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n    const renderTargetProperties = properties.get(renderTarget);\n\n    if (!renderTargetProperties.__hasExternalTextures) {\n      if (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {\n        state.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);\n      } else {\n        state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n      }\n    }\n\n    state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n    if (useMultisampledRTT(renderTarget)) {\n      multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0, getRenderTargetSamples(renderTarget));\n    } else if (textureTarget === _gl.TEXTURE_2D || textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z) {\n      // see #24753\n      _gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0);\n    }\n\n    state.bindFramebuffer(_gl.FRAMEBUFFER, null);\n  } // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\n\n  function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {\n    _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);\n\n    if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n      let glInternalFormat = _gl.DEPTH_COMPONENT16;\n\n      if (isMultisample || useMultisampledRTT(renderTarget)) {\n        const depthTexture = renderTarget.depthTexture;\n\n        if (depthTexture && depthTexture.isDepthTexture) {\n          if (depthTexture.type === _constants.FloatType) {\n            glInternalFormat = _gl.DEPTH_COMPONENT32F;\n          } else if (depthTexture.type === _constants.UnsignedIntType) {\n            glInternalFormat = _gl.DEPTH_COMPONENT24;\n          }\n        }\n\n        const samples = getRenderTargetSamples(renderTarget);\n\n        if (useMultisampledRTT(renderTarget)) {\n          multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n        } else {\n          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n        }\n      } else {\n        _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n      }\n\n      _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n    } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n      const samples = getRenderTargetSamples(renderTarget);\n\n      if (isMultisample && useMultisampledRTT(renderTarget) === false) {\n        _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);\n      } else if (useMultisampledRTT(renderTarget)) {\n        multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);\n      } else {\n        _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);\n      }\n\n      _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n    } else {\n      const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];\n\n      for (let i = 0; i < textures.length; i++) {\n        const texture = textures[i];\n        const glFormat = utils.convert(texture.format, texture.encoding);\n        const glType = utils.convert(texture.type);\n        const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);\n        const samples = getRenderTargetSamples(renderTarget);\n\n        if (isMultisample && useMultisampledRTT(renderTarget) === false) {\n          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n        } else if (useMultisampledRTT(renderTarget)) {\n          multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n        } else {\n          _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n        }\n      }\n    }\n\n    _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n  } // Setup resources for a Depth Texture for a FBO (needs an extension)\n\n\n  function setupDepthTexture(framebuffer, renderTarget) {\n    const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;\n    if (isCube) throw new Error('Depth Texture with cube render targets is not supported');\n    state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n    if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {\n      throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n    } // upload an empty depth texture with framebuffer size\n\n\n    if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {\n      renderTarget.depthTexture.image.width = renderTarget.width;\n      renderTarget.depthTexture.image.height = renderTarget.height;\n      renderTarget.depthTexture.needsUpdate = true;\n    }\n\n    setTexture2D(renderTarget.depthTexture, 0);\n\n    const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\n\n    const samples = getRenderTargetSamples(renderTarget);\n\n    if (renderTarget.depthTexture.format === _constants.DepthFormat) {\n      if (useMultisampledRTT(renderTarget)) {\n        multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);\n      } else {\n        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n      }\n    } else if (renderTarget.depthTexture.format === _constants.DepthStencilFormat) {\n      if (useMultisampledRTT(renderTarget)) {\n        multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);\n      } else {\n        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n      }\n    } else {\n      throw new Error('Unknown depthTexture format');\n    }\n  } // Setup GL resources for a non-texture depth buffer\n\n\n  function setupDepthRenderbuffer(renderTarget) {\n    const renderTargetProperties = properties.get(renderTarget);\n    const isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\n    if (renderTarget.depthTexture && !renderTargetProperties.__autoAllocateDepthBuffer) {\n      if (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\n      setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n    } else {\n      if (isCube) {\n        renderTargetProperties.__webglDepthbuffer = [];\n\n        for (let i = 0; i < 6; i++) {\n          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);\n          renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n          setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);\n        }\n      } else {\n        state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n        renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n        setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);\n      }\n    }\n\n    state.bindFramebuffer(_gl.FRAMEBUFFER, null);\n  } // rebind framebuffer with external textures\n\n\n  function rebindTextures(renderTarget, colorTexture, depthTexture) {\n    const renderTargetProperties = properties.get(renderTarget);\n\n    if (colorTexture !== undefined) {\n      setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D);\n    }\n\n    if (depthTexture !== undefined) {\n      setupDepthRenderbuffer(renderTarget);\n    }\n  } // Set up GL resources for the render target\n\n\n  function setupRenderTarget(renderTarget) {\n    const texture = renderTarget.texture;\n    const renderTargetProperties = properties.get(renderTarget);\n    const textureProperties = properties.get(texture);\n    renderTarget.addEventListener('dispose', onRenderTargetDispose);\n\n    if (renderTarget.isWebGLMultipleRenderTargets !== true) {\n      if (textureProperties.__webglTexture === undefined) {\n        textureProperties.__webglTexture = _gl.createTexture();\n      }\n\n      textureProperties.__version = texture.version;\n      info.memory.textures++;\n    }\n\n    const isCube = renderTarget.isWebGLCubeRenderTarget === true;\n    const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;\n    const supportsMips = isPowerOfTwo(renderTarget) || isWebGL2; // Setup framebuffer\n\n    if (isCube) {\n      renderTargetProperties.__webglFramebuffer = [];\n\n      for (let i = 0; i < 6; i++) {\n        renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n      }\n    } else {\n      renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n      if (isMultipleRenderTargets) {\n        if (capabilities.drawBuffers) {\n          const textures = renderTarget.texture;\n\n          for (let i = 0, il = textures.length; i < il; i++) {\n            const attachmentProperties = properties.get(textures[i]);\n\n            if (attachmentProperties.__webglTexture === undefined) {\n              attachmentProperties.__webglTexture = _gl.createTexture();\n              info.memory.textures++;\n            }\n          }\n        } else {\n          console.warn('THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.');\n        }\n      }\n\n      if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {\n        const textures = isMultipleRenderTargets ? texture : [texture];\n        renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n        renderTargetProperties.__webglColorRenderbuffer = [];\n        state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\n        for (let i = 0; i < textures.length; i++) {\n          const texture = textures[i];\n          renderTargetProperties.__webglColorRenderbuffer[i] = _gl.createRenderbuffer();\n\n          _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);\n\n          const glFormat = utils.convert(texture.format, texture.encoding);\n          const glType = utils.convert(texture.type);\n          const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding, renderTarget.isXRRenderTarget === true);\n          const samples = getRenderTargetSamples(renderTarget);\n\n          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\n          _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);\n        }\n\n        _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n\n        if (renderTarget.depthBuffer) {\n          renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n          setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);\n        }\n\n        state.bindFramebuffer(_gl.FRAMEBUFFER, null);\n      }\n    } // Setup color buffer\n\n\n    if (isCube) {\n      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n      setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n\n      for (let i = 0; i < 6; i++) {\n        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);\n      }\n\n      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n        generateMipmap(_gl.TEXTURE_CUBE_MAP);\n      }\n\n      state.unbindTexture();\n    } else if (isMultipleRenderTargets) {\n      const textures = renderTarget.texture;\n\n      for (let i = 0, il = textures.length; i < il; i++) {\n        const attachment = textures[i];\n        const attachmentProperties = properties.get(attachment);\n        state.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);\n        setTextureParameters(_gl.TEXTURE_2D, attachment, supportsMips);\n        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D);\n\n        if (textureNeedsGenerateMipmaps(attachment, supportsMips)) {\n          generateMipmap(_gl.TEXTURE_2D);\n        }\n      }\n\n      state.unbindTexture();\n    } else {\n      let glTextureType = _gl.TEXTURE_2D;\n\n      if (renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget) {\n        if (isWebGL2) {\n          glTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;\n        } else {\n          console.error('THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.');\n        }\n      }\n\n      state.bindTexture(glTextureType, textureProperties.__webglTexture);\n      setTextureParameters(glTextureType, texture, supportsMips);\n      setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType);\n\n      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n        generateMipmap(glTextureType);\n      }\n\n      state.unbindTexture();\n    } // Setup depth and stencil buffers\n\n\n    if (renderTarget.depthBuffer) {\n      setupDepthRenderbuffer(renderTarget);\n    }\n  }\n\n  function updateRenderTargetMipmap(renderTarget) {\n    const supportsMips = isPowerOfTwo(renderTarget) || isWebGL2;\n    const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];\n\n    for (let i = 0, il = textures.length; i < il; i++) {\n      const texture = textures[i];\n\n      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n        const target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\n        const webglTexture = properties.get(texture).__webglTexture;\n\n        state.bindTexture(target, webglTexture);\n        generateMipmap(target);\n        state.unbindTexture();\n      }\n    }\n  }\n\n  function updateMultisampleRenderTarget(renderTarget) {\n    if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {\n      const textures = renderTarget.isWebGLMultipleRenderTargets ? renderTarget.texture : [renderTarget.texture];\n      const width = renderTarget.width;\n      const height = renderTarget.height;\n      let mask = _gl.COLOR_BUFFER_BIT;\n      const invalidationArray = [];\n      const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\n      const renderTargetProperties = properties.get(renderTarget);\n      const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true; // If MRT we need to remove FBO attachments\n\n      if (isMultipleRenderTargets) {\n        for (let i = 0; i < textures.length; i++) {\n          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\n          _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null);\n\n          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\n          _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0);\n        }\n      }\n\n      state.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n      state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\n      for (let i = 0; i < textures.length; i++) {\n        invalidationArray.push(_gl.COLOR_ATTACHMENT0 + i);\n\n        if (renderTarget.depthBuffer) {\n          invalidationArray.push(depthStyle);\n        }\n\n        const ignoreDepthValues = renderTargetProperties.__ignoreDepthValues !== undefined ? renderTargetProperties.__ignoreDepthValues : false;\n\n        if (ignoreDepthValues === false) {\n          if (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;\n          if (renderTarget.stencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;\n        }\n\n        if (isMultipleRenderTargets) {\n          _gl.framebufferRenderbuffer(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);\n        }\n\n        if (ignoreDepthValues === true) {\n          _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, [depthStyle]);\n\n          _gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, [depthStyle]);\n        }\n\n        if (isMultipleRenderTargets) {\n          const webglTexture = properties.get(textures[i]).__webglTexture;\n\n          _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0);\n        }\n\n        _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);\n\n        if (supportsInvalidateFramebuffer) {\n          _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, invalidationArray);\n        }\n      }\n\n      state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);\n      state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null); // If MRT since pre-blit we removed the FBO we need to reconstruct the attachments\n\n      if (isMultipleRenderTargets) {\n        for (let i = 0; i < textures.length; i++) {\n          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\n          _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);\n\n          const webglTexture = properties.get(textures[i]).__webglTexture;\n\n          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\n          _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0);\n        }\n      }\n\n      state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n    }\n  }\n\n  function getRenderTargetSamples(renderTarget) {\n    return Math.min(maxSamples, renderTarget.samples);\n  }\n\n  function useMultisampledRTT(renderTarget) {\n    const renderTargetProperties = properties.get(renderTarget);\n    return isWebGL2 && renderTarget.samples > 0 && extensions.has('WEBGL_multisampled_render_to_texture') === true && renderTargetProperties.__useRenderToTexture !== false;\n  }\n\n  function updateVideoTexture(texture) {\n    const frame = info.render.frame; // Check the last frame we updated the VideoTexture\n\n    if (_videoTextures.get(texture) !== frame) {\n      _videoTextures.set(texture, frame);\n\n      texture.update();\n    }\n  }\n\n  function verifyColorSpace(texture, image) {\n    const encoding = texture.encoding;\n    const format = texture.format;\n    const type = texture.type;\n    if (texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _constants._SRGBAFormat) return image;\n\n    if (encoding !== _constants.LinearEncoding) {\n      // sRGB\n      if (encoding === _constants.sRGBEncoding) {\n        if (isWebGL2 === false) {\n          // in WebGL 1, try to use EXT_sRGB extension and unsized formats\n          if (extensions.has('EXT_sRGB') === true && format === _constants.RGBAFormat) {\n            texture.format = _constants._SRGBAFormat; // it's not possible to generate mips in WebGL 1 with this extension\n\n            texture.minFilter = _constants.LinearFilter;\n            texture.generateMipmaps = false;\n          } else {\n            // slow fallback (CPU decode)\n            image = _ImageUtils.ImageUtils.sRGBToLinear(image);\n          }\n        } else {\n          // in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format\n          if (format !== _constants.RGBAFormat || type !== _constants.UnsignedByteType) {\n            console.warn('THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.');\n          }\n        }\n      } else {\n        console.error('THREE.WebGLTextures: Unsupported texture encoding:', encoding);\n      }\n    }\n\n    return image;\n  } //\n\n\n  this.allocateTextureUnit = allocateTextureUnit;\n  this.resetTextureUnits = resetTextureUnits;\n  this.setTexture2D = setTexture2D;\n  this.setTexture2DArray = setTexture2DArray;\n  this.setTexture3D = setTexture3D;\n  this.setTextureCube = setTextureCube;\n  this.rebindTextures = rebindTextures;\n  this.setupRenderTarget = setupRenderTarget;\n  this.updateRenderTargetMipmap = updateRenderTargetMipmap;\n  this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n  this.setupDepthRenderbuffer = setupDepthRenderbuffer;\n  this.setupFrameBufferTexture = setupFrameBufferTexture;\n  this.useMultisampledRTT = useMultisampledRTT;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","Object","defineProperty","value","WebGLTextures","_gl","extensions","state","properties","capabilities","utils","info","resizeImage","image","needsPowerOfTwo","needsNewCanvas","maxSize","scale","width","height","Math","max","HTMLImageElement","HTMLCanvasElement","ImageBitmap","floor","canvas","MathUtils","floorPowerOfTwo","undefined","_canvas","useOffscreenCanvas","OffscreenCanvas","_utils","createElementNS","getContext","context","drawImage","console","warn","isPowerOfTwo","textureNeedsGenerateMipmaps","texture","supportsMips","generateMipmaps","minFilter","_constants","NearestFilter","LinearFilter","getInternalFormat","internalFormatName","glFormat","glType","encoding","forceLinearEncoding","isWebGL2","internalFormat","RED","FLOAT","R32F","HALF_FLOAT","R16F","UNSIGNED_BYTE","R8","RG","RG32F","RG16F","RG8","RGBA","RGBA32F","RGBA16F","sRGBEncoding","SRGB8_ALPHA8","RGBA8","UNSIGNED_SHORT_4_4_4_4","RGBA4","UNSIGNED_SHORT_5_5_5_1","RGB5_A1","get","getMipLevels","isFramebufferTexture","log2","mipmaps","length","isCompressedTexture","Array","isArray","filterFallback","f","NearestMipmapNearestFilter","NearestMipmapLinearFilter","NEAREST","LINEAR","onTextureDispose","event","target","removeEventListener","textureProperties","__webglInit","source","webglTextures","_sources","webglTexture","__cacheKey","usedTimes","deleteTexture","keys","delete","remove","isVideoTexture","_videoTextures","onRenderTargetDispose","renderTarget","renderTargetProperties","__webglTexture","memory","textures","depthTexture","dispose","isWebGLCubeRenderTarget","i","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","isWebGLMultipleRenderTargets","il","attachmentProperties","setTexture2D","slot","frame","render","set","update","isRenderTargetTexture","version","__version","complete","uploadTexture","bindTexture","TEXTURE_2D","TEXTURE0","setTextureParameters","textureType","texParameteri","TEXTURE_WRAP_S","wrappingToGL","wrapS","TEXTURE_WRAP_T","wrapT","TEXTURE_3D","TEXTURE_2D_ARRAY","TEXTURE_WRAP_R","wrapR","TEXTURE_MAG_FILTER","filterToGL","magFilter","TEXTURE_MIN_FILTER","CLAMP_TO_EDGE","ClampToEdgeWrapping","has","extension","LinearMipmapLinearFilter","type","FloatType","HalfFloatType","anisotropy","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","min","getMaxAnisotropy","initTexture","forceUpload","addEventListener","array","push","format","premultiplyAlpha","flipY","unpackAlignment","join","textureCacheKey","createTexture","isDataArrayTexture","isCompressedArrayTexture","isData3DTexture","sourceProperties","activeTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","UNPACK_COLORSPACE_CONVERSION_WEBGL","NONE","maxTextureSize","verifyColorSpace","convert","glInternalFormat","useTexStorage","allocateMemory","levels","isDepthTexture","DEPTH_COMPONENT","DEPTH_COMPONENT32F","UnsignedIntType","DEPTH_COMPONENT24","UnsignedInt248Type","DEPTH24_STENCIL8","DEPTH_COMPONENT16","error","DepthFormat","UnsignedShortType","DepthStencilFormat","DEPTH_STENCIL","texStorage2D","texImage2D","isDataTexture","mipmap","texSubImage2D","data","texStorage3D","depth","RGBAFormat","compressedTexSubImage3D","compressedTexImage3D","texSubImage3D","texImage3D","compressedTexSubImage2D","compressedTexImage2D","generateMipmap","onUpdate","setupFrameBufferTexture","framebuffer","attachment","textureTarget","__hasExternalTextures","bindFramebuffer","FRAMEBUFFER","useMultisampledRTT","multisampledRTTExt","framebufferTexture2DMultisampleEXT","getRenderTargetSamples","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_Z","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","RENDERBUFFER","depthBuffer","stencilBuffer","samples","renderbufferStorageMultisampleEXT","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","setupDepthRenderbuffer","isCube","__autoAllocateDepthBuffer","Error","needsUpdate","webglDepthTexture","createRenderbuffer","maxSamples","__useRenderToTexture","_SRGBAFormat","LinearEncoding","_ImageUtils","ImageUtils","sRGBToLinear","UnsignedByteType","maxTextures","maxCubemapSize","supportsInvalidateFramebuffer","navigator","test","userAgent","err","textureUnits","RepeatWrapping","REPEAT","MirroredRepeatWrapping","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LinearMipmapNearestFilter","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","allocateTextureUnit","textureUnit","resetTextureUnits","setTexture2DArray","setTexture3D","setTextureCube","TEXTURE_CUBE_MAP","isCompressed","cubeImage","j","mipmapImage","rebindTextures","colorTexture","COLOR_ATTACHMENT0","setupRenderTarget","isMultipleRenderTargets","createFramebuffer","drawBuffers","isXRRenderTarget","glTextureType","isWebGL3DRenderTarget","isWebGLArrayRenderTarget","unbindTexture","updateRenderTargetMipmap","updateMultisampleRenderTarget","mask","COLOR_BUFFER_BIT","invalidationArray","depthStyle","DRAW_FRAMEBUFFER","READ_FRAMEBUFFER","ignoreDepthValues","__ignoreDepthValues","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","invalidateFramebuffer","blitFramebuffer","_interopRequireWildcard","obj","__esModule","default","cache","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc"]
}
