{"version":3,"sources":["nextjournal/clerk/parser.cljc"],"mappings":"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","names":["nextjournal.clerk.parser/ns?","form","cljs.core/seq?","cljs.core._EQ_","cljs.core/first","nextjournal.clerk.parser/remove-leading-semicolons","s","clojure.string/replace","nextjournal.clerk.parser/legacy-doc-visibility","temp__5804__auto__","visibility","cljs.core/meta","visibility-set","cljs.core/Keyword","cljs.core/set?","or__5045__auto__","p1__64721#","cljs.core/some","cljs.core.get","nextjournal.clerk.parser/legacy-form-visibility","legacy-visibility","visibility-set'","G__64725","cljs.core.conj","cljs.core.merge","p1__64724#","G__64729","cljs.core/name","cljs.core/Symbol","nextjournal.clerk.parser/visibility-marker?","cljs.core/map?","cljs.core/contains?","nextjournal.clerk.parser/parse-visibility","visibility-map","and__5043__auto__","G__64736","cljs.core/PersistentHashMap","cljs.core/every?","cljs.core/keys","cljs.core/vals","cljs.core.ex_info","G__64738","cljs.core.assoc","nextjournal.clerk.parser/->visibility","G__64740","nextjournal.clerk.parser/get-doc-setting","key","G__64743","cljs.core/second","nextjournal.clerk.parser/->doc-visibility","nextjournal.clerk.parser/parse-error-on-missing-vars","first-form","temp__5806__auto__","setting","fexpr__64755","cljs.core.pr_str","nextjournal.clerk.parser/->doc-settings","G__64780","fexpr__64779","cljs.core.filter","p__64797","map__64798","cljs.core/--destructure-map","nextjournal.clerk.parser/->open-graph","title","blocks","cljs.core.sequence","cljs.core.comp","cljs.core.keep","cljs.core.mapcat","cljs.core.map","nextjournal.markdown.transform/->text","p1__64796#","nextjournal.clerk.parser/add-open-graph-metadata","doc","p__64800","map__64801","nextjournal.clerk.parser/add-auto-expand-results","p__64802","map__64803","p__64807","map__64808","nextjournal.clerk.parser/add-css-class","p__64809","map__64810","p__64814","map__64815","nextjournal.clerk.parser/markdown?","block","type","p__64816","map__64817","nextjournal.clerk.parser/code?","p__64818","map__64819","nextjournal.clerk.parser/add-block-visibility","analyzed-doc","cljs.core.reduce","p__64820","p__64821","map__64822","map__64823","state","visibility'","G__64824","cljs.core.update","cljs.core/conj","G__64825","cljs.core.dissoc","nextjournal.clerk.parser/code-tags","nextjournal.clerk.parser/whitespace-on-line-tags","nextjournal.clerk.parser/markdown-context","nextjournal.markdown.parser/empty-doc","cljs.core.partial","cljs.core/map","nextjournal.markdown.parser/normalize-tokenizer","nextjournal.clerk.parser/parse-markdown","ctx","md","nextjournal.markdown.parser/apply-tokens","nextjournal.markdown/tokenize","p__64826","map__64827","nextjournal.clerk.parser/update-markdown-blocks","md-context","map__64828","vec__64829","cljs.core.nth","path","_","index","cljs.core/select-keys","cljs.core/subvec","var_args","G__64833","nextjournal.clerk.parser/parse-clojure-string","js/Error","p__64834","map__64835","p__64837","map__64838","nextjournal.clerk.parser.parse_clojure_string","opts","doc?","G__64836","_opts","initial-state","G__64840","map__64841","map__64863","nodes","add-comment-on-line?","rewrite-clj.parser/parse-string-all","temp__5802__auto__","node","G__64865","rewrite-clj.node/tag","cljs.core/rest","rewrite-clj.node/string","clojure.set/rename-keys","G__64867","rewrite-clj.node/comment?","cljs.core.update_in","cljs.core/count","cljs.core/str","clojure.string/trim-newline","cljs.core.drop_while","cljs.core.some_fn","rewrite-clj.node/linebreak?","cljs.core.apply","cljs.core.take_while","p__64871","map__64872","nextjournal.clerk.parser/parse-markdown-cell","p__64879","map__64880","nextjournal.clerk.parser/parse-markdown-string","map__64881","content","toc","G__64883","map__64884","map__64892","md-slice","p1__64875#","G__64894","cljs.core/seq","G__64895","p1__64876#","G__64893"],"sourcesContent":["(ns nextjournal.clerk.parser\n  \"Clerk's Parser turns Clojure & Markdown files and strings into Clerk documents.\"\n  (:require [clojure.set :as set]\n            [clojure.string :as str]\n            [nextjournal.markdown :as markdown]\n            [nextjournal.markdown.parser :as markdown.parser]\n            [nextjournal.markdown.transform :as markdown.transform]\n            [rewrite-clj.node :as n]\n            [rewrite-clj.parser :as p]))\n\n(defn ns? [form]\n  (and (seq? form) (= 'ns (first form))))\n\n(defn remove-leading-semicolons [s]\n  (str/replace s #\"^[;]+\" \"\"))\n\n\n(defn ^:private legacy-doc-visibility [form]\n  (when-let [visibility (-> form meta :nextjournal.clerk/visibility)]\n    (when-let [visibility-set (cond\n                                (keyword? visibility) #{visibility}\n                                (set? visibility) visibility)]\n      {:code (or (some #(get visibility-set %) [:hide :fold]) :show)})))\n\n#_(legacy-doc-visibility '^{:nextjournal.clerk/visibility :hide-ns} (ns foo))\n#_(legacy-doc-visibility '^{:nextjournal.clerk/visibility :fold} (ns foo))\n#_(legacy-doc-visibility '^{:nextjournal.clerk/visibility :hide} (ns foo))\n\n(defn ^:private legacy-form-visibility [form visibility]\n  (when-let [legacy-visibility (cond\n                                 (keyword? visibility) #{visibility}\n                                 (set? visibility) visibility)]\n    (let [visibility-set' (cond-> legacy-visibility\n                            (:hide-ns legacy-visibility) (conj legacy-visibility :hide))]\n      (merge {:code (or (some #(get visibility-set' %) [:hide :fold]) :show)}\n             (when (or (some-> form meta :nextjournal.clerk/viewer name (= \"hide-result\"))\n                       (and (seq? form) (symbol? (first form)) (= \"hide-result\" (name (first form)))))\n               {:result :hide})))))\n\n#_(legacy-form-visibility '^{:nextjournal.clerk/visibility :hide-ns} (ns foo) :hide-ns)\n#_(legacy-form-visibility '^{:nextjournal.clerk/visibility :fold} (ns foo) :fold)\n#_(legacy-form-visibility '^{:nextjournal.clerk/visibility :hide} (ns foo) :hide)\n#_(legacy-form-visibility '^{:nextjournal.clerk/visibility :show :nextjournal.clerk/viewer :hide-result} (def my-range (range 600)) :show)\n#_(legacy-form-visibility '^{:nextjournal.clerk/visibility :show :nextjournal.clerk/viewer nextjournal.clerk/hide-result} (def my-range (range 500)) :show)\n\n(defn visibility-marker? [form]\n  (and (map? form) (contains? form :nextjournal.clerk/visibility)))\n\n(defn parse-visibility [form visibility]\n  (or (legacy-form-visibility form visibility) ;; TODO: drop legacy visibiliy support before 1.0\n      (when-let [visibility-map (and visibility (cond->> visibility (not (map? visibility)) (hash-map :code)))]\n        (when-not (and (every? #{:code :result} (keys visibility-map))\n                       (every? #{:hide :show :fold} (vals visibility-map)))\n          (throw (ex-info \"Invalid `:nextjournal.clerk/visibility`, please pass a map with `:code` and `:result` keys, allowed values are `:hide`, `:show` and `:fold`.\"\n                          (cond-> {:visibility visibility}\n                            form (assoc :form form)))))\n        visibility-map)))\n\n#_(parse-visibility nil nil)\n#_(parse-visibility nil {:code :fold :result :hide})\n\n(defn ->visibility [form]\n  (if (visibility-marker? form)\n    {:code :hide :result :hide}\n    (cond-> (parse-visibility form (-> form meta :nextjournal.clerk/visibility))\n      (ns? form) (merge {:result :hide}))))\n\n#_(->visibility (quote ^{:nextjournal.clerk/visibility :fold} (ns foo)))\n#_(->visibility '(foo :bar))\n#_(->visibility (quote (ns foo {:nextjournal.clerk/visibility {:code :fold :result :hide}})))\n#_(->visibility (quote ^{:nextjournal.clerk/visibility {:code :fold :result :hide}} (ns foo)))\n#_(->visibility (quote ^{:nextjournal.clerk/visibility :hidden} (ns foo)))\n#_(->visibility (quote ^{:nextjournal.clerk/visibility \"bam\"} (ns foo)))\n#_(->visibility (quote ^{:nextjournal.clerk/visibility #{:hide-ns}} (do :foo)))\n\n(defn get-doc-setting [form key]\n  (or (when (ns? form) (or (some key form)\n                           (-> form second meta key)))\n      (when (map? form) (get form key))))\n\n(defn ->doc-visibility [form]\n  (cond\n    ;; TODO: drop legacy visibility support before 1.0\n    (and (ns? form) (legacy-doc-visibility form))\n    (legacy-doc-visibility form)\n\n    (or (ns? form) (visibility-marker? form))\n    (parse-visibility form (get-doc-setting form :nextjournal.clerk/visibility))))\n\n#_(->doc-visibility '(ns foo \"my docs\" {:nextjournal.clerk/visibility {:code :fold :result :hide}}))\n#_(->doc-visibility '{:nextjournal.clerk/visibility {:code :fold}})\n#_(->doc-visibility '(ns foo \"my docs\" {}))\n#_(->doc-visibility '(ns ^{:nextjournal.clerk/visibility {:code :fold :result :hide}} foo))\n#_(->doc-visibility '(ns ^{:nextjournal.clerk/visibility {:code :fold}} foo\n                       {:nextjournal.clerk/visibility {:result :hide}}))\n\n(defn parse-error-on-missing-vars [first-form]\n  (if-some [setting (when (ns? first-form)\n                      (get-doc-setting first-form :nextjournal.clerk/error-on-missing-vars))]\n    (do (when-not (#{:on :off} setting)\n          (throw (ex-info (str \"Invalid setting `\" (pr-str setting) \"` for `:nextjournal.clerk/error-on-missing-vars`. Valid values are `:on` and `:off`.\")\n                          {:nextjournal.clerk/error-on-missing-vars setting})))\n        setting)\n    (if (ns? first-form) :on :off)))\n\n(defn ->doc-settings [first-form]\n  {:ns? (ns? first-form)\n   :error-on-missing-vars (parse-error-on-missing-vars first-form)\n   :toc-visibility (or (#{true :collapsed} (:nextjournal.clerk/toc\n                                            (merge (-> first-form meta) ;; TODO: deprecate\n                                                   (when (ns? first-form)\n                                                     (merge (-> first-form second meta)\n                                                            (first (filter map? first-form)))))))\n                       false)})\n\n(defn ->open-graph [{:keys [title blocks]}]\n  (merge {:type \"article:clerk\"\n          :title title\n          :description (first (sequence\n                               (comp (keep :doc)\n                                     (mapcat :content)\n                                     (filter (comp #{:paragraph} :type))\n                                     (map markdown.transform/->text)) blocks))}\n         (some #(get-doc-setting (:form %) :nextjournal.clerk/open-graph) blocks)))\n\n#_(->open-graph\n   (nextjournal.clerk.analyzer/analyze-doc\n    (parse-file {:doc? true} \"notebooks/open_graph.clj\")))\n\n(defn add-open-graph-metadata [doc] (assoc doc :open-graph (->open-graph doc)))\n\n;; TODO: Unify with get-doc-settings\n(defn add-auto-expand-results [{:as doc :keys [blocks]}]\n  (assoc doc :auto-expand-results? (some (fn [{:keys [form]}]\n                                           (when (ns? form) (some :nextjournal.clerk/auto-expand-results? form)))\n                                         blocks)))\n\n(defn add-css-class [{:as doc :keys [blocks]}]\n  (assoc doc :css-class (some (fn [{:keys [form]}]\n                                (when (ns? form) (some :nextjournal.clerk/css-class form)))\n                              blocks)))\n\n#_(->doc-settings '^{:nextjournal.clerk/toc :boom} (ns foo)) ;; TODO: error\n\n(defn markdown? [{:as block :keys [type]}]\n  (contains? #{:markdown} type))\n\n(defn code? [{:as block :keys [type]}]\n  (contains? #{:code} type))\n\n(defn add-block-visibility [{:as analyzed-doc :keys [blocks]}]\n  (-> (reduce (fn [{:as state :keys [visibility]} {:as block :keys [form]}]\n                (let [visibility' (merge visibility (->doc-visibility form))]\n                  (cond-> (-> state\n                              (update :blocks conj (cond-> block\n                                                     (code? block) (assoc :visibility (merge visibility' (->visibility form))))))\n                    (code? block) (assoc :visibility visibility'))))\n              (assoc analyzed-doc :blocks [] :visibility {:code :show :result :show})\n              blocks)\n      (dissoc :visibility)))\n\n(def code-tags\n  #{:deref :map :meta :list :quote :syntax-quote :reader-macro :set :token :var :vector})\n\n(def whitespace-on-line-tags\n  #{:comment :whitespace :comma})\n\n(defn markdown-context []\n  (update markdown.parser/empty-doc\n          :text-tokenizers (partial map markdown.parser/normalize-tokenizer)))\n\n#_(markdown-context)\n\n(defn parse-markdown\n  \"Like `n.markdown.parser/parse` but allows to reuse the same context in successive calls\"\n  [ctx md]\n  (markdown.parser/apply-tokens ctx (markdown/tokenize md)))\n\n(defn update-markdown-blocks [{:as state :keys [md-context]} md]\n  (let [{::markdown.parser/keys [path]} md-context\n        doc (parse-markdown md-context md)\n        [_ index] path]\n    (-> state\n        (assoc :md-context doc)\n        (update :blocks conj {:type :markdown\n                              :doc (-> doc\n                                       (select-keys [:type :content])\n                                       ;; take only new nodes, keep context intact\n                                       (update :content subvec (inc index)))}))))\n\n(defn parse-clojure-string\n  ([s] (parse-clojure-string {} s))\n  ([{:as opts :keys [doc?]} s]\n   (let [doc (parse-clojure-string opts {:blocks [] :md-context (markdown-context)} s)]\n     (select-keys (cond-> doc doc? (merge (:md-context doc)))\n                  [:blocks :title :toc])))\n  ([{:as _opts :keys [doc?]} initial-state s]\n   (loop [{:as state :keys [nodes blocks add-comment-on-line?]} (assoc initial-state :nodes (:children (p/parse-string-all s)))]\n     (if-let [node (first nodes)]\n       (recur (cond\n                (code-tags (n/tag node))\n                (-> state\n                    (assoc :add-comment-on-line? true)\n                    (update :nodes rest)\n                    (update :blocks conj {:type :code\n                                          :text (n/string node)\n                                          :loc (-> (meta node)\n                                                   (set/rename-keys {:row :line\n                                                                     :col :column})\n                                                   (select-keys [:line :column]))}))\n\n                (and add-comment-on-line? (whitespace-on-line-tags (n/tag node)))\n                (-> state\n                    (assoc :add-comment-on-line? (not (n/comment? node)))\n                    (update :nodes rest)\n                    (update-in [:blocks (dec (count blocks)) :text] str (-> node n/string str/trim-newline)))\n\n                (and doc? (n/comment? node))\n                (-> state\n                    (assoc :add-comment-on-line? false)\n                    (assoc :nodes (drop-while (some-fn n/comment? n/linebreak?) nodes))\n                    (update-markdown-blocks (apply str (map (comp remove-leading-semicolons n/string)\n                                                            (take-while (some-fn n/comment? n/linebreak?) nodes)))))\n                :else\n                (-> state\n                    (assoc :add-comment-on-line? false)\n                    (update :nodes rest))))\n       state))))\n\n#_(parse-clojure-string {:doc? true} \"'code ;; foo\\n;; bar\")\n#_(parse-clojure-string \"'code , ;; foo\\n;; bar\")\n#_(parse-clojure-string \"'code\\n;; foo\\n;; bar\")\n#_(keys (parse-clojure-string {:doc? true} (slurp \"notebooks/viewer_api.clj\")))\n#_(parse-clojure-string {:doc? true} \";; # Hello\\n;; ## \ud83d\udc4b Section\\n(do 123)\\n;; ## \ud83e\udd1a\ud83c\udffd Section\")\n\n(defn parse-markdown-cell [{:as state :keys [nodes]} opts]\n  (assoc (parse-clojure-string opts state (markdown.transform/->text (first nodes)))\n         :nodes (rest nodes)\n         ::md-slice []))\n\n(defn parse-markdown-string [{:as opts :keys [doc?]} s]\n  (let [{:as ctx :keys [content toc title]} (parse-markdown (markdown-context) s)]\n    (loop [{:as state :keys [nodes] ::keys [md-slice]} {:blocks [] ::md-slice [] :nodes content :md-context ctx}]\n      (if-some [node (first nodes)]\n        (recur\n         (if (and (code? node) (contains? node :info))\n           (-> state\n               (update :blocks #(cond-> % (seq md-slice) (conj {:type :markdown :doc {:type :doc :content md-slice}})))\n               (parse-markdown-cell opts))\n           (-> state (update :nodes rest) (cond-> doc? (update ::md-slice conj node)))))\n\n        (-> state\n            (update :blocks #(cond-> % (seq md-slice) (conj {:type :markdown :doc {:type :doc :content md-slice}})))\n            (select-keys [:blocks :visibility])\n            (merge (when doc? {:title title :toc toc})))))))\n\n#_(parse-markdown-string {:doc? true} \"# Hello\\n```\\n1\\n;; # 1\ufe0f\u20e3 Hello\\n2\\n\\n```\\nhey\\n```\\n3\\n;; # 2\ufe0f\u20e3 Hello\\n4\\n```\\n\")\n\n#?(:clj\n   (defn parse-file\n     ([file] (parse-file {} file))\n     ([opts file] (-> (if (str/ends-with? file \".md\")\n                        (parse-markdown-string opts (slurp file))\n                        (parse-clojure-string opts (slurp file)))\n                      (assoc :file file)))))\n\n#_(parse-file {:doc? true} \"notebooks/visibility.clj\")\n#_(parse-file \"notebooks/visibility.clj\")\n#_(parse-file \"notebooks/elements.clj\")\n#_(parse-file \"notebooks/markdown.md\")\n#_(parse-file {:doc? true} \"notebooks/rule_30.clj\")\n#_(parse-file \"notebooks/src/demo/lib.cljc\")\n"]}