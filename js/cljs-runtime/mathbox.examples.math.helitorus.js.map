{"version":3,"sources":["mathbox/examples/math/helitorus.cljc"],"mappings":";;;;AAkDA,AAUA,AAaA,AA2DA,AAmEA,AACC,wCAAA,xCAAMgB,wFAAOC,IAAIC,EAAEC,EAAEC,EAAEC;AAAvB,AAYE,IAAMC,eAAQ,CAAGF,IAAEC;IACbE,KAAG,CAAGL,IAAE,CAAGC,IAAE,AAACK,SAASF;AAD7B,AAEE,IAAAG,WAAMR;AAAN,AAAA,AAAAQ,aACQ,CAAGF,KAAG,AAACC,SAASH,QAChB,CAAGE,KAAG,AAACG,SAASL,QAChB,CAAGF,IAAG,AAACO,SAASJ;;AAHxBG;;;AA0BJ,iDAAA,jDAAMO,0GAAgBf,IAAII;AAA1B,AACE,IAAAY,WAAMhB;AAAN,AAAA,AAAAgB,iDAAA,pCACQ,GAAG,AAACP,SAASL,QACb,AAACG,SAASH;;AAFlBY;;;AA1CH,IAAAjC,yBAAA;AAAA,AAoBC,cAAA,VAAM2B;IACAC,cAAM,CAAA,MAAOD;AADnB,AAGE,gDAAA,hDAAME,wGAAeZ,IAAIC,EAAEC,EAAEC,EAAEU;AAA/B,AACE,IAAAC,WAAMd;AAAN,AAAA,AAAAc,aAGG,CAAG,CAAG,AAACL,SAASI,KAAG,GAAG,CAAGZ,IAAE,CAAGC,IAAE,AAACK,SAAS,CAAGJ,IAAEU,UAC5C,CAAA,CAAA,CAAGV,IAAED,KAAE,AAACK,SAASM,MAAG,AAACJ,SAAS,CAAGN,IAAEU,MAEtC,CAAG,CAAG,AAACN,SAASM,KAAG,CAAGZ,IAAE,CAAGC,IAAE,AAACK,SAAS,CAAGJ,IAAEU,SACzC,CAAA,CAAA,CAAGV,IAAED,KAAE,AAACO,SAASI,MAAG,AAACJ,SAAS,CAAGN,IAAEU,MACtC,CAAA,CAAGV,IAAED,KAAE,AAACK,SAAS,CAAGJ,IAAEU;;AARzBC;;;AAuBJ,IAAMG,WAAG,KAAAC;AAAT,AACE;;;2CAAA,3CAAMC,8FAEHnB,IAAIoB,EAAEP,EAAEQ;AAFX,AAGE,IAAAC,iBAAML;AAAN,AAAA,AAAAK,4BACiBF,EAAEP;;AADnB,AAAAS;;AAAAA;AAKA,IAAAC,iBAAUV;AAAV,AAAA,AAAAU,4BACiBH,EAAEH;;AADnB,AAAAM;;AAAAA;AAKA,IAAAC,WAAMxB;AAAN,AAAA,AAAAwB,gHAAA,IAAA,IAAA,IAAA,/GAEG,AAAKJ,IAAG,AAAKP,IAAG,AAAKI,WAAI,AAAKI,cAC9B,AAAKD,IAAG,AAAKP,IAAG,AAAKI,WAAI,AAAKI,cAC9B,AAAKD,IAAG,AAAKP,IAAG,AAAKI,WAAI,AAAKI;;AAJjCG;;;AAOJ,IAAMC,KAAM,KAAAP;IACNQ,KAAM,KAAAR;IACNS,KAAM,KAAAT;IACNU,OAAK,KAAAC;AAHX,AAIE;;;;sCAAA,tCAAMC,oFAGH3B,EAAEF,EAAEC,EAAEE;AAHT,AAQE,AAACL,sCAAM0B,GAAGxB,EAAEC,EAAEC,EAAEC;;AAGhB,AAACQ,8CAAcc,GAAGzB,EAAEC,EAAEC,EAAEC;;AAIxB,AAACW,+CAAeY,GAAGvB;;AAGnB,OAACe,yCAAMS,KAAKF,GAAGC,GAAGF;;;AAGpB,IAAMM,WAAG,KAAAb;AAAT,AACE;;;4CAAA,mEAAAc,/GAAMI,gGAEHC,KAAKjC,MAAMkC;AAFd,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;QAAA,AAAAE,4CAAAF,eAAA,/DAE0B9B;SAF1B,AAAAgC,4CAAAF,eAAA,hEAE4BM;SAF5B,AAAAJ,4CAAAF,eAAA,hEAE+BO;SAF/B,AAAAL,4CAAAF,eAAA,hEAEkCQ;AAFlC,AAGE,IAAMvC,IAAE,CAAGsC,KAAGC;IACRC,IAAE,AAACZ,oCAAI3B,EAAEoC,GAAGrC,EAAEE;AADpB,AAIE,IAAAuC,iBAAMZ;AAAN,AAAA,AAAAY,mBAAA,IAEQ,CAAGF,KAAG,AAAClC,SAAS+B,MAEhB,CAAGG,KAAG,AAAChC,SAAS6B;;AAJxB,AAAAK,4BAKiBD;;AALjBC;AAMA,IAAAC,WAAM,AAAKb;IAAXc,WACM,AAAKd;IADXe,WAEM,AAAKf;AAFX,AAAA,gFAAAa,SAAAC,SAAAC,2BAAAF,SAAAC,SAAAC,vIAACT,qCAAAA,iEAAAA;;;AAIP,AAAKU,2CACH,KAAAC,SAAA,OAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA;;AAgCF,wCAAA,xCAAMC,wFACHZ,KAAKa,OAAOC,OAAOC,OAAOC,OAAOC,OAAOC;AAD3C,AAEE,IACKC,oBACA,CAAGH,SAAOC;IACVG,oBACA,AAAChD,SAAS6C;IACVI,oBACA,AAACjD,SAAS8C;IACVI,oBACA,CAAGR,SAAOC;IACVQ,oBACA,AAACrD,SAASgD;IACVM,oBACA,AAACtD,SAAS+C;IACVQ,oBACA,AAACvD,SAASiD;IACVO,oBACA,AAACtD,SAAS+C;IACVQ,oBACA,GAAGP;IACHQ,oBACA,CAAGN,oBAAkBG;IACrBI,oBACA,GAAGH;IACHI,oBACA,CAAA,CAAA,CAAA,CAAA,0CAAA,zCACCN,oBACAF,6BAEAG,qBACAT,UACAA;IACDe,oBACA,CAAA,CAAA,CAAA,CAAA,CACCT,oBACAG,qBACAT,UACAM,qBACAG,qBACAT;IACDgB,oBACA,CAAA,CAAA,CAAA,CAAA,0CAAA,zCACCZ,oBACAE,6BAEAG,qBACAT,UACAA;IACDiB,oBACA,CAAA,CAAA,CACCb,oBACAE,qBACAO,qBACAb;IACDkB,oBACA,CAAA,CAAA,CACCZ,oBACAO,qBACAb,UACAQ;IACDW,oBACA,CAAA,CAAA,CACCb,oBACAO,qBACAb,UACAW;IACDS,oBACA,CAAA,CAAA,CACCZ,oBACAF,qBACAO,qBACAb;IACDqB,oBACA,CAAA,CAAA,CAAA,CAAA,CAAA,CACCf,oBACAG,qBACAT,UACAM,qBACAO,qBACAb,UACAA;IACDsB,oBACA,CAAA,CAAA,CACCX,oBACAL,qBACAO,qBACAb;IACDuB,oBACA,CAAG1B,SAAOe;IACVY,oBACA,CAAGD,oBAAkBf;IACrBiB,oBACA,CAAGF,oBAAkBZ;IACrBe,oBACA,CAAA,qBAAA,pBAAGH,4BAAuBf;IAC1BmB,oBACA,CAAA,CAAA,CACCb,oBACAQ,qBACAI,qBACAP;IACDS,oBACA,CAAGR,oBAAkBK;IACrBI,oBACA,CAAA,CAAA,CACCb,oBACAI,qBACAK,qBACAP;IACDY,oBACA,CAAGb,oBAAkBO;IACrBO,oBACA,CAAGD,oBAAkBD;IACrBG,oBACA,CAAGJ,oBAAkBD;IACrBM,oBACA,CAAGH,oBAAkBA;IACrBI,oBACA,CAAGN,oBAAkBA;IACrBO,oBACA,CAAA,CAAA,CAAA,CAAA,CACCH,oBACAA,qBACAD,qBACAA,qBACAV,qBACAA;IACDe,oBACA,CAAA,CAAGF,oBAAkBD,qBAAkBlB;IACvCsB,oBACA,CAAA,OAAQD;IACRE,oBACA,AAACC,UAAUH;IACXI,oBACA,qBAAA,pBAAGF;IACHG,oBACA,CAAA,MAAOH;IACPI,oBACA,CAAA,MAAOF;IACPG,oBACA,CAAGF,oBAAkBZ;IACrBe,oBACA,CAAGH,oBAAkBd;IACrBkB,oBACA,CAAA,CAAA,CAAA,CACCJ,oBACAnC,qBACAO,qBACAb,UACAA;IACD8C,oBACA,CAAA,CAAA,CAAA,CAAA,CACCxC,oBACAG,qBACAT,UACAqC,qBACAK,qBACAP;IACDY,oBACA,CAAA,CAAA,CACCjB,oBACAO,qBACAK,qBACAP;IACDa,oBACA,CAAA,CAAA,CACCpB,oBACAS,qBACAK,qBACAP;IACDc,oBACA,CAAGJ,oBAAkBC;IACrBI,oBACA,CAAGP,oBAAkBI;IACrBI,oBACA,CAAGP,oBAAkBI;IACrBI,oBACA,CAAGF,oBAAkBA;IACrBG,oBACA,CAAGF,oBAAkBA;IACrBG,oBACA,CAAGL,oBAAkBA;IACrBM,oBACA,CAAA,CAAGF,oBAAkBD,qBAAkBE;IACvCE,oBACA,AAACjB,UAAUgB;IACXE,oBACA,CAAA,MAAOD;AA1LZ,AA2LE,IAAAE,WACC,CAAA,CACClC,oBACA,CAAA,CACC,CACC,CAAA,CAAA,CACCM,oBACAW,qBACAQ,qBACAQ,qBACD,CAAA,CAAA,CAAA,CAAA,CACCnD,oBACAG,qBACAT,UACAyC,qBACAS,qBACAO,sBACF1D,UACAQ,sBACD,CAAA,CAAA,CACC4C,oBACAM,qBACA1D,UACAM;IAvBHsD,WAwBC,CAAA,CACC,CAAGpC,oBAAkBnB,qBACrB,CAAA,CACC,CACC,CAAA,CAAA,CAAA,CAAA,CACCE,oBACAG,qBACAT,UACAyC,qBACAU,qBACAM,qBACD,CAAA,CAAA,CACC7B,oBACAa,qBACAQ,qBACAQ,sBACF1D,UACAQ,sBACD,CAAA,CAAA,CACC2C,oBACAO,qBACA1D,UACAM;IA9CHuD,WA+CC,CAAA,CACC,CAAGtD,oBAAkBI,qBACrB,CAAA,CACC,CACC,CAAA,CAAA,CACCkB,oBACAa,qBACAS,qBACAO,qBACD,CAAA,CAAA,CACC3B,oBACAW,qBACAU,qBACAM,sBACF1D,UACAQ,sBACD,CAAA,CAAA,CACC0C,oBACAQ,qBACA1D,UACAM;AAnEH,AAAA,gFAAAqD,SAAAC,SAAAC,2BAAAF,SAAAC,SAAAC,vIAAC5E,qCAAAA,iEAAAA;;;AAqEL;uCAAA,vCAAM6E,sFAAM7E,KAAK8E,OAAOC,OAAOC,OAAOC,OAAOC,OAAOC;AAApD,AACE,IACKC,oBACA,gBAAA,hBAACC,SAASJ;IACVK,oBACA,AAAClH,SAAS8G;IACVK,oBACA,gBAAA,hBAACF,SAASP;IACVU,oBACA,gBAAA,hBAACH,SAASL;IACVS,oBACA,CAAGR,SAAOC;IACVQ,oBACA,AAACxH,SAASgH;IACVS,oBACA,AAACvH,SAAS+G;IACVS,oBACA,gBAAA,hBAACP,SAASN;IACVc,oBACA,AAAC3H,SAASiH;IACVW,oBACA,CAAA,CAAA,CAAA,MAAOf,UAAOC,UAAOI;IACrBW,oBACA,CAAGP,oBAAkBJ;IACrBY,oBACA,AAAC5H,SAASqH;IACVQ,oBACA,CAAGL,oBAAkBR;IACrBc,oBACA,AAAChI,SAASuH;IACVU,oBACA,2BAAA,3BAACd,SAASa;IACVE,oBACA,CAAA,CAAA,CAAA,MAAOtB,UAAOE,UAAOkB;IACrBG,oBACA,CAAA,CAAA,CAAA,MAAOvB,UAAOC,UAAOmB;IACrBI,oBACA,CAAA,CAAA,CAAA,MAAOvB,UAAOC,UAAOmB;IACrBI,oBACA,CAAGf,oBAAkBW;IACrBK,oBACA,CAAGZ,oBAAkBO;IACrBM,oBACA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACCR,oBACAO,qBACAV,qBACAQ,qBACAP,qBACAQ,qBACAF,qBACAD,qBACAb;IACDmB,oBACA,AAACnD,UAAUkD;AArDhB,AAsDE,IAAAE,WACC,CACC,CAAA,CAAA,CAAA,CAAA,CACC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,OAEC5B,UACAC,UACAC,UACAiB,qBACAR,qBACAC,qBACD,CAAA,CAAA,CAAA,CAAA,CAAA,OAECH,qBACAP,UACAiB,qBACAR,qBACAC,sBACD,CAAA,CAAA,CACCZ,SACAmB,qBACAR,qBACAgB,sBACD,CAAA,CAAA,CACC1B,SACAkB,qBACAR,qBACAgB,sBACD,CAAA,CAAA,CAAA,CAAA,OAEC1B,UACAM,qBACAO,qBACAa,sBACD,CAAA,CAAG5B,SAAOY,qBAAkBgB,sBAC7BA;IAnCFE,WAoCC,CACC,CAAA,CAAA,CAAA,CAAA,CACC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,OAEC7B,UACAC,UACAC,UACAiB,qBACAP,qBACAL,qBACD,CAAA,CAAA,CAAA,CAAA,CAAA,OAECE,qBACAP,UACAiB,qBACAP,qBACAL,sBACD,CAAA,CAAA,CACCP,SACAmB,qBACAZ,qBACAoB,sBACD,CAAA,CAAA,CACC1B,SACAkB,qBACAZ,qBACAoB,sBACD,CAAA,CAAA,CACC1B,SACAU,qBACAG,qBACAa,sBACD,CAAA,CAAG5B,SAAOQ,qBAAkBoB,sBAC7BA;IArEFG,WAsEC,CACC,CAAA,CAAA,CACC,CAAA,CAAA,CAAA,CAAA,CAAA,OAEC9B,UACAC,UACAC,UACAU,qBACAK,qBACD,CAAA,CAAA,CAAA,CAAA,OAECR,qBACAP,UACAU,qBACAK,sBACD,CAAA,CAAGjB,SAAOiB,qBAAkBU,sBAC5B,CAAA,CAAG1B,SAAOgB,qBAAkBU,sBAC7BA;AAvFF,AAAA,gFAAAC,SAAAC,SAAAC,2BAAAF,SAAAC,SAAAC,vIAAC7G,qCAAAA,iEAAAA;;;;AAzcR,AAAA,IAAArD,iBAAAC;yEA3L0B,rEA2L1BD,qBAAA,EAAA,GAAA,CAAAA,kBAAA,SAAAA;IAAAE,iCAAA,iBAAAC,aAAA,CAAAH,mBAAA;AAAA,AAAA,GAAA,GAAA,CAAAG,cAAA;AAAAA;;+BA3L0B,/BA2L1B,IAAAC;AAAA,AAAA,IAAAC,iBAAAL;AAAA,AAAA,CAAAK,eAAA,gBAAAD;;AAAAC;AAAAD;;;AAAA,AAAA,IAAAE,yBAAAJ;6FA3L0B,7FA2L1B,AAAA,IAAAK,yBAAA,EAAA,GAAA,CAAAD,0BAAA,SAAAA;AAAA,AAAA,IAAAE,iBAAAD;AAAA,AAAA,CAAAC,eAAA,iDAAA,AAAA,WAAAC;AAAA,AAAA,GAAA,AAAAC,cAAAD;AAAA,OAAAE,gDAAA,2CAAA,gDAAAZ;;AAAA,oBAAA,AAAA,2FAAA,AAAAa,gBAAAH;AAAA,IAAAI,WAAAJ;AAAA,AAAA,AAAAK,sBAAAD,SAAA,2CAAA,gDAAAd;;AAAAc;;AAAA,AAAAJ;;;;GAAA,CAAAF,uBAAA;;AAAAC;AAAAR,AAsiBA,AACC,yCAAA,zCAAewK,0FAAQC;AAAvB,AAA0B,QAAGA,IAAEA;;;;AAI/B,uCAAA,vCAAeE,sFAAMF;AAArB,AAAwB,QAAGA,IAAEA;;;;AAI7B,yCAAA,zCAAeG,0FAAQH;AAAvB,AAA0B,QAAGA,IAAEA;;;;AAThC,IAAA1K,yBAAA;AAAA,AAGC,YAAA,ZAAC2K;;AAID,YAAA,ZAACA;;AAPF,0FAAA,mDAWO,uCAAA,vCAACE;;AAXR,AAAA,IAAAT,iBAAAlK;yEAjuB0B,rEAiuB1BkK,qBAAA,EAAA,GAAA,CAAAA,kBAAA,SAAAA;IAAAjK,iCAAA,iBAAAkK,aAAA,CAAAD,mBAAA;AAAA,AAAA,GAAA,GAAA,CAAAC,cAAA;AAAAA;;+BAjuB0B,/BAiuB1B,IAAAhK;AAAA,AAAA,IAAAiK,iBAAAF;AAAA,AAAA,CAAAE,eAAA,gBAAAjK;;AAAAiK;AAAAjK;;;AAAA,AAAA,IAAAE,yBAAAJ;6FAjuB0B,7FAiuB1B,AAAA,IAAAK,yBAAA,EAAA,GAAA,CAAAD,0BAAA,SAAAA;AAAA,AAAA,IAAAgK,iBAAA/J;AAAA,AAAA,CAAA+J,eAAA,gDAAA,AAAA,WAAA7J;AAAA,AAAA,GAAA,AAAAC,cAAAD;AAAA,OAAAE,gDAAA,2CAAA,gDAAAZ;;AAAA,oBAAA,AAAA,2FAAA,AAAAa,gBAAAH;AAAA,IAAA8J,WAAA9J;AAAA,AAAA,AAAAK,sBAAAyJ,SAAA,2CAAA,gDAAAxK;;AAAAwK;;AAAA,AAAA9J;;;;GAAA,CAAAF,uBAAA;;AAAA+J;AAAAH,AAaA,AACC,4CAAA,5CAAee,gGAAWC;AAA1B,AAAA,0GAAA,2CAAA,uDAAA,2CAAA,yDAAA,QAAA,uDAAA,eAAA,yDAAA,2CAAA,2DAAA,mFAAA,OAAA,WAAA,SAAA,UAAA,gBAAA,6DAAA,2CAAA,4JAAA,sDAAA,2CAAA,4EAAA,WAAA,qEAAA,KAAA,4EAAA,mFAAA,IAAA,IAAA,YAAA,uDAAA,MAAA,sDAAA,oBAAA,gHAAA,2CAAA,uDAAA,mFAAA,mFAAA,KAAA,YAAA,mFAAA,KAAA,YAAA,mFAAA,KAAA,oBAAA,uDAAA,mFAAA,IAAA,IAAA,YAAA,iEAAA,mFAAA,IAAA,IAAA,IAAA,oBAAA,mFAAA,mDAAA,2CAAA,wDAAA,AAAAvK,qCAAA,2GAAA,2CAAA,yDAAA,+GAAA,wDAAA,+GAAA,uDAAA,MAAA,yDAAA,KAAA,6DAAA,IAAA,sDAAA,MAAA,jyGACGwK,2uBAIoBC,mvBAKnBC,ilCAGeH,wGACbI,+MACU,GAAGC,SAASA,2JACZ,GAAGA,SAASA,4TAKf,WAAKnI,KAAKjC,MAAMkC,IAAImI,GAAGC,GAAGC;AAA1B,AACE,IAAAC,aAA2B,AAAST;IAApCS,iBAAA,AAAA1I,4BAAA0I;SAAA,AAAAzI,4CAAAyI,eAAA,hEAAcrI;SAAd,AAAAJ,4CAAAyI,eAAA,hEAAiBpI;SAAjB,AAAAL,4CAAAyI,eAAA,hEAAoBnI;QAApB,AAAAN,4CAAAyI,eAAA,/DAAuBzK;AAAvB,AAEE,OAAC8C,sCAAMZ,KAAKE,GAAGC,GAAGC,GAAGtC,EAAEC,MAAMkC;2BAxB9C,8GAAA,2CAAA,wDAAA,KAAA,uDAAA,WAAA,uDAAA,KAAA,uDAAA,oBAAA,+GAAA,2CAAA,yDAAA,oBAAA,2GAAA,2CAAA,uDAAA,WAAA,uDAAA,l0BA4BKuI,+ZAMAC,uOACAC;;;;AApCN,IAAAhM,yBAAA;AAAA,AACgBmL;;AADhB,AAAA,IAAAL,iBAAA5K;yEA9uB0B,rEA8uB1B4K,qBAAA,EAAA,GAAA,CAAAA,kBAAA,SAAAA;IAAA3K,iCAAA,iBAAA4K,aAAA,CAAAD,mBAAA;AAAA,AAAA,GAAA,GAAA,CAAAC,cAAA;AAAAA;;+BA9uB0B,/BA8uB1B,IAAA1K;AAAA,AAAA,IAAA2K,iBAAAF;AAAA,AAAA,CAAAE,eAAA,gBAAA3K;;AAAA2K;AAAA3K;;;AAAA,AAAA,IAAAE,yBAAAJ;6FA9uB0B,7FA8uB1B,AAAA,IAAAK,yBAAA,EAAA,GAAA,CAAAD,0BAAA,SAAAA;AAAA,AAAA,IAAA0K,iBAAAzK;AAAA,AAAA,CAAAyK,eAAA,iDAAA,AAAA,WAAAvK;AAAA,AAAA,GAAA,AAAAC,cAAAD;AAAA,OAAAE,gDAAA,2CAAA,gDAAAZ;;AAAA,oBAAA,AAAA,2FAAA,AAAAa,gBAAAH;AAAA,IAAAwK,WAAAxK;AAAA,AAAA,AAAAK,sBAAAmK,SAAA,2CAAA,gDAAAlL;;AAAAkL;;AAAA,AAAAxK;;;;GAAA,CAAAF,uBAAA;;AAAAyK;AAAAH,AAgDA","names":["f__47234__auto__","obj47520","js/window","inner-obj__40440__auto__","child47521","new-child__40389__auto__","obj47526","o__40434__auto__","o__40428__auto__","obj47529","x__47235__auto__","cljs.core/not","reagent.core.atom","cljs.core/deref","G__47530","cljs.core/reset!","mathbox.examples.math.helitorus/spine","out","R","r","n","theta","n*theta","xr","Math/cos","G__47502","Math/sin","e","inv-e","mathbox.examples.math.helitorus/spine-tangent","t","G__47504","mathbox.examples.math.helitorus/circle-tangent","G__47503","vn","js/module$node_modules$three$build$three.Vector3","mathbox.examples.math.helitorus/->tbn","v","translation","G__47505","G__47506","G__47507","vo","vt","vb","mtbn","js/module$node_modules$three$build$three.Matrix4","mathbox.examples.math.helitorus/tbn","vs","p__47508","map__47509","cljs.core/--destructure-map","cljs.core.get","mathbox.examples.math.helitorus/area-expr","emit","phi","r1","r2","r3","m","G__47510","G__47511","G__47512","G__47513","mathbox.examples.math.helitorus/big-cake","js/Function","mathbox.examples.math.helitorus/cake2","x63167","x63168","x63169","x63170","x63171","x63172","G00000000000000db","G00000000000000e6","G00000000000000f1","G00000000000000f6","G0000000000000103","G0000000000000106","G0000000000000117","G000000000000011b","G0000000000000124","G0000000000000139","G0000000000000140","G0000000000000150","G0000000000000156","G0000000000000162","G0000000000000172","G0000000000000174","G000000000000017a","G000000000000017d","G000000000000017e","G0000000000000187","G0000000000000188","G000000000000018c","G000000000000019e","G00000000000001a1","G00000000000001b8","G00000000000001ba","G00000000000001c1","G00000000000001c5","G00000000000001cb","G00000000000001d2","G00000000000001d7","G00000000000001e1","G00000000000001ed","G00000000000001f6","G0000000000000200","G000000000000020b","Math/sqrt","G0000000000000217","G0000000000000219","G0000000000000224","G0000000000000225","G0000000000000229","G000000000000022b","G0000000000000231","G0000000000000234","G000000000000023c","G0000000000000243","G0000000000000244","G0000000000000245","G0000000000000246","G0000000000000247","G0000000000000248","G000000000000024c","G0000000000000250","G0000000000000251","G__47514","G__47515","G__47516","mathbox.examples.math.helitorus/cake","x51275","x51276","x51277","x51278","x51279","x51280","G000000000000009e","Math/pow","G000000000000009f","G00000000000000a2","G00000000000000a6","G00000000000000a7","G00000000000000a8","G00000000000000a9","G00000000000000aa","G00000000000000b0","G00000000000000b5","G00000000000000b6","G00000000000000ba","G00000000000000bc","G00000000000000be","G00000000000000c2","G00000000000000c5","G00000000000000c6","G00000000000000c9","G00000000000000ca","G00000000000000cc","G00000000000000cf","G00000000000000d0","G__47517","G__47518","G__47519","obj47531","child47532","obj47537","obj47540","G__47541","mathbox.examples.math.helitorus/square","x","js/console.log","mathbox.examples.math.helitorus/face","mathbox.examples.math.helitorus/donkey","obj47543","child47544","obj47549","obj47552","G__47553","mathbox.examples.math.helitorus/Helitorus","!state","mathbox/Mathbox","js/module$node_modules$three$examples$jsm$controls$TrackballControls.TrackballControls","mathbox.primitives/Cartesian","mathbox.primitives/Area","Math/PI","_i","_j","_t","map__47542","mathbox.primitives/Surface","mathbox.primitives/Resample","mathbox.primitives/Line"],"sourcesContent":["^#:nextjournal.clerk\n{:toc true\n :no-cache true\n :visibility :hide-ns}\n(ns mathbox.examples.math.helitorus\n  (:require\n   #?@(:cljs [[mathbox]\n              [applied-science.js-interop :as j]\n              [mathbox.primitives :as mb]\n              [\"three\" :as three]\n              [\"three/examples/jsm/controls/TrackballControls.js\"\n               :as TrackballControls]])\n   [nextjournal.clerk :as-alias clerk]\n   ;; TODO this only for now, since `show-sci` does not behave well on the cljs\n   ;; side.\n   [mentat.clerk-utils.show :refer [show-sci show-cljs]])\n  #?(:cljs\n     (:require-macros mathbox.examples.math.helitorus)))\n\n;; # Helitorus\n\n;; woah, Frenet-Serret?? https://en.wikipedia.org/wiki/Frenet%E2%80%93Serret_formulas\n;;\n;; https://www.sciencepublishinggroup.com/journal/paperinfo?journalid=148&doi=10.11648/j.ajam.20140206.12\n;;\n;; So I kind of think it's cheating to pick the circle normal, and that we\n;; should really be taking another derivative here.\n;;\n;; https://search.brave.com/search?q=Frenet-Serretmovingtrihedro&source=desktop\n;;\n;; BOOM this describes what to do! we'll see if we can get rid of the vector4\n;; etc and do it more simply, maybe there is some speed we can get from\n;; compiling with sicmutils.\n;; https://math.stackexchange.com/questions/324527/do-these-equations-create-a-helix-wrapped-into-a-torus\n;;\n;; https://search.brave.com/search?q=helical+toroid&source=desktop\n;;\n;; https://mathtourist.blogspot.com/2016/09/airport-helical-toroid.html\n\n;; https://www.laetusinpraesens.org/docs10s/helixtor.php\n\n#?(:clj\n   (clerk/tex\n    \"\\\\begin{pmatrix}\\\\displaystyle{\\\\left(R + r\\\\,\\\\cos\\\\left(n\\\\,\\\\theta\\\\right)\\\\right)\\\\,\\\\cos\\\\left(\\\\theta\\\\right)} \\\\cr \\\\cr \\\\displaystyle{\\\\left(R + r\\\\,\\\\cos\\\\left(n\\\\,\\\\theta\\\\right)\\\\right)\\\\,\\\\sin\\\\left(\\\\theta\\\\right)} \\\\cr \\\\cr \\\\displaystyle{r\\\\,\\\\sin\\\\left(n\\\\,\\\\theta\\\\right)}\\\\end{pmatrix}\"))\n;; ## UI\n\n;; TODO that if you are going to export, this will currently break your code...\n;; having clerk/sync set to true. You will also not be able to `^:export` anything that is living inside of a `do` or anything else.\n\n;; ^{::clerk/sync true}\n(show-sci\n ;; TODO the bug seems to be !state inside of a macro call in a different\n ;; library?? that we can use to make a repro.\n (defonce !state\n   (reagent/atom\n    {:n 16\n     :r1 1\n     :r2 0.3\n     :r3 0.1})))\n\n(show-sci\n [:<>\n  [leva/PanelOptions {:drag true}]\n  [leva/Panel\n   {:state !state\n    :options\n    {:n {:min 0 :max 32 :step 1}\n     :r1 {:min 0 :max 3 :step 0.001}\n     :r2 {:min 0.0 :max 0.5 :step 0.01}\n     :r3 {:min 0.0 :max 0.2 :step 0.01}}}]])\n\n;; ## SICMUtils Code\n\n(comment\n  (defn make-unit\n    \"TODO get this over to vectors!!\"\n    [v]\n    (/ v (abs v)))\n\n  (defn spine\n    \"Parametric equation for a helix with `n` twists wrapped around a torus (donut)\n  with major radius `R` and minor radius `r`.\n\n  Given those parameters and an angle `theta` around the torus, returns a\n  3-vector of the XYZ coordinates of the helix.\"\n    [R r n theta]\n    (let [xr (+ R (* r (cos (* n theta))))]\n      [(* xr (cos theta))\n       (* xr (sin theta))\n       (* r  (sin (* n theta)))]))\n\n  (defn circle\n    \"Given some radius `r` and `angle`, returns the x-y-z coordinates of a point at\n  angle `theta` on the unit circle sitting flat in the x-y plane.\"\n    ([angle] (circle 1 angle))\n    ([r angle]\n     [(* r (cos angle))\n      (* r (sin angle))\n      0]))\n\n  (defn helitorus\n    \"Given:\n\n  `R` - the major radius of a torus\n  `r2` - minor radius of a torus\n  `r3` - radius of a helitorus cross-section\n  `n`  - the number of helitorus windings\n\n  Returns a function that generates the x-y-z coordinates of a point on the\n  helitoroidal manifold at angle `theta` around the torus and `phi` around the\n  shell of the fattened helix.\"\n    [R r2 r3 n]\n    (fn [theta phi]\n      (let [;; minor radius of the torus\n            r (+ r2 r3)\n\n            ;; normalized vector pointing along the helix\n            t (make-unit\n               (((partial 3) spine) R r n theta))\n\n            ;; vector tangent to the unit circle\n            b (make-unit\n               ((D circle) theta))]\n        ;; - generate a point along the helitorus cross-section at angle phi\n        ;; - rotate it to point along the helical path at this theta\n        ;; - translate the circle from the origin to spine\n        (+ (spine R r n theta)\n           (* (matrix-by-cols b (cross-product t b) t)\n              (circle r3 phi)))))))\n\n;; even tighter:\n\n(comment\n  ;; This needed to be compiled WITHOUT running the simplifier. We need to put a\n  ;; short budget on the simplifier here.\n  (defn make-unit\n    \"Given a vector, returns a vector of unit length pointing in the same direction\n  as `v`.\"\n    [v]\n    (/ v (abs v)))\n\n  (defn ->TNB\n    \"Given a parametric function `f` of a single variable `t`, generates a function\n  of `t` that returns a matrix with columns B, N, T of the Frenet-Serret frame\n  at point `(f t)`.\n\n  See the section on 'other expressions' here:\n  https://en.wikipedia.org/wiki/Frenet%E2%80%93Serret_formulas#Other_expressions_of_the_frame\"\n    [f]\n    (let [T (fn [t]\n              (make-unit ((D f) t)))\n          N (fn [theta]\n              (make-unit ((D T) theta)))]\n      (fn [t]\n        (let [T-t (T t)\n              N-t (N t)\n              B-t (cross-product T-t N-t)]\n          (matrix-by-cols B-t N-t T-t)))))\n\n  (defn spine\n    \"Returns a function of `theta` that produces a 3-vector of the XYZ coordinates\n  of a helix with `n` twists wrapped around a torus (donut) with major radius\n  `R` and minor radius `r`.\"\n    [R r n]\n    (fn [theta]\n      (let [xr (+ R (* r (cos (* n theta))))]\n        [(* xr (cos theta))\n         (* xr (sin theta))\n         (* r  (sin (* n theta)))])))\n\n  (defn circle\n    \"Given some radius `r` and `angle`, returns the x-y-z coordinates of a point at\n  angle `theta` on the unit circle sitting flat in the x-y plane.\"\n    [r angle]\n    [(* r (cos angle))\n     (* r (sin angle))\n     0])\n\n  (defn helitorus\n    \"Given:\n\n  `R` - the major radius of a torus\n  `r2` - minor radius of a torus\n  `r3` - radius of a helitorus cross-section\n  `n`  - the number of helitorus windings\n\n  Returns a function that generates the x-y-z coordinates of a point on the\n  helitoroidal manifold at angle `theta` around the torus and `phi` around the\n  shell of the fattened helix.\"\n    [R r2 r3 n]\n    (fn [theta phi]\n      (let [spine-f (spine R (+ r2 r3) n)\n            M       (->TNB spine-f)]\n        (+ (spine-f theta)\n           (* (M theta)\n              (circle r3 phi)))))))\n\n;; ## Helpers\n\n(show-cljs\n (defn spine [out R r n theta]\n   ;; torus https://en.wikipedia.org/wiki/Torus\n   ;;\n   ;; https://math.stackexchange.com/questions/324527/do-these-equations-create-a-helix-wrapped-into-a-torus\n   ;;\n   ;; Notes on how to get the next thing going https://stackoverflow.com/questions/13223115/rendering-a-toroidal-helix\n\n   ;; r2+r3 minor radius, r1 major\n   ;;\n   ;; HECK YES, so I can SIMPLY take the derivative here of this with respect to\n   ;; `t`, to theta, to get the tangent along the curve at that point. note that\n   ;; x and y wiggle in and out, and z wiggles up and down.\n   (let [n*theta (* n theta)\n         xr (+ R (* r (Math/cos n*theta)))]\n     (doto out\n       (.set (* xr (Math/cos theta))\n             (* xr (Math/sin theta))\n             (* r  (Math/sin n*theta))))))\n\n (let [e     0.001\n       inv-e (/ 1.0 e)]\n   ;; TODO we should really be using the derivative here.\n   (defn spine-tangent [out R r n t]\n     (doto out\n       (.set\n        ;; sin(t) (-(r cos(n t) + R)) - n r cos(t) sin(n t)\n        (- (* (Math/sin t) (- (+ R (* r (Math/cos (* n t))))))\n           (* n r (Math/cos t) (Math/sin (* n t))))\n\n        (- (* (Math/cos t) (+ R (* r (Math/cos (* n t)))))\n           (* n r (Math/sin t) (Math/sin (* n t))))\n        (* n r (Math/cos (* n t)))\n\n        ))\n     #_(doto ^js out\n         (spine R r n (+ theta e))\n         (.sub v)\n         (.multiplyScalar inv-e)\n         (.normalize))))\n\n (defn circle-tangent [out theta]\n   (doto out\n     (.set (- (Math/sin theta))\n           (Math/cos theta)\n           0)))\n\n (let [vn (three/Vector3.)]\n   (defn ->tbn\n     \"Augmented matrix https://en.wikipedia.org/wiki/Affine_transformation#Representation\"\n     [out v t translation]\n     (doto vn\n       (.crossVectors v t)\n       (.normalize))\n\n     ;; keep v, get the other one.\n     (doto ^js t\n       (.crossVectors v vn)\n       (.normalize))\n\n     ;; turn that into a tbn matrix...\n     (doto out\n       (.set\n        (.-x v) (.-x t) (.-x vn) (.-x translation)\n        (.-y v) (.-y t) (.-y vn) (.-y translation)\n        (.-z v) (.-z t) (.-z vn) (.-z translation)\n        0        0        0        1))))\n\n (let [vo    (three/Vector3.)\n       vt    (three/Vector3.)\n       vb    (three/Vector3.)\n       mtbn (three/Matrix4.)]\n   (defn tbn\n     \"Compute tangent, biTangent, normal matrix:\n     https://learnopengl.com/Advanced-Lighting/Normal-Mapping\"\n     [n R r theta]\n     ;; major is r1, r2 is center to the edge of the torus??\n\n     ;; populate vo to point to the spine at this location.\n\n     (spine vo R r n theta)\n\n     ;; vt <- tangent pointing along the spine of the torus.\n     (spine-tangent vt R r n theta)\n\n     ;; vb <- tangent to the circular cross section at that point, looking\n     ;; down.\n     (circle-tangent vb theta)\n\n     ;; get rotate + translate matrix\n     (->tbn mtbn vt vb vo))\n\n\n   (let [vs (three/Vector3.)]\n     (defn area-expr\n       \"So phi gets you around the smaller circle, and then theta is the big circle.\"\n       [emit theta phi {:keys [n r1 r2 r3]}]\n       (let [r (+ r2 r3)\n             m (tbn n r1 r theta)]\n         ;; and then here, rotate the circle around to the spine, pointing in the\n         ;; tangent direction.\n         (doto vs\n           (.set 0\n                 (* r3 (Math/cos phi))\n                 ;; along circle radius\n                 (* r3 (Math/sin phi)))\n           (.applyMatrix4 m))\n         (emit (.-x vs)\n               (.-y vs)\n               (.-z vs)))))\n\n   (def big-cake\n     (js/Function.\n      \"emit\"\n      \"x51275\"\n      \"x51276\"\n      \"x51277\"\n      \"x51278\"\n      \"x51279\"\n      \"x51280\"\n      \"let G000000000000009e = Math.pow(x51278, 2.0);\\n\n let G000000000000009f = Math.sin(x51279);\\n\n let G00000000000000a2 = Math.pow(x51275, 2.0);\\n\n let G00000000000000a6 = Math.pow(x51277, 2.0);\\n\n let G00000000000000a7 = x51278 * x51279;\\n\n let G00000000000000a8 = Math.cos(x51279);\\n\n let G00000000000000a9 = Math.sin(x51280);\\n\n let G00000000000000aa = Math.pow(x51276, 2.0);\\n\n let G00000000000000b0 = Math.cos(x51280);\\n\n let G00000000000000b5 = 2.0 * x51276 * x51277 * G000000000000009e;\\n\n let G00000000000000b6 = G00000000000000a6 * G000000000000009e;\\n\n let G00000000000000ba = Math.sin(G00000000000000a7);\\n\n let G00000000000000bc = G00000000000000aa * G000000000000009e;\\n\n let G00000000000000be = Math.cos(G00000000000000a7);\\n\n let G00000000000000c2 = Math.pow(G00000000000000be, 2.0);\\n\n let G00000000000000c5 = 2.0 * x51275 * x51277 * G00000000000000be;\\n\n let G00000000000000c6 = 2.0 * x51275 * x51276 * G00000000000000be;\\n\n let G00000000000000c9 = 2.0 * x51276 * x51277 * G00000000000000c2;\\n\n let G00000000000000ca = G00000000000000a6 * G00000000000000c2;\\n\n let G00000000000000cc = G00000000000000aa * G00000000000000c2;\\n\n let G00000000000000cf = G00000000000000bc + G00000000000000cc + G00000000000000b5 + G00000000000000c9 + G00000000000000b6 + G00000000000000ca + G00000000000000c6 + G00000000000000c5 + G00000000000000a2;\\n\n let G00000000000000d0 = Math.sqrt(G00000000000000cf);\\n\nemit((-1.0 * x51276 * x51277 * x51278 * G00000000000000be * G00000000000000a8 * G00000000000000a9 -1.0 * G00000000000000a6 * x51278 * G00000000000000be * G00000000000000a8 * G00000000000000a9 + x51276 * G00000000000000be * G00000000000000a8 * G00000000000000d0 + x51277 * G00000000000000be * G00000000000000a8 * G00000000000000d0 -1.0 * x51277 * G000000000000009f * G00000000000000b0 * G00000000000000d0 + x51275 * G00000000000000a8 * G00000000000000d0) / G00000000000000d0, (-1.0 * x51276 * x51277 * x51278 * G00000000000000be * G00000000000000a9 * G000000000000009f -1.0 * G00000000000000a6 * x51278 * G00000000000000be * G00000000000000a9 * G000000000000009f + x51276 * G00000000000000be * G000000000000009f * G00000000000000d0 + x51277 * G00000000000000be * G000000000000009f * G00000000000000d0 + x51277 * G00000000000000a8 * G00000000000000b0 * G00000000000000d0 + x51275 * G000000000000009f * G00000000000000d0) / G00000000000000d0, (-1.0 * x51276 * x51277 * x51278 * G00000000000000a9 * G00000000000000ba -1.0 * G00000000000000a6 * x51278 * G00000000000000a9 * G00000000000000ba + x51276 * G00000000000000ba * G00000000000000d0 + x51277 * G00000000000000ba * G00000000000000d0) / G00000000000000d0);\"))\n\n   (defn cake2\n     [emit x63167 x63168 x63169 x63170 x63171 x63172]\n     (let\n         [G00000000000000db\n          (* x63170 x63171)\n          G00000000000000e6\n          (Math/sin x63171)\n          G00000000000000f1\n          (Math/sin x63172)\n          G00000000000000f6\n          (+ x63168 x63169)\n          G0000000000000103\n          (Math/cos x63172)\n          G0000000000000106\n          (Math/cos x63171)\n          G0000000000000117\n          (Math/cos G00000000000000db)\n          G000000000000011b\n          (Math/sin G00000000000000db)\n          G0000000000000124\n          (- G00000000000000e6)\n          G0000000000000139\n          (* G00000000000000f6 G0000000000000117)\n          G0000000000000140\n          (- G000000000000011b)\n          G0000000000000150\n          (*\n           G0000000000000106\n           G00000000000000f6\n           -1.0\n           G0000000000000117\n           x63170\n           x63170)\n          G0000000000000156\n          (*\n           G00000000000000f6\n           G0000000000000117\n           x63170\n           G00000000000000f6\n           G0000000000000117\n           x63170)\n          G0000000000000162\n          (*\n           G00000000000000e6\n           G00000000000000f6\n           -1.0\n           G0000000000000117\n           x63170\n           x63170)\n          G0000000000000172\n          (*\n           G00000000000000e6\n           G00000000000000f6\n           G0000000000000140\n           x63170)\n          G0000000000000174\n          (*\n           G00000000000000f6\n           G0000000000000140\n           x63170\n           G0000000000000106)\n          G000000000000017a\n          (*\n           G00000000000000f6\n           G0000000000000140\n           x63170\n           G0000000000000124)\n          G000000000000017d\n          (*\n           G0000000000000106\n           G00000000000000f6\n           G0000000000000140\n           x63170)\n          G000000000000017e\n          (*\n           G00000000000000f6\n           G0000000000000117\n           x63170\n           G00000000000000f6\n           G0000000000000140\n           x63170\n           x63170)\n          G0000000000000187\n          (*\n           G0000000000000124\n           G00000000000000f6\n           G0000000000000140\n           x63170)\n          G0000000000000188\n          (+ x63167 G0000000000000139)\n          G000000000000018c\n          (* G0000000000000188 G0000000000000106)\n          G000000000000019e\n          (* G0000000000000188 G0000000000000124)\n          G00000000000001a1\n          (* G0000000000000188 -1.0 G0000000000000106)\n          G00000000000001b8\n          (+\n           G0000000000000150\n           G0000000000000187\n           G00000000000001a1\n           G000000000000017a)\n          G00000000000001ba\n          (+ G000000000000017d G000000000000019e)\n          G00000000000001c1\n          (+\n           G0000000000000162\n           G000000000000017d\n           G000000000000019e\n           G0000000000000174)\n          G00000000000001c5\n          (+ G0000000000000172 G000000000000018c)\n          G00000000000001cb\n          (* G00000000000001c5 G00000000000001c1)\n          G00000000000001d2\n          (* G00000000000001ba G00000000000001b8)\n          G00000000000001d7\n          (* G00000000000001c5 G00000000000001c5)\n          G00000000000001e1\n          (* G00000000000001ba G00000000000001ba)\n          G00000000000001ed\n          (+\n           G00000000000001d2\n           G00000000000001d2\n           G00000000000001cb\n           G00000000000001cb\n           G000000000000017e\n           G000000000000017e)\n          G00000000000001f6\n          (+ G00000000000001e1 G00000000000001d7 G0000000000000156)\n          G0000000000000200\n          (/ -1.0 G00000000000001f6)\n          G000000000000020b\n          (Math/sqrt G00000000000001f6)\n          G0000000000000217\n          (* G000000000000020b 2.0)\n          G0000000000000219\n          (/ 1.0 G000000000000020b)\n          G0000000000000224\n          (/ 1.0 G0000000000000217)\n          G0000000000000225\n          (* G0000000000000219 G00000000000001c1)\n          G0000000000000229\n          (* G0000000000000219 G00000000000001b8)\n          G000000000000022b\n          (*\n           G0000000000000219\n           G00000000000000f6\n           G0000000000000140\n           x63170\n           x63170)\n          G0000000000000231\n          (*\n           G00000000000000f6\n           G0000000000000117\n           x63170\n           G0000000000000200\n           G0000000000000224\n           G00000000000001ed)\n          G0000000000000234\n          (*\n           G00000000000001c5\n           G0000000000000200\n           G0000000000000224\n           G00000000000001ed)\n          G000000000000023c\n          (*\n           G00000000000001ba\n           G0000000000000200\n           G0000000000000224\n           G00000000000001ed)\n          G0000000000000243\n          (+ G000000000000022b G0000000000000231)\n          G0000000000000244\n          (+ G0000000000000225 G0000000000000234)\n          G0000000000000245\n          (+ G0000000000000229 G000000000000023c)\n          G0000000000000246\n          (* G0000000000000244 G0000000000000244)\n          G0000000000000247\n          (* G0000000000000245 G0000000000000245)\n          G0000000000000248\n          (* G0000000000000243 G0000000000000243)\n          G000000000000024c\n          (+ G0000000000000247 G0000000000000246 G0000000000000248)\n          G0000000000000250\n          (Math/sqrt G000000000000024c)\n          G0000000000000251\n          (/ 1.0 G0000000000000250)]\n       (emit\n        (+\n         G000000000000018c\n         (*\n          (-\n           (*\n            G00000000000001c5\n            G0000000000000219\n            G0000000000000243\n            G0000000000000251)\n           (*\n            G00000000000000f6\n            G0000000000000117\n            x63170\n            G0000000000000219\n            G0000000000000244\n            G0000000000000251))\n          x63169\n          G0000000000000103)\n         (*\n          G0000000000000245\n          G0000000000000251\n          x63169\n          G00000000000000f1))\n        (+\n         (* G0000000000000188 G00000000000000e6)\n         (*\n          (-\n           (*\n            G00000000000000f6\n            G0000000000000117\n            x63170\n            G0000000000000219\n            G0000000000000245\n            G0000000000000251)\n           (*\n            G00000000000001ba\n            G0000000000000219\n            G0000000000000243\n            G0000000000000251))\n          x63169\n          G0000000000000103)\n         (*\n          G0000000000000244\n          G0000000000000251\n          x63169\n          G00000000000000f1))\n        (+\n         (* G00000000000000f6 G000000000000011b)\n         (*\n          (-\n           (*\n            G00000000000001ba\n            G0000000000000219\n            G0000000000000244\n            G0000000000000251)\n           (*\n            G00000000000001c5\n            G0000000000000219\n            G0000000000000245\n            G0000000000000251))\n          x63169\n          G0000000000000103)\n         (*\n          G0000000000000243\n          G0000000000000251\n          x63169\n          G00000000000000f1)))))\n\n   (defn cake [emit x51275 x51276 x51277 x51278 x51279 x51280]\n     (let\n         [G000000000000009e\n          (Math/pow x51278 2.0)\n          G000000000000009f\n          (Math/sin x51279)\n          G00000000000000a2\n          (Math/pow x51275 2.0)\n          G00000000000000a6\n          (Math/pow x51277 2.0)\n          G00000000000000a7\n          (* x51278 x51279)\n          G00000000000000a8\n          (Math/cos x51279)\n          G00000000000000a9\n          (Math/sin x51280)\n          G00000000000000aa\n          (Math/pow x51276 2.0)\n          G00000000000000b0\n          (Math/cos x51280)\n          G00000000000000b5\n          (* 2.0 x51276 x51277 G000000000000009e)\n          G00000000000000b6\n          (* G00000000000000a6 G000000000000009e)\n          G00000000000000ba\n          (Math/sin G00000000000000a7)\n          G00000000000000bc\n          (* G00000000000000aa G000000000000009e)\n          G00000000000000be\n          (Math/cos G00000000000000a7)\n          G00000000000000c2\n          (Math/pow G00000000000000be 2.0)\n          G00000000000000c5\n          (* 2.0 x51275 x51277 G00000000000000be)\n          G00000000000000c6\n          (* 2.0 x51275 x51276 G00000000000000be)\n          G00000000000000c9\n          (* 2.0 x51276 x51277 G00000000000000c2)\n          G00000000000000ca\n          (* G00000000000000a6 G00000000000000c2)\n          G00000000000000cc\n          (* G00000000000000aa G00000000000000c2)\n          G00000000000000cf\n          (+\n           G00000000000000bc\n           G00000000000000cc\n           G00000000000000b5\n           G00000000000000c9\n           G00000000000000b6\n           G00000000000000ca\n           G00000000000000c6\n           G00000000000000c5\n           G00000000000000a2)\n          G00000000000000d0\n          (Math/sqrt G00000000000000cf)]\n       (emit\n        (/\n         (+\n          (*\n           -1.0\n           x51276\n           x51277\n           x51278\n           G00000000000000be\n           G00000000000000a8\n           G00000000000000a9)\n          (*\n           -1.0\n           G00000000000000a6\n           x51278\n           G00000000000000be\n           G00000000000000a8\n           G00000000000000a9)\n          (*\n           x51276\n           G00000000000000be\n           G00000000000000a8\n           G00000000000000d0)\n          (*\n           x51277\n           G00000000000000be\n           G00000000000000a8\n           G00000000000000d0)\n          (*\n           -1.0\n           x51277\n           G000000000000009f\n           G00000000000000b0\n           G00000000000000d0)\n          (* x51275 G00000000000000a8 G00000000000000d0))\n         G00000000000000d0)\n        (/\n         (+\n          (*\n           -1.0\n           x51276\n           x51277\n           x51278\n           G00000000000000be\n           G00000000000000a9\n           G000000000000009f)\n          (*\n           -1.0\n           G00000000000000a6\n           x51278\n           G00000000000000be\n           G00000000000000a9\n           G000000000000009f)\n          (*\n           x51276\n           G00000000000000be\n           G000000000000009f\n           G00000000000000d0)\n          (*\n           x51277\n           G00000000000000be\n           G000000000000009f\n           G00000000000000d0)\n          (*\n           x51277\n           G00000000000000a8\n           G00000000000000b0\n           G00000000000000d0)\n          (* x51275 G000000000000009f G00000000000000d0))\n         G00000000000000d0)\n        (/\n         (+\n          (*\n           -1.0\n           x51276\n           x51277\n           x51278\n           G00000000000000a9\n           G00000000000000ba)\n          (*\n           -1.0\n           G00000000000000a6\n           x51278\n           G00000000000000a9\n           G00000000000000ba)\n          (* x51276 G00000000000000ba G00000000000000d0)\n          (* x51277 G00000000000000ba G00000000000000d0))\n         G00000000000000d0))))))\n\n;; ## Helitorus Component\n\n;; NOTE that we have to do `cljs` to get back. Exports do not currently make it through the show-cljs process.\n\n(show-cljs\n (defn ^:export square [x] (* x x))\n\n (js/console.log \"doing it\")\n\n (defn ^:export face [x] (* x x))\n\n (js/console.log \"doing it again\")\n\n (defn ^:export donkey [x] (* x x))\n\n [:div (donkey 2)])\n\n(show-cljs\n (defn ^:export Helitorus [!state]\n   [mathbox/Mathbox\n    {:style {:height \"500px\" :width \"100%\"}\n     :options\n     {:plugins [\"core\", \"controls\", \"cursor\", \"mathbox\" \"stats\"]\n      :controls {:klass TrackballControls/TrackballControls}}\n     :init {:background-color 0xffffff\n            :camera-proxy true\n            :camera-position [1 1 3]\n            :scale 500 :focus 3}}\n    [mb/Cartesian {:range [[-1 1] [-1 1] [-1 1]]\n                   :scale [1 1 1]\n                   :quaternion [0.7 0 0 0.7]}\n     [:div {:state @!state}\n      [mb/Area\n       {:rangeX [(- Math/PI) Math/PI]\n        :rangeY [(- Math/PI) Math/PI]\n        :width 512\n        :height 16\n        :channels 3\n        :live false\n        :expr (fn [emit theta phi _i _j _t]\n                (let [{:keys [r1 r2 r3 n]} (.-state !state)]\n                  #_(big-cake emit r1 r2 r3 n theta phi)\n                  (cake2 emit r1 r2 r3 n theta phi))\n                ;; 'r1 'r2 'r3 'n 'theta 'phi\n                #_(area-expr\n                   emit theta phi (.-state !state)))}]]\n     [mb/Surface\n      {:shaded true\n       :color 0xcc0040\n       :lineY true\n       :width 1}]\n\n     [mb/Resample {:height 5}]\n     [mb/Line\n      {:color 0xffffff\n       :width 2}]]]))\n\n;; ## Animation\n;;\n;; Note that you can't drop back INTO sci land unless you do some extra work\n;; that we can document.\n\n;; Then we can jump back to SCI, to get access to our shared state. Define the\n;; full component that you need on the cljs side!\n\n^{::clerk/width :wide\n  ::clerk/visibility {:code :fold}}\n(show-sci\n [js/mathbox.examples.math.helitorus.Helitorus !state])\n"]}