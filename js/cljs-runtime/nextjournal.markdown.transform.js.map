{"version":3,"sources":["nextjournal/markdown/transform.cljc"],"mappings":"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","names":["nextjournal.markdown.transform/guard","pred","val","p__54003","map__54004","cljs.core/--destructure-map","cljs.core.get","nextjournal.markdown.transform/->text","_node","text","content","or__5045__auto__","cljs.core.apply","cljs.core/str","cljs.core.map","p__54005","map__54006","nextjournal.markdown.transform/hydrate-toc","doc","toc","cljs.core.update","cljs.core.partial","cljs.core/into","p__54007","map__54008","node","t","cljs.core._EQ_","p__54009","map__54010","nextjournal.markdown.transform/table-alignment","style","vec__54011","cljs.core.nth","_","alignment","cljs.core/re-matches","p__54014","map__54015","nextjournal.markdown.transform/heading-markup","l","cljs.core.keyword","p__54016","map__54017","nextjournal.markdown.transform/into-markup","mkup","ctx","cljs.core.conj","cljs.core/seq","cljs.core.into","cljs.core.keep","nextjournal.markdown.transform/->hiccup","cljs.core.assoc","p__54019","p__54020","map__54021","map__54022","nextjournal.markdown.transform/toc->hiccup","parent","attrs","children","id","toc-item","G__54025","p1__54018#","temp__5808__auto__","el","js/document","G__54029","cljs.core.not_EQ_","nextjournal.markdown.transform/default-hiccup-renderers","p__54066","map__54067","p__54068","map__54069","p__54064","map__54065","cljs.core/constantly","p__54052","p__54053","map__54054","map__54055","p__54046","map__54047","p__54056","map__54057","p__54032","map__54033","p__54035","map__54036","p__54043","map__54044","p__54049","map__54050","p__54062","map__54063","p__54037","map__54038","d","var_args","G__54071","js/Error","p__54072","map__54073","nextjournal.markdown.transform.__GT_hiccup","map__54074","type","G__54075","temp__5806__auto__","f","cljs.core/fn?","cljs.core.pr_str"],"sourcesContent":["(ns nextjournal.markdown.transform\n  \"transform markdown data as returned by `nextjournal.markdown/parse` into other formats, currently:\n     * hiccup\")\n\n;; helpers\n(defn guard [pred val] (when (pred val) val))\n(defn ->text [{:as _node :keys [text content]}] (or text (apply str (map ->text content))))\n\n(defn hydrate-toc\n  \"Scans doc contents and replaces toc node placeholder with the toc node accumulated during parse.\"\n  [{:as doc :keys [toc]}]\n  (update doc :content (partial into [] (map (fn [{:as node t :type}] (if (= :toc t) toc node))))))\n\n(defn table-alignment [{:keys [style]}]\n  (when (string? style)\n    (let [[_ alignment] (re-matches #\"^text-align:(.+)$\" style)]\n      (when alignment {:text-align alignment}))))\n\n(defn heading-markup [{l :heading-level}] [(keyword (str \"h\" (or l 1)))])\n\n;; into-markup\n(declare ->hiccup)\n(defn into-markup\n  \"Takes a hiccup vector, a context and a node, puts node's `:content` into markup mapping through `->hiccup`.\"\n  [mkup ctx {:as node :keys [text content]}]\n  (cond ;; formula nodes are leaves: have text and no contents\n    text (conj mkup text)\n    (seq content) (into mkup\n                        (keep (partial ->hiccup (assoc ctx ::parent node)))\n                        content)))\n\n(defn toc->hiccup [{:as ctx ::keys [parent]} {:as node :keys [attrs content children]}]\n  (let [id (:id attrs)\n        toc-item (cond-> [:div]\n                   (seq content)\n                   (conj [:a {:href (str \"#\" id) #?@(:cljs [:on-click #(when-some [el (.getElementById js/document id)] (.preventDefault %) (.scrollIntoViewIfNeeded el))])}\n                          (-> node heading-markup (into-markup ctx node))])\n                   (seq children)\n                   (conj (into [:ul] (map (partial ->hiccup (assoc ctx ::parent node))) children)))]\n    (cond->> toc-item\n      (= :toc (:type parent))\n      (conj [:li.toc-item])\n      (not= :toc (:type parent))\n      (conj [:div.toc]))))\n\n(comment\n  ;; override toc rendering\n  (-> \"# Hello\na paragraph\n[[TOC]]\n## Section _nice_ One\n### Section Nested\n## Section **terrible** Idea\n\"\n      nextjournal.markdown/parse\n      ;; :toc\n      ;; ->hiccup #_\n      (->> (->hiccup (assoc default-hiccup-renderers\n                            :toc (fn [ctx {:as node :keys [content children heading-level]}]\n                                   (cond-> [:div]\n                                     (seq content) (conj [:span.title {:data-level heading-level} (:id node)])\n                                     (seq children) (conj (into [:ul] (map (partial ->hiccup ctx)) children)))))))))\n\n(def default-hiccup-renderers\n  {:doc (partial into-markup [:div])\n   :heading (fn [ctx {:as node :keys [attrs]}] (-> (heading-markup node) (conj attrs) (into-markup ctx node)))\n   :paragraph (partial into-markup [:p])\n   :plain (partial into-markup [:<>])\n   :text (fn [_ {:keys [text]}] text)\n   :hashtag (fn [_ {:keys [text]}] [:a.tag {:href (str \"/tags/\" text)} (str \"#\" text)]) ;; TODO: make it configurable\n   :blockquote (partial into-markup [:blockquote])\n   :ruler (constantly [:hr])\n\n   ;; images\n   :image (fn [{:as ctx ::keys [parent]} {:as node :keys [attrs]}]\n            (if (= :paragraph (:type parent))\n              [:img.inline attrs]\n              [:figure.image [:img attrs] (into-markup [:figcaption] ctx node)]))\n\n   ;; code\n   :code (partial into-markup [:pre.viewer-code.not-prose])\n\n   ;; softbreaks\n   ;; :softbreak (constantly [:br]) (treat as space)\n   :softbreak (constantly \" \")\n\n   ;; formulas\n   :formula (partial into-markup [:span.formula])\n   :block-formula (partial into-markup [:figure.formula])\n\n   ;; lists\n   :bullet-list (partial into-markup [:ul])\n   :list-item (partial into-markup [:li])\n   :todo-list (partial into-markup [:ul.contains-task-list])\n   :numbered-list (fn [ctx {:as node :keys [attrs]}] (into-markup [:ol attrs] ctx node))\n\n   :todo-item (fn [ctx {:as node :keys [attrs]}]\n                (into-markup [:li [:input {:type \"checkbox\" :checked (:checked attrs)}]] ctx node))\n\n   ;; tables\n   :table (partial into-markup [:table])\n   :table-head (partial into-markup [:thead])\n   :table-body (partial into-markup [:tbody])\n   :table-row (partial into-markup [:tr])\n   :table-header (fn [ctx {:as node :keys [attrs]}] (into-markup [:th {:style (table-alignment attrs)}] ctx node))\n   :table-data (fn [ctx {:as node :keys [attrs]}] (into-markup [:td {:style (table-alignment attrs)}] ctx node))\n\n   ;; sidenodes\n   :sidenote-ref (partial into-markup [:sup.sidenote-ref])\n   :sidenote (fn [ctx {:as node :keys [attrs]}]\n               (into-markup [:span.sidenote [:sup {:style {:margin-right \"3px\"}} (-> attrs :ref inc)]]\n                            ctx\n                            node))\n   ;; TOC\n   :toc toc->hiccup\n\n   ;; marks\n   :em (partial into-markup [:em])\n   :strong (partial into-markup [:strong])\n   :monospace (partial into-markup [:code])\n   :strikethrough (partial into-markup [:s])\n   :link (fn [ctx {:as node :keys [attrs]}] (into-markup [:a {:href (:href attrs)}] ctx node))\n   :internal-link (fn [_ {:keys [attrs text]}] [:a.internal {:href (:href attrs text)} text])\n\n   ;; default convenience fn to wrap extra markup around the default one from within the overriding function\n   :default (fn [ctx {:as node t :type}] (when-some [d (get default-hiccup-renderers t)] (d ctx node)))\n   })\n\n(defn ->hiccup\n  ([node] (->hiccup default-hiccup-renderers node))\n  ([ctx {:as node t :type}]\n   (let [{:as node :keys [type]} (cond-> node (= :doc t) hydrate-toc)]\n     (if-some [f (guard fn? (get ctx type))]\n       (f ctx node)\n       [:span.message.red\n        [:strong (str \"Unknown type: '\" type \"'.\")]\n        [:code (pr-str node)]]\n       ))))\n\n(comment\n  (-> \"# Hello\n\na nice paragraph with sidenotes[^my-note]\n\n[[TOC]]\n\n## Section One\nA nice $\\\\phi$ formula [for _real_ **strong** fun](/path/to) soft\nbreak\n\n- [ ] one **ahoi** list\n- two `nice` and ~~three~~\n- [x] checked\n\n> that said who?\n\n---\n\n## Section Two\n\n### Tables\n\n| Syntax |  JVM                     | JavaScript                      |\n|--------|-------------------------:|:--------------------------------|\n|   foo  |  Loca _lDate_ ahoiii     | goog.date.Date                  |\n|   bar  |  java.time.LocalTime     | some [kinky](link/to/something) |\n|   bag  |  java.time.LocalDateTime | $\\\\phi$                         |\n\n### Images\n\n![Some **nice** caption](https://www.example.com/images/dinosaur.jpg)\n\nand here as inline ![alt](foo/bar) image\n\n```clj\n(some nice clojure)\n```\n\n[^my-note]: Here can discuss at length\"\n    nextjournal.markdown/parse\n    ->hiccup\n    )\n\n  ;; override defaults\n  (->> \"## Title\npar one\n\npar two\"\n    nextjournal.markdown/parse\n    (->hiccup (assoc default-hiccup-renderers\n                     :heading (partial into-markup [:h1.at-all-levels])\n                     ;; wrap something around the default\n                     :paragraph (fn [{:as ctx d :default} node] [:div.p-container (d ctx node)]))))\n  )\n"]}