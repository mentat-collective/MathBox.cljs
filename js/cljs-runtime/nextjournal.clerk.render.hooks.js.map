{"version":3,"sources":["nextjournal/clerk/render/hooks.cljs"],"mappings":"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","names":["this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","nextjournal.clerk.render.hooks/WrappedState","nextjournal.clerk.render.hooks/->WrappedState","st","_coll","i","nf","or__5045__auto__","_this","new-value","G__53352","fexpr__53351","cljs.core/constantly","f","fexpr__53357","a","G__53367","p1__53339#","fexpr__53366","b","G__53378","p1__53342#","fexpr__53377","xs","G__53392","p1__53344#","fexpr__53391","cljs.core.apply","nextjournal.clerk.render.hooks/as-array","x","G__53393","cljs.core/array?","cljs.core/to-array","var_args","G__53407","nextjournal.clerk.render.hooks/use-memo","js/Error","js/module$node_modules$react$index.useMemo","deps","G__53420","nextjournal.clerk.render.hooks/use-callback","nextjournal.clerk.render.hooks.use_callback","js/module$node_modules$react$index.useCallback","nextjournal.clerk.render.hooks/wrap-effect","v","cljs.core/fn?","js/undefined","G__53426","nextjournal.clerk.render.hooks/use-effect","js/module$node_modules$react$index.useEffect","G__53435","nextjournal.clerk.render.hooks/use-layout-effect","js/module$node_modules$react$index.useLayoutEffect","nextjournal.clerk.render.hooks/use-state","init","js/module$node_modules$react$index.useState","nextjournal.clerk.render.hooks/specify-atom!","ref-obj","x53436","cljs.core/PROTOCOL_SENTINEL","this","o","cljs.core/reset!","G__53438","nextjournal.clerk.render.hooks/use-ref","nextjournal.clerk.render.hooks.use_ref","js/module$node_modules$react$index.useRef","nextjournal.clerk.render.hooks/eval-fn","nextjournal.clerk.render.hooks/use-force-update","js/module$node_modules$react$index.useReducer","cljs.core/inc","nextjournal.clerk.render.hooks/use-state-with-deps","!state","nextjournal.clerk.render.hooks.use_memo","!prev-deps","_","cljs.core/deref","cljs.core._EQ_","force-update!","update-fn","prev-state","next-state","cljs.core.not_EQ_","nextjournal.clerk.render.hooks/use-sync-external-store","subscribe","get-snapshot","js/module$node_modules$use_sync_external_store$shim$index.useSyncExternalStore","nextjournal.clerk.render.hooks/use-watch","id","changed!","cljs.core/add-watch","cljs.core/remove-watch","*ratom-context*-orig-val__53439","*ratom-context*-temp-val__53440","reagent.ratom/*ratom-context*","nextjournal.clerk.render.hooks/use-error-handler","vec__53441","cljs.core.nth","set-error","error","G__53444","nextjournal.clerk.render.hooks/use-promise","p","handle-error","nextjournal.clerk.render.hooks.use_effect","p1__53445#","nextjournal.clerk.render.hooks/use-d3-require","package","js/module$node_modules$d3_require$dist$d3_require.require","G__53446","cljs.core/List"],"sourcesContent":["(ns nextjournal.clerk.render.hooks\n  (:require [\"d3-require\" :as d3-require]\n            [\"react\" :as react]\n            [reagent.ratom]\n            [\"use-sync-external-store/shim\" :refer [useSyncExternalStore]]))\n\n;; a type for wrapping react/useState to support reset! and swap!\n(deftype WrappedState [st]\n  IIndexed\n  (-nth [_coll i] (aget st i))\n  (-nth [_coll i nf] (or (aget st i) nf))\n  IDeref\n  (-deref [^js _this] (aget st 0))\n  IReset\n  (-reset! [^js _this new-value]\n    ;; `constantly` here ensures that if we reset state to a fn,\n    ;; it is stored as-is and not applied to prev value.\n    ((aget st 1) (constantly new-value))\n    new-value)\n  ISwap\n  (-swap! [_this f] ((aget st 1) f))\n  (-swap! [_this f a] ((aget st 1) #(f % a)))\n  (-swap! [_this f a b] ((aget st 1) #(f % a b)))\n  (-swap! [_this f a b xs] ((aget st 1) #(apply f % a b xs))))\n\n(defn- as-array [x] (cond-> x (not (array? x)) to-array))\n\n(defn use-memo\n  \"React hook: useMemo. Defaults to an empty `deps` array.\"\n  ([f] (react/useMemo f #js[]))\n  ([f deps] (react/useMemo f (as-array deps))))\n\n(defn use-callback\n  \"React hook: useCallback. Defaults to an empty `deps` array.\"\n  ([x] (use-callback x #js []))\n  ([x deps] (react/useCallback x (to-array deps))))\n\n(defn- wrap-effect\n  ;; utility for wrapping function to return `js/undefined` for non-functions\n  [f] #(let [v (f)] (if (fn? v) v js/undefined)))\n\n(defn use-effect\n  \"React hook: useEffect. Defaults to an empty `deps` array.\n   Wraps `f` to return js/undefined for any non-function value.\"\n  ([f] (react/useEffect (wrap-effect f) #js[]))\n  ([f deps] (react/useEffect (wrap-effect f) (as-array deps))))\n\n(defn use-layout-effect\n  \"React hook: useLayoutEffect. Defaults to an empty `deps` array.\n   Wraps `f` to return js/undefined for any non-function value.\"\n  ([f] (react/useLayoutEffect (wrap-effect f) #js[]))\n  ([f deps] (react/useLayoutEffect (wrap-effect f) (as-array deps))))\n\n(defn use-state\n  \"React hook: useState. Can be used like react/useState but also behaves like an atom.\"\n  [init]\n  (WrappedState. (react/useState init)))\n\n(defn- specify-atom! [ref-obj]\n  (specify! ref-obj\n    IDeref\n    (-deref [^js this] (.-current this))\n    IReset\n    (-reset! [^js this new-value]\n      (set! (.-current this) new-value)\n      new-value)\n    ISwap\n    (-swap!\n      ([o f] (reset! o (f o)))\n      ([o f a] (reset! o (f o a)))\n      ([o f a b] (reset! o (f o a b)))\n      ([o f a b xs] (reset! o (apply f o a b xs))))))\n\n(defn use-ref\n  \"React hook: useRef. Can also be used like an atom.\"\n  ([] (use-ref nil))\n  ([init] (specify-atom! (react/useRef init))))\n\n(defn ^:private eval-fn\n  \"Invoke (f x) if f is a function, otherwise return f\"\n  [f x]\n  (if (fn? f)\n    (f x)\n    f))\n\n(defn use-force-update []\n  (-> (react/useReducer inc 0)\n      (aget 1)))\n\n(defn use-state-with-deps\n  ;; see https://github.com/peterjuras/use-state-with-deps/blob/main/src/index.ts\n  \"React hook: like `use-state` but will reset state to `init` when `deps` change.\n  - init may be a function, receiving previous state\n  - deps will be compared using clojure =\"\n  [init deps]\n  (let [!state (use-ref\n                (use-memo\n                 #(eval-fn init nil)))\n        !prev-deps (use-ref deps)\n        _ (when-not (= deps @!prev-deps)\n            (reset! !state (eval-fn init @!state))\n            (reset! !prev-deps deps))\n        force-update! (use-force-update)\n        update-fn (use-callback\n                   (fn [x]\n                     (let [prev-state @!state\n                           next-state (eval-fn x prev-state)]\n                       (when (not= prev-state next-state)\n                         (reset! !state next-state)\n                         (force-update!))\n                       next-state)))]\n    (WrappedState. #js[@!state update-fn])))\n\n\n(defn use-sync-external-store [subscribe get-snapshot]\n  (useSyncExternalStore subscribe get-snapshot))\n\n(defn use-watch\n  \"Hook for reading value of an IWatchable. Compatible with reading Reagent reactions non-reactively.\"\n  [x]\n  (let [id (use-callback #js{})]\n    (use-sync-external-store\n     (use-callback\n      (fn [changed!]\n        (add-watch x id (fn [_ _ _ _] (changed!)))\n        #(remove-watch x id))\n      #js[x])\n     #(binding [reagent.ratom/*ratom-context* nil] @x))))\n\n(defn use-error-handler []\n  (let [[_ set-error] (use-state nil)]\n    (use-callback (fn [error]\n                    (set-error (fn [] (throw error))))\n                  [set-error])))\n\n(defn use-promise\n  \"React hook which resolves a promise and handles errors.\"\n  [p]\n  (let [handle-error (use-error-handler)\n        !state (use-state nil)]\n    (use-effect (fn []\n                  (-> p\n                      (.then #(reset! !state %))\n                      (.catch handle-error)))\n                #js [])\n    @!state))\n\n(defn ^js use-d3-require [package]\n  (let [p (react/useMemo #(apply d3-require/require\n                                 (cond-> package\n                                   (string? package)\n                                   list))\n                         #js[(str package)])]\n    (use-promise p)))\n"]}