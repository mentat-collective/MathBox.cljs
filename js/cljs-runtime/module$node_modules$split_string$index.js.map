{
"version":3,
"file":"module$node_modules$split_string$index.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/split-string/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$split_string$index\"] = function(global,require,module,exports) {\n/*!\n * split-string <https://github.com/jonschlinkert/split-string>\n *\n * Copyright (c) 2015-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nvar extend = require('extend-shallow');\n\nmodule.exports = function(str, options, fn) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string');\n  }\n\n  if (typeof options === 'function') {\n    fn = options;\n    options = null;\n  }\n\n  // allow separator to be defined as a string\n  if (typeof options === 'string') {\n    options = { sep: options };\n  }\n\n  var opts = extend({sep: '.'}, options);\n  var quotes = opts.quotes || ['\"', \"'\", '`'];\n  var brackets;\n\n  if (opts.brackets === true) {\n    brackets = {\n      '<': '>',\n      '(': ')',\n      '[': ']',\n      '{': '}'\n    };\n  } else if (opts.brackets) {\n    brackets = opts.brackets;\n  }\n\n  var tokens = [];\n  var stack = [];\n  var arr = [''];\n  var sep = opts.sep;\n  var len = str.length;\n  var idx = -1;\n  var closeIdx;\n\n  function expected() {\n    if (brackets && stack.length) {\n      return brackets[stack[stack.length - 1]];\n    }\n  }\n\n  while (++idx < len) {\n    var ch = str[idx];\n    var next = str[idx + 1];\n    var tok = { val: ch, idx: idx, arr: arr, str: str };\n    tokens.push(tok);\n\n    if (ch === '\\\\') {\n      tok.val = keepEscaping(opts, str, idx) === true ? (ch + next) : next;\n      tok.escaped = true;\n      if (typeof fn === 'function') {\n        fn(tok);\n      }\n      arr[arr.length - 1] += tok.val;\n      idx++;\n      continue;\n    }\n\n    if (brackets && brackets[ch]) {\n      stack.push(ch);\n      var e = expected();\n      var i = idx + 1;\n\n      if (str.indexOf(e, i + 1) !== -1) {\n        while (stack.length && i < len) {\n          var s = str[++i];\n          if (s === '\\\\') {\n            s++;\n            continue;\n          }\n\n          if (quotes.indexOf(s) !== -1) {\n            i = getClosingQuote(str, s, i + 1);\n            continue;\n          }\n\n          e = expected();\n          if (stack.length && str.indexOf(e, i + 1) === -1) {\n            break;\n          }\n\n          if (brackets[s]) {\n            stack.push(s);\n            continue;\n          }\n\n          if (e === s) {\n            stack.pop();\n          }\n        }\n      }\n\n      closeIdx = i;\n      if (closeIdx === -1) {\n        arr[arr.length - 1] += ch;\n        continue;\n      }\n\n      ch = str.slice(idx, closeIdx + 1);\n      tok.val = ch;\n      tok.idx = idx = closeIdx;\n    }\n\n    if (quotes.indexOf(ch) !== -1) {\n      closeIdx = getClosingQuote(str, ch, idx + 1);\n      if (closeIdx === -1) {\n        arr[arr.length - 1] += ch;\n        continue;\n      }\n\n      if (keepQuotes(ch, opts) === true) {\n        ch = str.slice(idx, closeIdx + 1);\n      } else {\n        ch = str.slice(idx + 1, closeIdx);\n      }\n\n      tok.val = ch;\n      tok.idx = idx = closeIdx;\n    }\n\n    if (typeof fn === 'function') {\n      fn(tok, tokens);\n      ch = tok.val;\n      idx = tok.idx;\n    }\n\n    if (tok.val === sep && tok.split !== false) {\n      arr.push('');\n      continue;\n    }\n\n    arr[arr.length - 1] += tok.val;\n  }\n\n  return arr;\n};\n\nfunction getClosingQuote(str, ch, i, brackets) {\n  var idx = str.indexOf(ch, i);\n  if (str.charAt(idx - 1) === '\\\\') {\n    return getClosingQuote(str, ch, idx + 1);\n  }\n  return idx;\n}\n\nfunction keepQuotes(ch, opts) {\n  if (opts.keepDoubleQuotes === true && ch === '\"') return true;\n  if (opts.keepSingleQuotes === true && ch === \"'\") return true;\n  return opts.keepQuotes;\n}\n\nfunction keepEscaping(opts, str, idx) {\n  if (typeof opts.keepEscaping === 'function') {\n    return opts.keepEscaping(str, idx);\n  }\n  return opts.keepEscaping === true || str[idx + 1] === '\\\\';\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","getClosingQuote","str","ch","i","brackets","idx","indexOf","charAt","keepEscaping","opts","extend","module.exports","options","fn","expected","stack","length","TypeError","sep","quotes","tokens","arr","len","closeIdx","next","tok","val","push","escaped","e","s","pop","slice","keepDoubleQuotes","keepSingleQuotes","keepQuotes","split"]
}
