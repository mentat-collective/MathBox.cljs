{"version":3,"sources":["sci/impl/evaluator.cljc"],"mappings":"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","names":["sci.impl.evaluator/macros","sci.impl.evaluator/eval-and","ctx","bindings","args","cljs.core/seq","x","cljs.core/first","v","sci.impl.types/eval","xs","cljs.core/next","sci.impl.evaluator/eval-or","or__4253__auto__","sci.impl.evaluator/eval-let","let-bindings","exprs","idxs","vec__69121","cljs.core.nth","idx","let-name","cljs.core/rest","let-val","rest-let-bindings","sci.impl.evaluator/eval-def","var-name","init","m","cnn","sci.impl.types/getName","assoc-in-env","env","the-current-ns","cljs.core.get","prev","sci.impl.utils/var?","sci.lang/Var","cljs.core.symbol","cljs.core/meta","sci.impl.utils/var-unbound","G__69133","cljs.core.alter_meta_BANG_","cljs.core/merge","sci.impl.vars/bindRoot","cljs.core.assoc","cljs.core/assoc-in","cljs.core.swap_BANG_","var_args","G__69137","sci.impl.evaluator/eval-case","js/Error","case-map","case-val","temp__5751__auto__","vec__69139","_","found","cljs.core/find","case-default","vec__69143","sci.impl.evaluator/eval-try","body","catches","finally","sci-error","e69148","*in-try*-orig-val__69158","*in-try*-temp-val__69159","sci.impl.utils/*in-try*","cljs.core/not","e","vec__69154","r","cljs.core.reduce","c","clazz","cljs.core/keyword-identical?","sci.impl.types/NodeR","c__4284__auto__","x__4285__auto__","cljs.core/reduced","sci.impl.utils.rethrow_with_location_of_node","sci.impl.evaluator/eval-static-method-invocation","expr","sci.impl.interop/invoke-static-method","p1__69165#","cljs.core.map","sci.impl.evaluator/eval-instance-method-invocation","instance-expr","method-str","field-access","allowed","instance-meta","tag-class","instance-expr*","sci.impl.records/SciRecord","cljs.core.keyword","sci.impl.deftype/SciType","cljs.core/deref","instance-class","cljs.core/type","class->opts","allowed?","instance-class-name","instance-class-symbol","js/console","target-class","temp__5753__auto__","f","sci.impl.utils.throw_error_with_location","sci.impl.interop/invoke-instance-field","p1__69168#","sci.impl.interop/invoke-instance-method","G__69176","sci.impl.evaluator/eval-resolve","sym","sci.impl.evaluator.eval_resolve","cljs.core/contains?","res","cljs.core/second","fexpr__69178","sci.impl.utils/lookup","cljs.core/vreset!","sci.impl.utils/eval-resolve-state","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","sci.impl.evaluator/eval-import","seq69184","G__69186","self__4851__auto__","import-symbols-or-lists","specs","p1__69180#","cljs.core/seq?","cljs.core._EQ_","spec","vec__69191","package","classes","cljs.core/Symbol","s","last-dot","clojure.string.last_index_of","package+class-name","cljs.core.subs","p","cs","class","fq-class-name","sci.impl.interop/resolve-class","sci.impl.utils/current-ns-name","rec-var","rec-ns","sci.impl.utils/demunge","cljs.core.get_in","sci.impl.evaluator/eval-do","ret","sci.impl.utils/eval-do*","cljs.core.mapv","p1__68870#","cljs.core.apply","cljs.core/count","sci.impl.evaluator/fn-call","G__69389","arg69199","arg69200","arg69201","arg69202","arg69203","arg69204","arg69205","arg69206","arg69207","arg69208","arg69209","arg69210","arg69211","arg69212","arg69213","arg69214","arg69215","arg69216","arg69217","arg69218","arg69219","arg69220","arg69221","arg69222","arg69223","arg69224","arg69225","arg69226","arg69227","arg69228","arg69229","arg69230","arg69231","arg69232","arg69233","arg69234","arg69235","arg69236","arg69237","arg69238","arg69239","arg69240","arg69241","arg69242","arg69243","arg69244","arg69245","arg69246","arg69247","arg69248","arg69249","arg69250","arg69251","arg69252","arg69253","arg69254","arg69255","arg69256","arg69257","arg69258","arg69259","arg69260","arg69261","arg69262","arg69263","arg69264","arg69265","arg69266","arg69267","arg69268","arg69269","arg69270","arg69271","arg69272","arg69273","arg69274","arg69275","arg69276","arg69277","arg69278","arg69279","arg69280","arg69281","arg69282","arg69283","arg69284","arg69285","arg69286","arg69287","arg69288","arg69289","arg69290","arg69291","arg69292","arg69293","arg69294","arg69295","arg69296","arg69297","arg69298","arg69299","arg69300","arg69301","arg69302","arg69303","arg69304","arg69305","arg69306","arg69307","arg69308","arg69309","arg69310","arg69311","arg69312","arg69313","arg69314","arg69315","arg69316","arg69317","arg69318","arg69319","arg69320","arg69321","arg69322","arg69323","arg69324","arg69325","arg69326","arg69327","arg69328","arg69329","arg69330","arg69331","arg69332","arg69333","arg69334","arg69335","arg69336","arg69337","arg69338","arg69339","arg69340","arg69341","arg69342","arg69343","arg69344","arg69345","arg69346","arg69347","arg69348","arg69349","arg69350","arg69351","arg69352","arg69353","arg69354","arg69355","arg69356","arg69357","arg69358","arg69359","arg69360","arg69361","arg69362","arg69363","arg69364","arg69365","arg69366","arg69367","arg69368","arg69369","arg69370","arg69371","arg69372","arg69373","arg69374","arg69375","arg69376","arg69377","arg69378","arg69379","arg69380","arg69381","arg69382","arg69383","arg69384","arg69385","arg69386","arg69387","arg69388"],"sourcesContent":["(ns sci.impl.evaluator\n  {:no-doc true}\n  (:refer-clojure :exclude [eval])\n  (:require\n   [clojure.string :as str]\n   [sci.impl.deftype]\n   [sci.impl.interop :as interop]\n   [sci.impl.macros :as macros]\n   [sci.impl.records]\n   [sci.impl.types :as types]\n   [sci.impl.utils :as utils :refer [#?(:cljs kw-identical?)\n                                     rethrow-with-location-of-node\n                                     throw-error-with-location]]\n   [sci.impl.vars :as vars])\n  #?(:cljs (:require-macros [sci.impl.evaluator :refer [def-fn-call resolve-symbol]])))\n\n(declare fn-call)\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(def #?(:clj ^:const macros :cljs macros)\n  '#{do fn def defn\n     syntax-quote})\n\n;;;; Evaluation\n\n(defn eval-and\n  \"The and macro from clojure.core. Note: and is unrolled in the analyzer, this is a fallback.\"\n  [ctx bindings args]\n  (loop [args (seq args)]\n    (if args\n      (let [x (first args)\n            v (types/eval x ctx bindings)]\n        (if v\n          (let [xs (next args)]\n            (if xs\n              (recur xs) v)) v))\n      true)))\n\n(defn eval-or\n  \"The or macro from clojure.core. Note: or is unrolled in the analyzer, this is a fallback.\"\n  [ctx bindings args]\n  (loop [args (seq args)]\n    (when args\n      (let [x (first args)\n            v (types/eval x ctx bindings)]\n        (or v\n            (recur (next args)))))))\n\n(defn eval-let\n  \"The let macro from clojure.core\"\n  [ctx bindings let-bindings exprs idxs]\n  (let [[ctx bindings] (loop [ctx ctx\n                              bindings bindings\n                              let-bindings let-bindings\n                              idx 0]\n                         (let [let-name (first let-bindings)]\n                           (if let-name\n                             (let [let-bindings (rest let-bindings)\n                                   let-val (first let-bindings)\n                                   rest-let-bindings (next let-bindings)\n                                   v (types/eval let-val ctx bindings)\n                                   ;; bindings (faster/get-2 ctx :bindings)\n                                   ;; ctx (faster/assoc-3 ctx :bindings bindings)\n                                   ]\n                               (aset ^objects bindings (nth idxs idx) v)\n                               (recur ctx bindings\n                                      rest-let-bindings\n                                      (inc idx)))\n                             [ctx bindings])))]\n    (types/eval exprs ctx bindings)))\n\n(defn eval-def\n  [ctx bindings var-name init m]\n  (let [init (types/eval init ctx bindings)\n        m (types/eval m ctx bindings)\n        cnn (types/getName (:ns m))\n        assoc-in-env\n        (fn [env]\n          (let [the-current-ns (get (get env :namespaces) cnn)\n                prev (get the-current-ns var-name)\n                prev (if-not (utils/var? prev)\n                       (sci.lang.Var. prev (symbol (str cnn) (str var-name))\n                                      (meta prev)\n                                      false\n                                      false)\n                       prev)\n                v (if (identical? utils/var-unbound init)\n                    (doto prev\n                      (alter-meta! merge m))\n                    (do (vars/bindRoot prev init)\n                        (alter-meta! prev merge m)\n                        prev))\n                the-current-ns (assoc the-current-ns var-name v)]\n            (assoc-in env [:namespaces cnn] the-current-ns)))\n        env (swap! (:env ctx) assoc-in-env)]\n    ;; return var\n    (get (get (get env :namespaces) cnn) var-name)))\n\n(defmacro resolve-symbol [bindings sym]\n  `(.get ~(with-meta bindings\n            {:tag 'java.util.Map}) ~sym))\n\n(declare eval-string*)\n\n(defn eval-case\n  ([ctx bindings case-map case-val]\n   (let [v (types/eval case-val ctx bindings)]\n     (if-let [[_ found] (find case-map v)]\n       (types/eval found ctx bindings)\n       (throw (new #?(:clj IllegalArgumentException :cljs js/Error)\n                   (str \"No matching clause: \" v))))))\n  ([ctx bindings case-map case-val case-default]\n   (let [v (types/eval case-val ctx bindings)]\n     (if-let [[_ found] (find case-map v)]\n       (types/eval found ctx bindings)\n       (types/eval case-default ctx bindings)))))\n\n(defn eval-try\n  [ctx bindings body catches finally sci-error]\n  (try\n    (binding [utils/*in-try* (or (and (not sci-error)\n                                      ;; try/finally without catch\n                                      (seq catches)\n                                      )\n                                 utils/*in-try*)]\n      (types/eval body ctx bindings))\n    (catch #?(:clj Throwable :cljs :default) e\n      (if-let\n          [[_ r]\n           (reduce (fn [_ c]\n                     (let [clazz (:class c)]\n                       (when #?(:cljs\n                                (or (kw-identical? :default clazz)\n                                    (if (instance? sci.impl.types/NodeR clazz)\n                                      (instance? (types/eval clazz ctx bindings) e)\n                                      (instance? clazz e)))\n                                :clj (instance? clazz e))\n                         (reduced\n                          [::try-result\n                           (do (aset ^objects bindings (:ex-idx c) e)\n                               (types/eval (:body c) ctx bindings))]))))\n                   nil\n                   catches)]\n        r\n        (rethrow-with-location-of-node ctx bindings e body)))\n    (finally\n      (types/eval finally ctx bindings))))\n\n;;;; Interop\n\n(defn eval-static-method-invocation [ctx bindings expr]\n  (interop/invoke-static-method (first expr)\n                                ;; eval args!\n                                (map #(types/eval % ctx bindings) (rest expr))))\n\n#?(:clj\n   (defn super-symbols [clazz]\n     ;; (prn clazz '-> (map #(symbol (.getName ^Class %)) (supers clazz)))\n     (map #(symbol (.getName ^Class %)) (supers clazz))))\n\n(defn eval-instance-method-invocation\n  [ctx bindings instance-expr method-str field-access args #?(:cljs allowed)]\n  (let [instance-meta (meta instance-expr)\n        tag-class (:tag-class instance-meta)\n        instance-expr* (types/eval instance-expr ctx bindings)]\n    ;; (prn (type instance-expr*))\n    (if (instance? sci.impl.records.SciRecord instance-expr*)\n      (get instance-expr* (keyword\n                           ;; TODO: strip leading dash in analyzer\n                           method-str))\n      (if (instance? sci.impl.deftype.SciType instance-expr*)\n        (get (types/getVal instance-expr*)\n             (symbol\n              ;; TODO: strip leading dash in analyzer\n              method-str))\n        (let [instance-class (or tag-class (#?(:clj class :cljs type) instance-expr*))\n              env @(:env ctx)\n              class->opts (:class->opts env)\n              allowed? (or\n                        #?(:cljs allowed)\n                        (get class->opts :allow)\n                        (let [instance-class-name #?(:clj (.getName ^Class instance-class)\n                                                     :cljs (.-name instance-class))\n                              instance-class-symbol (symbol instance-class-name)]\n                          (get class->opts instance-class-symbol))\n                        #?(:cljs (.log js/console (str method-str))))\n              ^Class target-class (if allowed? instance-class\n                                      (when-let [f (:public-class env)]\n                                        (f instance-expr*)))]\n          ;; we have to check options at run time, since we don't know what the class\n          ;; of instance-expr is at analysis time\n          (when-not #?(:clj target-class\n                       :cljs allowed?)\n            (throw-error-with-location (str \"Method \" method-str \" on \" instance-class \" not allowed!\") instance-expr))\n          (if field-access\n            (interop/invoke-instance-field instance-expr* target-class method-str)\n            (let [args (map #(types/eval % ctx bindings) args)] ;; eval args!\n              (interop/invoke-instance-method instance-expr* target-class method-str args))))))))\n\n;;;; End interop\n\n;;;; Namespaces\n\n(declare eval-form)\n\n(defn eval-resolve\n  ([ctx bindings sym]\n   (eval-resolve ctx bindings nil sym))\n  ([ctx bindings env sym]\n   (when (or (not env)\n             (not (contains? env sym)))\n     (let [sym (types/eval sym ctx bindings)\n           res (second (@utils/lookup ctx sym false))]\n       (when-not #?(:cljs (instance? sci.impl.types/NodeR res)\n                    :clj (instance? sci.impl.types.Eval res))\n         res)))))\n\n(vreset! utils/eval-resolve-state eval-resolve)\n\n;;;; End namespaces\n\n;;;; Import\n\n(defn eval-import [ctx & import-symbols-or-lists]\n  ;;(prn import-symbols-or-lists)\n  (let [specs (map #(if (and (seq? %) (= 'quote (first %))) (second %) %)\n                   import-symbols-or-lists)\n        env (:env ctx)]\n    (reduce (fn [_ spec]\n              (let [[package classes]\n                    (if (symbol? spec)\n                      (let [s (str spec)\n                            last-dot (str/last-index-of s \".\")\n                            package+class-name\n                            (if last-dot\n                              [(symbol (subs s 0 last-dot))\n                               [(symbol (subs s (inc last-dot) (count s)))]]\n                              [nil [spec]])]\n                        package+class-name)\n                      (let [p (first spec)\n                            cs (rest spec)]\n                        [p cs]))]\n                (reduce (fn [_ class]\n                          (let [fq-class-name (symbol (if package (str package \".\" class)\n                                                          class))]\n                            (if-let [clazz (interop/resolve-class ctx fq-class-name)]\n                              (let [cnn (utils/current-ns-name)]\n                                (swap! env assoc-in [:namespaces cnn :imports class] fq-class-name)\n                                clazz)\n                              (if-let [rec-var\n                                       (let [rec-ns (symbol (utils/demunge (str package)))\n                                             rec-var (get-in @env [:namespaces rec-ns class])]\n                                         rec-var)]\n                                (let [cnn (utils/current-ns-name)]\n                                  (swap! env assoc-in [:namespaces cnn :refers class] rec-var)\n                                  @rec-var)\n                                (throw (new #?(:clj Exception :cljs js/Error)\n                                            (str \"Unable to resolve classname: \" fq-class-name)))))))\n                        nil\n                        classes)))\n            nil\n            specs)))\n\n;;;; End import\n\n(declare eval-string)\n\n(defn eval-do\n  \"Note: various arities of do have already been unrolled in the analyzer.\"\n  [ctx bindings exprs]\n  (let [exprs (seq exprs)]\n    (loop [exprs exprs]\n      (when exprs\n        (let [ret (types/eval (first exprs) ctx bindings)]\n          (if-let [exprs (next exprs)]\n            (recur exprs)\n            ret))))))\n\n(vreset! utils/eval-do* eval-do)\n\n(macros/deftime\n  ;; This macro generates a function of the following form for 20 arities:\n  #_(defn fn-call [ctx bindings f args]\n      (case (count args)\n        0 (f)\n        1 (let [arg (eval ctx bindings (first args))]\n            (f arg))\n        2 (let [arg1 (eval ctx bindings (first args))\n                args (rest args)\n                arg2 (eval ctx bindings (first args))]\n            (f arg1 arg2))\n        ,,,\n        (let [args (mapv #(eval ctx bindings %) args)]\n          (apply f args))))\n  (defmacro def-fn-call []\n    (let [cases\n          (mapcat (fn [i]\n                    [i (let [arg-syms (map (fn [_] (gensym \"arg\")) (range i))\n                             args-sym 'args ;; (gensym \"args\")\n                             let-syms (interleave arg-syms (repeat args-sym))\n                             let-vals (interleave (repeat `(types/eval (first ~args-sym) ~'ctx ~'bindings))\n                                                  (repeat `(rest ~args-sym)))\n                             let-bindings (vec (interleave let-syms let-vals))]\n                         `(let ~let-bindings\n                            (~'f ~@arg-syms)))]) (range 20))\n          cases (concat cases ['(let [args (mapv #(types/eval % ctx bindings) args)]\n                                  (apply f args))])]\n      ;; Normal apply:\n      #_`(defn ~'fn-call ~'[ctx f args]\n           (apply ~'f (map #(eval ~'ctx %) ~'args)))\n      `(defn ~'fn-call ~'[ctx bindings f args]\n         ;; TODO: can we prevent hitting this at all, by analyzing more efficiently?\n         ;; (prn :count ~'f ~'(count args) ~'args)\n         (case ~'(count args)\n           ~@cases)))))\n\n(def-fn-call)\n\n;; The following types cannot be treated as constants in the analyzer\n#?(:clj (extend-protocol types/Eval\n          java.lang.Class\n          (eval [expr _ _]\n            expr)\n          clojure.lang.PersistentArrayMap\n          (eval [expr _ _]\n            expr)\n          clojure.lang.PersistentVector\n          (eval [expr _ _]\n            expr)\n          clojure.lang.Symbol\n          (eval [expr _ _]\n            expr)\n          sci.lang.Namespace\n          (eval [expr _ _]\n            expr)\n          sci.lang.Var\n          (eval [expr _ _]\n            expr)\n          clojure.lang.MultiFn\n          (eval [expr _ _]\n            expr)\n          Object\n          (eval [expr _ _]\n            expr)\n          ;; literal nils are treated like constants, but nil might also happen\n          ;; as a result of analysis\n          nil (eval [_ _ _] nil)))\n"]}