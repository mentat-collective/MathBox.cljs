{
"version":3,
"file":"module$node_modules$$motionone$dom$dist$animate$utils$easing_cjs.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,gEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG7HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAEA,KAAIC,MAAQN,OAAA,CAAQ,qDAAR,CAAZ,CACIO,iBAAmBP,OAAA,CAAQ,6EAAR,CAIvB,OAAMQ,2BAA6B,CAACC,MAAD,CAASC,QAAT,CAAAF,EAAsB,CACrD,IAAIG,OAAS,EACPC,SAAAA,CAAYC,IAAKC,CAAAA,KAAL,CAAWJ,QAAX,CAHHK,IAGG,CAClB,KAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBJ,QAApB,CAA+BI,CAAA,EAA/B,CACIL,MAAA,EAAUF,MAAA,CAAOH,KAAMW,CAAAA,QAAN,CAAe,CAAf;AAAkBL,QAAlB,CAA8B,CAA9B,CAAiCI,CAAjC,CAAP,CAAV,CAAwD,IAE5D,OAAOL,OAAOO,CAAAA,SAAP,CAAiB,CAAjB,CAAoBP,MAAOQ,CAAAA,MAA3B,CAAoC,CAApC,CAN8C,CAAzD,CAkBMC,oBAAsB,CAAC,CAACC,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,CAAD,CAAAJ,EAAmB,gBAAeC,CAAf,KAAqBC,CAArB,KAA2BC,CAA3B,KAAiCC,CAAjC,GAE/CtB,QAAQuB,CAAAA,aAAR,CAZsB,CAAChB,MAAD,CAASC,QAAT,CAAAe,EACdnB,KAAMoB,CAAAA,UAAN,CAAiBjB,MAAjB,CAAJ,CACWF,gBAAiBoB,CAAAA,QAASC,CAAAA,YAA1B,EAAA,CACA,UAASpB,0BAAA,CAA2BC,MAA3B,CAAmCC,QAAnC,CAAT,GADA,CAEDJ,KAAMuB,CAAAA,QAASpB,CAAAA,MAHzB,CAMWH,KAAMwB,CAAAA,aAAN,CAAoBrB,MAApB,CAAA,CAA8BW,mBAAA,CAAoBX,MAApB,CAA9B,CAA4DA,MAM3EP,QAAQkB,CAAAA,mBAAR,CAA8BA,mBAC9BlB,QAAQM,CAAAA,0BAAR,CAAqCA,0BAhCwF;",
"sources":["node_modules/@motionone/dom/dist/animate/utils/easing.cjs.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$motionone$dom$dist$animate$utils$easing_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar utils = require('@motionone/utils');\nvar featureDetection = require('./feature-detection.cjs.js');\n\n// Create a linear easing point for every x second\nconst resolution = 0.015;\nconst generateLinearEasingPoints = (easing, duration) => {\n    let points = \"\";\n    const numPoints = Math.round(duration / resolution);\n    for (let i = 0; i < numPoints; i++) {\n        points += easing(utils.progress(0, numPoints - 1, i)) + \", \";\n    }\n    return points.substring(0, points.length - 2);\n};\nconst convertEasing = (easing, duration) => {\n    if (utils.isFunction(easing)) {\n        return featureDetection.supports.linearEasing()\n            ? `linear(${generateLinearEasingPoints(easing, duration)})`\n            : utils.defaults.easing;\n    }\n    else {\n        return utils.isCubicBezier(easing) ? cubicBezierAsString(easing) : easing;\n    }\n};\nconst cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;\n\nexports.convertEasing = convertEasing;\nexports.cubicBezierAsString = cubicBezierAsString;\nexports.generateLinearEasingPoints = generateLinearEasingPoints;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","utils","featureDetection","generateLinearEasingPoints","easing","duration","points","numPoints","Math","round","resolution","i","progress","substring","length","cubicBezierAsString","a","b","c","d","convertEasing","isFunction","supports","linearEasing","defaults","isCubicBezier"]
}
