{
"version":3,
"file":"module$node_modules$entities$lib$encode.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/entities/lib/encode.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$entities$lib$encode\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = void 0;\nvar xml_json_1 = __importDefault(require(\"./maps/xml.json\"));\nvar inverseXML = getInverseObj(xml_json_1.default);\nvar xmlReplacer = getInverseReplacer(inverseXML);\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using XML entities.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nexports.encodeXML = getASCIIEncoder(inverseXML);\nvar entities_json_1 = __importDefault(require(\"./maps/entities.json\"));\nvar inverseHTML = getInverseObj(entities_json_1.default);\nvar htmlReplacer = getInverseReplacer(inverseHTML);\n/**\n * Encodes all entities and non-ASCII characters in the input.\n *\n * This includes characters that are valid ASCII characters in HTML documents.\n * For example `#` will be encoded as `&num;`. To get a more compact output,\n * consider using the `encodeNonAsciiHTML` function.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nexports.encodeHTML = getInverse(inverseHTML, htmlReplacer);\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in HTML\n * documents using HTML entities.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nexports.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);\nfunction getInverseObj(obj) {\n    return Object.keys(obj)\n        .sort()\n        .reduce(function (inverse, name) {\n        inverse[obj[name]] = \"&\" + name + \";\";\n        return inverse;\n    }, {});\n}\nfunction getInverseReplacer(inverse) {\n    var single = [];\n    var multiple = [];\n    for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {\n        var k = _a[_i];\n        if (k.length === 1) {\n            // Add value to single array\n            single.push(\"\\\\\" + k);\n        }\n        else {\n            // Add value to multiple array\n            multiple.push(k);\n        }\n    }\n    // Add ranges to single characters.\n    single.sort();\n    for (var start = 0; start < single.length - 1; start++) {\n        // Find the end of a run of characters\n        var end = start;\n        while (end < single.length - 1 &&\n            single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {\n            end += 1;\n        }\n        var count = 1 + end - start;\n        // We want to replace at least three characters\n        if (count < 3)\n            continue;\n        single.splice(start, count, single[start] + \"-\" + single[end]);\n    }\n    multiple.unshift(\"[\" + single.join(\"\") + \"]\");\n    return new RegExp(multiple.join(\"|\"), \"g\");\n}\n// /[^\\0-\\x7F]/gu\nvar reNonASCII = /(?:[\\x80-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/g;\nvar getCodePoint = \n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nString.prototype.codePointAt != null\n    ? // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        function (str) { return str.codePointAt(0); }\n    : // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        function (c) {\n            return (c.charCodeAt(0) - 0xd800) * 0x400 +\n                c.charCodeAt(1) -\n                0xdc00 +\n                0x10000;\n        };\nfunction singleCharReplacer(c) {\n    return \"&#x\" + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0))\n        .toString(16)\n        .toUpperCase() + \";\";\n}\nfunction getInverse(inverse, re) {\n    return function (data) {\n        return data\n            .replace(re, function (name) { return inverse[name]; })\n            .replace(reNonASCII, singleCharReplacer);\n    };\n}\nvar reEscapeChars = new RegExp(xmlReplacer.source + \"|\" + reNonASCII.source, \"g\");\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using numeric hexadecimal reference (eg. `&#xfc;`).\n *\n * Have a look at `escapeUTF8` if you want a more concise output at the expense\n * of reduced transportability.\n *\n * @param data String to escape.\n */\nfunction escape(data) {\n    return data.replace(reEscapeChars, singleCharReplacer);\n}\nexports.escape = escape;\n/**\n * Encodes all characters not valid in XML documents using numeric hexadecimal\n * reference (eg. `&#xfc;`).\n *\n * Note that the output will be character-set dependent.\n *\n * @param data String to escape.\n */\nfunction escapeUTF8(data) {\n    return data.replace(xmlReplacer, singleCharReplacer);\n}\nexports.escapeUTF8 = escapeUTF8;\nfunction getASCIIEncoder(obj) {\n    return function (data) {\n        return data.replace(reEscapeChars, function (c) { return obj[c] || singleCharReplacer(c); });\n    };\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","getInverseObj","obj","Object","keys","sort","reduce","inverse","name","getInverseReplacer","single","multiple","_i","_a","length","k","push","start","end","charCodeAt","count","splice","unshift","join","RegExp","singleCharReplacer","c","toString","getCodePoint","toUpperCase","getASCIIEncoder","data","replace","reEscapeChars","__importDefault","mod","__esModule","defineProperty","value","escapeUTF8","escape","encodeNonAsciiHTML","encodeHTML","encodeXML","xml_json_1","inverseXML","default","xmlReplacer","entities_json_1","inverseHTML","htmlReplacer","getInverse","re","reNonASCII","String","prototype","codePointAt","str","source"]
}
