{"version":3,"sources":["leva/core.cljs"],"mappings":";;;;;;;AAsCA,wBAAA,xBAAMA,wDAAQC;AAAd,AACE,oBAAU,AAAA,sFAAQA;AAAlB;AAAA,AACE,MACC,KAAAC,MACC;;;AAEJ,IAAMG,cAAQ,AAAA,sFAAQJ;IAChBK,UAAQ,AAAA,uFAAUL;IADxBE,aAEc,AAACM,mDACA;AAAA,AACE,OAACE,oBACA,WAAKC,IAAIC,EAAEC;AAAX,AACE,IAAMC,YACA,WAAKC,MAAMT,EAAEA;AAAb,AACE,GAAM,AAACU,gDAAKD,MAAM,gEAAA,hEAACE,4CAAI,AAASb,kBAAQQ;AAAxC,AACE,OAACM,mDAAMd,YAAOe,gBAAMP,EAAEG;;AADxB;;;AAFR,AAIE,IAAAK,WAAMT;AAAN,AAAA,sCAAAS,tCACGC,+CACA,AAACC,eAAKV,GAEN,iBAAAW,qBAAgB,sDAAA,tDAACN,4CAAIZ,QAAQO;AAA7B,AAAA,oBAAAW;AAAA,aAAAA,TAASC;AAAT,AACE,OAACC,qBACA,4DAAA,0GAAA,tKAACC,qDAAMF,6DAAcX,iHAAYC;;AAFpC,kBAGeD,eAAaC;;;;AAP/BM;QANL,AAAAX,LAcC,qBACCL;;QAnBnB,AAAAD,4CAAAD,WAAA,IAAA,/DAEOI;UAFP,AAAAH,4CAAAD,WAAA,IAAA,jEAESK;AAFT,AAoBE,AAACoB,0CACA;AAAA,AACE,GAAI,EAAA,GAAA,gBAAA,SAAA,EAAA,EAAA,WAAA,CAAAC,gCAAA,6CAAA,KAAA,EAAA,EAAA,iDAAA,AAAAC,2EAAA,QAAA,AAAAA,jDAAYC,mFAAAA,pSAAoB1B,wEAAAA,sDAAAA,+GAAAA,mFAAAA;AAClC,IAAM2B,UACA,AAACC,yBACA;AAAA,AACE,IAAAC,WAAK,qBAAA,AAAAxB,rBAACgB,qCAASrB;AAAf,AAAA,8EAAA6B,0BAAAA,hGAAC1B,oCAAAA,8CAAAA;;AAHV,AAIE;AAAA,AACE,OAAC2B,2BAAiBH;;;AACtBI;;;;AA7BP;;AAgCF,yBAAA,zBAAMC,0DAAcpC;AAApB,AAAA,0FAAA,+CACMqC,4CAAKrC;;AAEX,kBAAA,lBAAMsC,4CAAOtC;AAAb,AAAA,0FAAA,iDACOD,sBAAOC","names":["leva.core/Panel*","opts","js/Error","vec__66059","cljs.core.nth","!state","options","_","set","js/module$node_modules$leva$dist$leva_cjs.useControls","cljs.core/deref","cljs.core/reduce-kv","acc","k","v","on-change","value","cljs.core.not_EQ_","cljs.core.get","cljs.core.swap_BANG_","cljs.core/assoc","G__66066","leva.core.goog$module$goog$object.set","cljs.core/name","temp__5802__auto__","k-opts","cljs.core/clj->js","cljs.core.assoc","js/module$node_modules$react$index.useEffect","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","reagent.ratom/IReactiveAtom","tracker","reagent.core/track!","G__66088","reagent.core/dispose!","js/undefined","leva.core/PanelOptions","js/module$node_modules$leva$dist$leva_cjs.Leva","leva.core/Panel"],"sourcesContent":["(ns leva.core\n  (:require [\"leva\" :refer [useControls Leva]]\n            [\"react\" :as react]\n            [goog.object :as o]\n            [reagent.core :as reagent]\n            [reagent.ratom :as ratom]))\n\n;; ## SCI Customization\n\n;; TODO: can I tie the useControls to a specific panel instance that I create? I\n;; asked in the channel.\n;;\n;; TODO if it's not a reagent atom, don't install the tracker.\n\n;; TODO take a `:state` key vs top level\n;;\n;; TODO scan for more goodies from storybook\n;; https://leva.pmnd.rs/?path=/story/inputs-string--simple\n\n;; TODO take OPTIONS for the kv pairs\n;; TODO document specific options, like `:render` boolean fn,\n;;\n;; document other inputs https://github.com/pmndrs/leva/blob/main/docs/inputs.md\n;;\n;; folders? https://github.com/pmndrs/leva/blob/main/docs/getting-started.md#nested-folders\n\n\n;; ## Numbers\n;;\n;; Increase / decrease numbers with arrow keys, with alt (\u00b10.1) and shift (\u00b110)\n;; modifiers support.\n\n;; ## Configuration\n;;\n;; Customize the panel:\n;; https://github.com/pmndrs/leva/blob/main/docs/configuration.md, see storybook\n;; for more options\n\n(defn Panel* [opts]\n  (when-not (:state opts)\n    (throw\n     (js/Error.\n      (str \"Error: we currently require a :state opt.\"))))\n\n  (let [!state  (:state opts)\n        options (:options opts)\n        [_ set] (useControls\n                 (fn []\n                   (reduce-kv\n                    (fn [acc k v]\n                      (let [on-change\n                            (fn [value _ _]\n                              (when (not= value (get (.-state !state) k ::not-found))\n                                (swap! !state assoc k value)))]\n                        (doto acc\n                          (o/set\n                           (name k)\n                           ;; TODO Note that `k-opts` must be a map.\n                           (if-let [k-opts (get options k nil)]\n                             (clj->js\n                              (assoc k-opts :value v :onChange on-change))\n                             #js {\"value\" v \"onChange\" on-change})))))\n                    (js-obj)\n                    @!state)))]\n    (react/useEffect\n     (fn mount []\n       (if (satisfies? ratom/IReactiveAtom !state)\n         (let [tracker\n               (reagent/track!\n                (fn []\n                  (set (clj->js @!state))))]\n           (fn unmount []\n             (reagent/dispose! tracker)))\n         js/undefined)))\n    nil))\n\n(defn PanelOptions [opts]\n  [:> Leva opts])\n\n(defn Panel [opts]\n  [:f> Panel* opts])\n\n;; TODO document that we CAN actually use custom stores and contexts and pin a\n;; panel to a specific page element, once I figure out how to do that for\n;; jsxgraph and mathbox we'll be SOLID. Here is the demo of custom stores etc:\n;; https://codesandbox.io/s/github/pmndrs/leva/tree/main/demo/src/sandboxes/leva-advanced-panels?file=/src/App.jsx:0-26\n;;\n;; There are more demos that live here\n;; https://github.com/pmndrs/leva/tree/main/demo/src/sandboxes, and we can\n;; access them with the same URL.\n;;\n;; For plugins, here is an example:\n;; https://github.com/pmndrs/leva/tree/main/packages/plugin-plot\n"]}